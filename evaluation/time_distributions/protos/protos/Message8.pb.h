// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/Message8.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage8_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage8_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fMessage8_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fMessage8_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protos_2fMessage8_2eproto;
namespace fleetbench {
namespace proto {
class Message8;
struct Message8DefaultTypeInternal;
extern Message8DefaultTypeInternal _Message8_default_instance_;
class Message8_M1;
struct Message8_M1DefaultTypeInternal;
extern Message8_M1DefaultTypeInternal _Message8_M1_default_instance_;
class Message8_M1_M11;
struct Message8_M1_M11DefaultTypeInternal;
extern Message8_M1_M11DefaultTypeInternal _Message8_M1_M11_default_instance_;
class Message8_M1_M11_M14;
struct Message8_M1_M11_M14DefaultTypeInternal;
extern Message8_M1_M11_M14DefaultTypeInternal _Message8_M1_M11_M14_default_instance_;
class Message8_M1_M11_M14_M18;
struct Message8_M1_M11_M14_M18DefaultTypeInternal;
extern Message8_M1_M11_M14_M18DefaultTypeInternal _Message8_M1_M11_M14_M18_default_instance_;
class Message8_M1_M11_M14_M18_M42;
struct Message8_M1_M11_M14_M18_M42DefaultTypeInternal;
extern Message8_M1_M11_M14_M18_M42DefaultTypeInternal _Message8_M1_M11_M14_M18_M42_default_instance_;
class Message8_M1_M11_M14_M19;
struct Message8_M1_M11_M14_M19DefaultTypeInternal;
extern Message8_M1_M11_M14_M19DefaultTypeInternal _Message8_M1_M11_M14_M19_default_instance_;
class Message8_M1_M11_M14_M19_M37;
struct Message8_M1_M11_M14_M19_M37DefaultTypeInternal;
extern Message8_M1_M11_M14_M19_M37DefaultTypeInternal _Message8_M1_M11_M14_M19_M37_default_instance_;
class Message8_M1_M11_M14_M27;
struct Message8_M1_M11_M14_M27DefaultTypeInternal;
extern Message8_M1_M11_M14_M27DefaultTypeInternal _Message8_M1_M11_M14_M27_default_instance_;
class Message8_M1_M11_M14_M27_M32;
struct Message8_M1_M11_M14_M27_M32DefaultTypeInternal;
extern Message8_M1_M11_M14_M27_M32DefaultTypeInternal _Message8_M1_M11_M14_M27_M32_default_instance_;
class Message8_M1_M11_M14_M27_M39;
struct Message8_M1_M11_M14_M27_M39DefaultTypeInternal;
extern Message8_M1_M11_M14_M27_M39DefaultTypeInternal _Message8_M1_M11_M14_M27_M39_default_instance_;
class Message8_M1_M11_M14_M27_M39_M58;
struct Message8_M1_M11_M14_M27_M39_M58DefaultTypeInternal;
extern Message8_M1_M11_M14_M27_M39_M58DefaultTypeInternal _Message8_M1_M11_M14_M27_M39_M58_default_instance_;
class Message8_M1_M4;
struct Message8_M1_M4DefaultTypeInternal;
extern Message8_M1_M4DefaultTypeInternal _Message8_M1_M4_default_instance_;
class Message8_M1_M4_M15;
struct Message8_M1_M4_M15DefaultTypeInternal;
extern Message8_M1_M4_M15DefaultTypeInternal _Message8_M1_M4_M15_default_instance_;
class Message8_M1_M4_M15_M16;
struct Message8_M1_M4_M15_M16DefaultTypeInternal;
extern Message8_M1_M4_M15_M16DefaultTypeInternal _Message8_M1_M4_M15_M16_default_instance_;
class Message8_M1_M4_M15_M16_M33;
struct Message8_M1_M4_M15_M16_M33DefaultTypeInternal;
extern Message8_M1_M4_M15_M16_M33DefaultTypeInternal _Message8_M1_M4_M15_M16_M33_default_instance_;
class Message8_M1_M4_M15_M16_M33_M53;
struct Message8_M1_M4_M15_M16_M33_M53DefaultTypeInternal;
extern Message8_M1_M4_M15_M16_M33_M53DefaultTypeInternal _Message8_M1_M4_M15_M16_M33_M53_default_instance_;
class Message8_M1_M4_M15_M16_M33_M53_M69;
struct Message8_M1_M4_M15_M16_M33_M53_M69DefaultTypeInternal;
extern Message8_M1_M4_M15_M16_M33_M53_M69DefaultTypeInternal _Message8_M1_M4_M15_M16_M33_M53_M69_default_instance_;
class Message8_M1_M4_M15_M16_M33_M53_M69_M76;
struct Message8_M1_M4_M15_M16_M33_M53_M69_M76DefaultTypeInternal;
extern Message8_M1_M4_M15_M16_M33_M53_M69_M76DefaultTypeInternal _Message8_M1_M4_M15_M16_M33_M53_M69_M76_default_instance_;
class Message8_M1_M4_M15_M16_M33_M53_M74;
struct Message8_M1_M4_M15_M16_M33_M53_M74DefaultTypeInternal;
extern Message8_M1_M4_M15_M16_M33_M53_M74DefaultTypeInternal _Message8_M1_M4_M15_M16_M33_M53_M74_default_instance_;
class Message8_M1_M4_M15_M16_M33_M60;
struct Message8_M1_M4_M15_M16_M33_M60DefaultTypeInternal;
extern Message8_M1_M4_M15_M16_M33_M60DefaultTypeInternal _Message8_M1_M4_M15_M16_M33_M60_default_instance_;
class Message8_M1_M4_M15_M16_M44;
struct Message8_M1_M4_M15_M16_M44DefaultTypeInternal;
extern Message8_M1_M4_M15_M16_M44DefaultTypeInternal _Message8_M1_M4_M15_M16_M44_default_instance_;
class Message8_M1_M4_M15_M20;
struct Message8_M1_M4_M15_M20DefaultTypeInternal;
extern Message8_M1_M4_M15_M20DefaultTypeInternal _Message8_M1_M4_M15_M20_default_instance_;
class Message8_M1_M4_M15_M20_M45;
struct Message8_M1_M4_M15_M20_M45DefaultTypeInternal;
extern Message8_M1_M4_M15_M20_M45DefaultTypeInternal _Message8_M1_M4_M15_M20_M45_default_instance_;
class Message8_M1_M4_M15_M20_M45_M57;
struct Message8_M1_M4_M15_M20_M45_M57DefaultTypeInternal;
extern Message8_M1_M4_M15_M20_M45_M57DefaultTypeInternal _Message8_M1_M4_M15_M20_M45_M57_default_instance_;
class Message8_M1_M4_M15_M20_M46;
struct Message8_M1_M4_M15_M20_M46DefaultTypeInternal;
extern Message8_M1_M4_M15_M20_M46DefaultTypeInternal _Message8_M1_M4_M15_M20_M46_default_instance_;
class Message8_M1_M4_M15_M20_M46_M56;
struct Message8_M1_M4_M15_M20_M46_M56DefaultTypeInternal;
extern Message8_M1_M4_M15_M20_M46_M56DefaultTypeInternal _Message8_M1_M4_M15_M20_M46_M56_default_instance_;
class Message8_M1_M4_M15_M23;
struct Message8_M1_M4_M15_M23DefaultTypeInternal;
extern Message8_M1_M4_M15_M23DefaultTypeInternal _Message8_M1_M4_M15_M23_default_instance_;
class Message8_M1_M4_M15_M23_M30;
struct Message8_M1_M4_M15_M23_M30DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M30DefaultTypeInternal _Message8_M1_M4_M15_M23_M30_default_instance_;
class Message8_M1_M4_M15_M23_M31;
struct Message8_M1_M4_M15_M23_M31DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M31DefaultTypeInternal _Message8_M1_M4_M15_M23_M31_default_instance_;
class Message8_M1_M4_M15_M23_M38;
struct Message8_M1_M4_M15_M23_M38DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M38DefaultTypeInternal _Message8_M1_M4_M15_M23_M38_default_instance_;
class Message8_M1_M4_M15_M23_M40;
struct Message8_M1_M4_M15_M23_M40DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48;
struct Message8_M1_M4_M15_M23_M40_M48DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73;
struct Message8_M1_M4_M15_M23_M40_M48_M73DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M79;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M79DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M79DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M79_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_default_instance_;
class Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85;
struct Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85DefaultTypeInternal;
extern Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85DefaultTypeInternal _Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_default_instance_;
class Message8_M1_M4_M15_M25;
struct Message8_M1_M4_M15_M25DefaultTypeInternal;
extern Message8_M1_M4_M15_M25DefaultTypeInternal _Message8_M1_M4_M15_M25_default_instance_;
class Message8_M1_M4_M15_M28;
struct Message8_M1_M4_M15_M28DefaultTypeInternal;
extern Message8_M1_M4_M15_M28DefaultTypeInternal _Message8_M1_M4_M15_M28_default_instance_;
class Message8_M1_M9;
struct Message8_M1_M9DefaultTypeInternal;
extern Message8_M1_M9DefaultTypeInternal _Message8_M1_M9_default_instance_;
class Message8_M2;
struct Message8_M2DefaultTypeInternal;
extern Message8_M2DefaultTypeInternal _Message8_M2_default_instance_;
class Message8_M2_M10;
struct Message8_M2_M10DefaultTypeInternal;
extern Message8_M2_M10DefaultTypeInternal _Message8_M2_M10_default_instance_;
class Message8_M2_M3;
struct Message8_M2_M3DefaultTypeInternal;
extern Message8_M2_M3DefaultTypeInternal _Message8_M2_M3_default_instance_;
class Message8_M2_M5;
struct Message8_M2_M5DefaultTypeInternal;
extern Message8_M2_M5DefaultTypeInternal _Message8_M2_M5_default_instance_;
class Message8_M2_M5_M13;
struct Message8_M2_M5_M13DefaultTypeInternal;
extern Message8_M2_M5_M13DefaultTypeInternal _Message8_M2_M5_M13_default_instance_;
class Message8_M2_M5_M13_M17;
struct Message8_M2_M5_M13_M17DefaultTypeInternal;
extern Message8_M2_M5_M13_M17DefaultTypeInternal _Message8_M2_M5_M13_M17_default_instance_;
class Message8_M2_M5_M13_M17_M29;
struct Message8_M2_M5_M13_M17_M29DefaultTypeInternal;
extern Message8_M2_M5_M13_M17_M29DefaultTypeInternal _Message8_M2_M5_M13_M17_M29_default_instance_;
class Message8_M2_M5_M13_M17_M29_M50;
struct Message8_M2_M5_M13_M17_M29_M50DefaultTypeInternal;
extern Message8_M2_M5_M13_M17_M29_M50DefaultTypeInternal _Message8_M2_M5_M13_M17_M29_M50_default_instance_;
class Message8_M2_M5_M13_M17_M29_M50_M72;
struct Message8_M2_M5_M13_M17_M29_M50_M72DefaultTypeInternal;
extern Message8_M2_M5_M13_M17_M29_M50_M72DefaultTypeInternal _Message8_M2_M5_M13_M17_M29_M50_M72_default_instance_;
class Message8_M2_M5_M13_M17_M29_M50_M72_M77;
struct Message8_M2_M5_M13_M17_M29_M50_M72_M77DefaultTypeInternal;
extern Message8_M2_M5_M13_M17_M29_M50_M72_M77DefaultTypeInternal _Message8_M2_M5_M13_M17_M29_M50_M72_M77_default_instance_;
class Message8_M2_M5_M13_M17_M29_M61;
struct Message8_M2_M5_M13_M17_M29_M61DefaultTypeInternal;
extern Message8_M2_M5_M13_M17_M29_M61DefaultTypeInternal _Message8_M2_M5_M13_M17_M29_M61_default_instance_;
class Message8_M2_M5_M13_M26;
struct Message8_M2_M5_M13_M26DefaultTypeInternal;
extern Message8_M2_M5_M13_M26DefaultTypeInternal _Message8_M2_M5_M13_M26_default_instance_;
class Message8_M2_M5_M13_M26_M36;
struct Message8_M2_M5_M13_M26_M36DefaultTypeInternal;
extern Message8_M2_M5_M13_M26_M36DefaultTypeInternal _Message8_M2_M5_M13_M26_M36_default_instance_;
class Message8_M2_M5_M13_M26_M47;
struct Message8_M2_M5_M13_M26_M47DefaultTypeInternal;
extern Message8_M2_M5_M13_M26_M47DefaultTypeInternal _Message8_M2_M5_M13_M26_M47_default_instance_;
class Message8_M2_M6;
struct Message8_M2_M6DefaultTypeInternal;
extern Message8_M2_M6DefaultTypeInternal _Message8_M2_M6_default_instance_;
class Message8_M2_M6_M12;
struct Message8_M2_M6_M12DefaultTypeInternal;
extern Message8_M2_M6_M12DefaultTypeInternal _Message8_M2_M6_M12_default_instance_;
class Message8_M2_M6_M12_M21;
struct Message8_M2_M6_M12_M21DefaultTypeInternal;
extern Message8_M2_M6_M12_M21DefaultTypeInternal _Message8_M2_M6_M12_M21_default_instance_;
class Message8_M2_M6_M12_M21_M34;
struct Message8_M2_M6_M12_M21_M34DefaultTypeInternal;
extern Message8_M2_M6_M12_M21_M34DefaultTypeInternal _Message8_M2_M6_M12_M21_M34_default_instance_;
class Message8_M2_M6_M12_M21_M34_M55;
struct Message8_M2_M6_M12_M21_M34_M55DefaultTypeInternal;
extern Message8_M2_M6_M12_M21_M34_M55DefaultTypeInternal _Message8_M2_M6_M12_M21_M34_M55_default_instance_;
class Message8_M2_M6_M12_M21_M34_M55_M71;
struct Message8_M2_M6_M12_M21_M34_M55_M71DefaultTypeInternal;
extern Message8_M2_M6_M12_M21_M34_M55_M71DefaultTypeInternal _Message8_M2_M6_M12_M21_M34_M55_M71_default_instance_;
class Message8_M2_M6_M12_M22;
struct Message8_M2_M6_M12_M22DefaultTypeInternal;
extern Message8_M2_M6_M12_M22DefaultTypeInternal _Message8_M2_M6_M12_M22_default_instance_;
class Message8_M2_M6_M12_M22_M41;
struct Message8_M2_M6_M12_M22_M41DefaultTypeInternal;
extern Message8_M2_M6_M12_M22_M41DefaultTypeInternal _Message8_M2_M6_M12_M22_M41_default_instance_;
class Message8_M2_M6_M12_M22_M41_M59;
struct Message8_M2_M6_M12_M22_M41_M59DefaultTypeInternal;
extern Message8_M2_M6_M12_M22_M41_M59DefaultTypeInternal _Message8_M2_M6_M12_M22_M41_M59_default_instance_;
class Message8_M2_M6_M12_M22_M41_M59_M70;
struct Message8_M2_M6_M12_M22_M41_M59_M70DefaultTypeInternal;
extern Message8_M2_M6_M12_M22_M41_M59_M70DefaultTypeInternal _Message8_M2_M6_M12_M22_M41_M59_M70_default_instance_;
class Message8_M2_M6_M12_M24;
struct Message8_M2_M6_M12_M24DefaultTypeInternal;
extern Message8_M2_M6_M12_M24DefaultTypeInternal _Message8_M2_M6_M12_M24_default_instance_;
class Message8_M2_M6_M12_M24_M35;
struct Message8_M2_M6_M12_M24_M35DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_default_instance_;
class Message8_M2_M6_M12_M24_M35_M52;
struct Message8_M2_M6_M12_M24_M35_M52DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M52DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M52_default_instance_;
class Message8_M2_M6_M12_M24_M35_M52_M64;
struct Message8_M2_M6_M12_M24_M35_M52_M64DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M52_M64DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M52_M64_default_instance_;
class Message8_M2_M6_M12_M24_M35_M52_M64_M78;
struct Message8_M2_M6_M12_M24_M35_M52_M64_M78DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M52_M64_M78DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M52_M64_M78_default_instance_;
class Message8_M2_M6_M12_M24_M35_M52_M67;
struct Message8_M2_M6_M12_M24_M35_M52_M67DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M52_M67DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M52_M67_default_instance_;
class Message8_M2_M6_M12_M24_M35_M54;
struct Message8_M2_M6_M12_M24_M35_M54DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M54DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M54_default_instance_;
class Message8_M2_M6_M12_M24_M35_M62;
struct Message8_M2_M6_M12_M24_M35_M62DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M62DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M62_default_instance_;
class Message8_M2_M6_M12_M24_M35_M62_M65;
struct Message8_M2_M6_M12_M24_M35_M62_M65DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M62_M65DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M62_M65_default_instance_;
class Message8_M2_M6_M12_M24_M35_M62_M66;
struct Message8_M2_M6_M12_M24_M35_M62_M66DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M62_M66DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M62_M66_default_instance_;
class Message8_M2_M6_M12_M24_M35_M63;
struct Message8_M2_M6_M12_M24_M35_M63DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M35_M63DefaultTypeInternal _Message8_M2_M6_M12_M24_M35_M63_default_instance_;
class Message8_M2_M6_M12_M24_M43;
struct Message8_M2_M6_M12_M24_M43DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M43DefaultTypeInternal _Message8_M2_M6_M12_M24_M43_default_instance_;
class Message8_M2_M6_M12_M24_M43_M49;
struct Message8_M2_M6_M12_M24_M43_M49DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M43_M49DefaultTypeInternal _Message8_M2_M6_M12_M24_M43_M49_default_instance_;
class Message8_M2_M6_M12_M24_M43_M49_M68;
struct Message8_M2_M6_M12_M24_M43_M49_M68DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M43_M49_M68DefaultTypeInternal _Message8_M2_M6_M12_M24_M43_M49_M68_default_instance_;
class Message8_M2_M6_M12_M24_M43_M51;
struct Message8_M2_M6_M12_M24_M43_M51DefaultTypeInternal;
extern Message8_M2_M6_M12_M24_M43_M51DefaultTypeInternal _Message8_M2_M6_M12_M24_M43_M51_default_instance_;
class Message8_M2_M7;
struct Message8_M2_M7DefaultTypeInternal;
extern Message8_M2_M7DefaultTypeInternal _Message8_M2_M7_default_instance_;
class Message8_M2_M8;
struct Message8_M2_M8DefaultTypeInternal;
extern Message8_M2_M8DefaultTypeInternal _Message8_M2_M8_default_instance_;
}  // namespace proto
}  // namespace fleetbench
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fleetbench {
namespace proto {
enum Message8_M1_M4_M15_M20_M46_E11 : int {
  Message8_M1_M4_M15_M20_M46_E11_E11_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M20_M46_E11_E11_CONST_1 = 16,
  Message8_M1_M4_M15_M20_M46_E11_E11_CONST_2 = 88,
  Message8_M1_M4_M15_M20_M46_E11_E11_CONST_3 = 43,
  Message8_M1_M4_M15_M20_M46_E11_E11_CONST_4 = 10,
  Message8_M1_M4_M15_M20_M46_E11_E11_CONST_5 = 83,
};

bool Message8_M1_M4_M15_M20_M46_E11_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M20_M46_E11_internal_data_[];
constexpr Message8_M1_M4_M15_M20_M46_E11 Message8_M1_M4_M15_M20_M46_E11_E11_MIN = static_cast<Message8_M1_M4_M15_M20_M46_E11>(0);
constexpr Message8_M1_M4_M15_M20_M46_E11 Message8_M1_M4_M15_M20_M46_E11_E11_MAX = static_cast<Message8_M1_M4_M15_M20_M46_E11>(88);
constexpr int Message8_M1_M4_M15_M20_M46_E11_E11_ARRAYSIZE = 88 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M20_M46_E11_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M20_M46_E11_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M20_M46_E11>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E11_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M20_M46_E11_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M20_M46_E11_Parse(absl::string_view name, Message8_M1_M4_M15_M20_M46_E11* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M20_M46_E11>(
      Message8_M1_M4_M15_M20_M46_E11_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_1 = 87,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_2 = 80,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_3 = 29,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_4 = 37,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_5 = 23,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35>(87);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_ARRAYSIZE = 87 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E35_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_1 = 78,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_2 = 68,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_3 = 12,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_4 = 95,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_5 = 36,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36>(95);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_ARRAYSIZE = 95 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E36_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_1 = 115,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_2 = 108,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_3 = 53,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_4 = 54,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_5 = 79,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37>(115);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_ARRAYSIZE = 115 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E37_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_1 = 118,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_2 = 122,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_3 = 2,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_4 = 99,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_5 = 114,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38>(122);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E38_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_1 = 86,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_2 = 55,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_3 = 15,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_4 = 89,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_5 = 21,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39>(89);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_ARRAYSIZE = 89 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E39_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_1 = 59,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_2 = 74,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_3 = 30,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_4 = 53,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_5 = 45,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40>(74);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_ARRAYSIZE = 74 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E40_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_1 = 15,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_2 = 13,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_3 = 91,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_4 = 61,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_5 = 17,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41>(91);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_ARRAYSIZE = 91 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E41_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_1 = 114,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_2 = 4,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_3 = 104,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_4 = 18,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_5 = 26,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42>(114);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E42_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_1 = 37,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_2 = 75,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_3 = 42,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_4 = 45,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_5 = 20,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43>(75);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_ARRAYSIZE = 75 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E43_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_1 = 57,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_2 = 65,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_3 = 124,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_4 = 101,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_5 = 103,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44>(124);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E44_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_1 = 12,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_2 = 124,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_3 = 121,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_4 = 34,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_5 = 123,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45>(124);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E45_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_1 = 29,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_2 = 9,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_3 = 17,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_4 = 12,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_5 = 81,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46>(81);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_ARRAYSIZE = 81 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E46_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_1 = 125,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_2 = 107,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_3 = 40,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_4 = 72,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_5 = 110,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47>(125);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E47_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_1 = 95,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_2 = 104,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_3 = 10,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_4 = 56,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_5 = 74,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48>(104);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_ARRAYSIZE = 104 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E48_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_1 = 97,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_2 = 73,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_3 = 114,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_4 = 100,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_5 = 66,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49>(114);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E49_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_1 = 108,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_2 = 34,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_3 = 46,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_4 = 27,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_5 = 16,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50>(108);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E50_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_1 = 14,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_2 = 86,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_3 = 111,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_4 = 121,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_5 = 67,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51>(121);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E51_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_1 = 105,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_2 = 97,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_3 = 108,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_4 = 22,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_5 = 17,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52>(108);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E52_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_1 = 76,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_2 = 14,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_3 = 82,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_4 = 78,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_5 = 4,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53>(82);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_ARRAYSIZE = 82 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E53_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_1 = 126,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_2 = 21,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_3 = 83,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_4 = 113,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_5 = 118,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54>(126);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E54_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_1 = 64,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_2 = 59,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_3 = 101,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_4 = 104,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_5 = 90,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55>(104);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_ARRAYSIZE = 104 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E55_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_1 = 108,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_2 = 69,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_3 = 67,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_4 = 60,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_5 = 40,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56>(108);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E56_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_1 = 5,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_2 = 70,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_3 = 58,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_4 = 84,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_5 = 78,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57>(84);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_ARRAYSIZE = 84 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E57_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_1 = 107,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_2 = 44,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_3 = 102,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_4 = 48,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_5 = 11,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58>(107);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E58_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_1 = 77,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_2 = 3,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_3 = 121,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_4 = 40,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_5 = 106,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59>(121);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E59_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_1 = 122,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_2 = 46,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_3 = 47,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_4 = 51,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_5 = 49,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30>(122);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E30_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_1 = 126,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_2 = 82,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_3 = 111,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_4 = 57,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_5 = 4,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31>(126);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E31_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_1 = 80,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_2 = 2,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_3 = 101,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_4 = 100,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_5 = 32,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32>(101);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E32_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_1 = 72,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_2 = 100,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_3 = 107,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_4 = 54,
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_5 = 86,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33>(107);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E33_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_1 = 90,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_2 = 20,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_3 = 3,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_4 = 111,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_5 = 85,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34>(111);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_ARRAYSIZE = 111 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E34_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_1 = 90,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_2 = 40,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_3 = 83,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_4 = 118,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_5 = 117,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21>(118);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E21_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_1 = 99,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_2 = 102,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_3 = 73,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_4 = 88,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_5 = 97,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22>(102);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_ARRAYSIZE = 102 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E22_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_1 = 62,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_2 = 95,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_3 = 64,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_4 = 48,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_5 = 67,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23>(95);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_ARRAYSIZE = 95 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E23_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_1 = 62,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_2 = 28,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_3 = 66,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_4 = 25,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_5 = 105,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24>(105);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_ARRAYSIZE = 105 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E24_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_1 = 7,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_2 = 121,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_3 = 87,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_4 = 126,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_5 = 45,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25>(126);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E25_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_1 = 60,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_2 = 100,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_3 = 114,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_4 = 57,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_5 = 124,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26>(124);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E26_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_1 = 51,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_2 = 7,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_3 = 113,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_4 = 119,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_5 = 118,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27>(119);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E27_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_1 = 71,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_2 = 20,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_3 = 83,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_4 = 99,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_5 = 7,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28>(99);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_ARRAYSIZE = 99 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E28_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 : int {
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_1 = 69,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_2 = 29,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_3 = 53,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_4 = 66,
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_5 = 30,
};

bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_MIN = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29>(0);
constexpr Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_MAX = static_cast<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29>(69);
constexpr int Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_ARRAYSIZE = 69 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E29_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29>(
      Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_descriptor(), name, value);
}
enum Message8_M1_M4_M15_M23_M40_E9 : int {
  Message8_M1_M4_M15_M23_M40_E9_E9_UNSPECIFIED = 0,
  Message8_M1_M4_M15_M23_M40_E9_E9_CONST_1 = 41,
  Message8_M1_M4_M15_M23_M40_E9_E9_CONST_2 = 88,
  Message8_M1_M4_M15_M23_M40_E9_E9_CONST_3 = 100,
  Message8_M1_M4_M15_M23_M40_E9_E9_CONST_4 = 80,
  Message8_M1_M4_M15_M23_M40_E9_E9_CONST_5 = 104,
};

bool Message8_M1_M4_M15_M23_M40_E9_IsValid(int value);
extern const uint32_t Message8_M1_M4_M15_M23_M40_E9_internal_data_[];
constexpr Message8_M1_M4_M15_M23_M40_E9 Message8_M1_M4_M15_M23_M40_E9_E9_MIN = static_cast<Message8_M1_M4_M15_M23_M40_E9>(0);
constexpr Message8_M1_M4_M15_M23_M40_E9 Message8_M1_M4_M15_M23_M40_E9_E9_MAX = static_cast<Message8_M1_M4_M15_M23_M40_E9>(104);
constexpr int Message8_M1_M4_M15_M23_M40_E9_E9_ARRAYSIZE = 104 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M4_M15_M23_M40_E9_descriptor();
template <typename T>
const std::string& Message8_M1_M4_M15_M23_M40_E9_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M4_M15_M23_M40_E9>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E9_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M4_M15_M23_M40_E9_descriptor(), value);
}
inline bool Message8_M1_M4_M15_M23_M40_E9_Parse(absl::string_view name, Message8_M1_M4_M15_M23_M40_E9* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M4_M15_M23_M40_E9>(
      Message8_M1_M4_M15_M23_M40_E9_descriptor(), name, value);
}
enum Message8_M1_M11_M14_M27_M32_E8 : int {
  Message8_M1_M11_M14_M27_M32_E8_E8_UNSPECIFIED = 0,
  Message8_M1_M11_M14_M27_M32_E8_E8_CONST_1 = 23,
  Message8_M1_M11_M14_M27_M32_E8_E8_CONST_2 = 29,
  Message8_M1_M11_M14_M27_M32_E8_E8_CONST_3 = 35,
  Message8_M1_M11_M14_M27_M32_E8_E8_CONST_4 = 86,
  Message8_M1_M11_M14_M27_M32_E8_E8_CONST_5 = 110,
};

bool Message8_M1_M11_M14_M27_M32_E8_IsValid(int value);
extern const uint32_t Message8_M1_M11_M14_M27_M32_E8_internal_data_[];
constexpr Message8_M1_M11_M14_M27_M32_E8 Message8_M1_M11_M14_M27_M32_E8_E8_MIN = static_cast<Message8_M1_M11_M14_M27_M32_E8>(0);
constexpr Message8_M1_M11_M14_M27_M32_E8 Message8_M1_M11_M14_M27_M32_E8_E8_MAX = static_cast<Message8_M1_M11_M14_M27_M32_E8>(110);
constexpr int Message8_M1_M11_M14_M27_M32_E8_E8_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M11_M14_M27_M32_E8_descriptor();
template <typename T>
const std::string& Message8_M1_M11_M14_M27_M32_E8_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M11_M14_M27_M32_E8>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E8_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M11_M14_M27_M32_E8_descriptor(), value);
}
inline bool Message8_M1_M11_M14_M27_M32_E8_Parse(absl::string_view name, Message8_M1_M11_M14_M27_M32_E8* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M11_M14_M27_M32_E8>(
      Message8_M1_M11_M14_M27_M32_E8_descriptor(), name, value);
}
enum Message8_M1_M11_M14_E4 : int {
  Message8_M1_M11_M14_E4_E4_UNSPECIFIED = 0,
  Message8_M1_M11_M14_E4_E4_CONST_1 = 110,
  Message8_M1_M11_M14_E4_E4_CONST_2 = 54,
  Message8_M1_M11_M14_E4_E4_CONST_3 = 123,
  Message8_M1_M11_M14_E4_E4_CONST_4 = 20,
  Message8_M1_M11_M14_E4_E4_CONST_5 = 19,
};

bool Message8_M1_M11_M14_E4_IsValid(int value);
extern const uint32_t Message8_M1_M11_M14_E4_internal_data_[];
constexpr Message8_M1_M11_M14_E4 Message8_M1_M11_M14_E4_E4_MIN = static_cast<Message8_M1_M11_M14_E4>(0);
constexpr Message8_M1_M11_M14_E4 Message8_M1_M11_M14_E4_E4_MAX = static_cast<Message8_M1_M11_M14_E4>(123);
constexpr int Message8_M1_M11_M14_E4_E4_ARRAYSIZE = 123 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M11_M14_E4_descriptor();
template <typename T>
const std::string& Message8_M1_M11_M14_E4_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M11_M14_E4>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E4_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M11_M14_E4_descriptor(), value);
}
inline bool Message8_M1_M11_M14_E4_Parse(absl::string_view name, Message8_M1_M11_M14_E4* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M11_M14_E4>(
      Message8_M1_M11_M14_E4_descriptor(), name, value);
}
enum Message8_M1_M11_M14_E5 : int {
  Message8_M1_M11_M14_E5_E5_UNSPECIFIED = 0,
  Message8_M1_M11_M14_E5_E5_CONST_1 = 80,
  Message8_M1_M11_M14_E5_E5_CONST_2 = 122,
  Message8_M1_M11_M14_E5_E5_CONST_3 = 10,
  Message8_M1_M11_M14_E5_E5_CONST_4 = 1,
  Message8_M1_M11_M14_E5_E5_CONST_5 = 101,
};

bool Message8_M1_M11_M14_E5_IsValid(int value);
extern const uint32_t Message8_M1_M11_M14_E5_internal_data_[];
constexpr Message8_M1_M11_M14_E5 Message8_M1_M11_M14_E5_E5_MIN = static_cast<Message8_M1_M11_M14_E5>(0);
constexpr Message8_M1_M11_M14_E5 Message8_M1_M11_M14_E5_E5_MAX = static_cast<Message8_M1_M11_M14_E5>(122);
constexpr int Message8_M1_M11_M14_E5_E5_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M1_M11_M14_E5_descriptor();
template <typename T>
const std::string& Message8_M1_M11_M14_E5_Name(T value) {
  static_assert(std::is_same<T, Message8_M1_M11_M14_E5>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E5_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M1_M11_M14_E5_descriptor(), value);
}
inline bool Message8_M1_M11_M14_E5_Parse(absl::string_view name, Message8_M1_M11_M14_E5* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M1_M11_M14_E5>(
      Message8_M1_M11_M14_E5_descriptor(), name, value);
}
enum Message8_M2_M5_M13_M17_M29_M50_M72_E20 : int {
  Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_UNSPECIFIED = 0,
  Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_1 = 102,
  Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_2 = 90,
  Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_3 = 4,
  Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_4 = 119,
  Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_5 = 103,
};

bool Message8_M2_M5_M13_M17_M29_M50_M72_E20_IsValid(int value);
extern const uint32_t Message8_M2_M5_M13_M17_M29_M50_M72_E20_internal_data_[];
constexpr Message8_M2_M5_M13_M17_M29_M50_M72_E20 Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_MIN = static_cast<Message8_M2_M5_M13_M17_M29_M50_M72_E20>(0);
constexpr Message8_M2_M5_M13_M17_M29_M50_M72_E20 Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_MAX = static_cast<Message8_M2_M5_M13_M17_M29_M50_M72_E20>(119);
constexpr int Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M5_M13_M17_M29_M50_M72_E20_descriptor();
template <typename T>
const std::string& Message8_M2_M5_M13_M17_M29_M50_M72_E20_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M5_M13_M17_M29_M50_M72_E20>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E20_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M5_M13_M17_M29_M50_M72_E20_descriptor(), value);
}
inline bool Message8_M2_M5_M13_M17_M29_M50_M72_E20_Parse(absl::string_view name, Message8_M2_M5_M13_M17_M29_M50_M72_E20* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M5_M13_M17_M29_M50_M72_E20>(
      Message8_M2_M5_M13_M17_M29_M50_M72_E20_descriptor(), name, value);
}
enum Message8_M2_M5_M13_M17_M29_M50_E13 : int {
  Message8_M2_M5_M13_M17_M29_M50_E13_E13_UNSPECIFIED = 0,
  Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_1 = 45,
  Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_2 = 108,
  Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_3 = 40,
  Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_4 = 23,
  Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_5 = 44,
};

bool Message8_M2_M5_M13_M17_M29_M50_E13_IsValid(int value);
extern const uint32_t Message8_M2_M5_M13_M17_M29_M50_E13_internal_data_[];
constexpr Message8_M2_M5_M13_M17_M29_M50_E13 Message8_M2_M5_M13_M17_M29_M50_E13_E13_MIN = static_cast<Message8_M2_M5_M13_M17_M29_M50_E13>(0);
constexpr Message8_M2_M5_M13_M17_M29_M50_E13 Message8_M2_M5_M13_M17_M29_M50_E13_E13_MAX = static_cast<Message8_M2_M5_M13_M17_M29_M50_E13>(108);
constexpr int Message8_M2_M5_M13_M17_M29_M50_E13_E13_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M5_M13_M17_M29_M50_E13_descriptor();
template <typename T>
const std::string& Message8_M2_M5_M13_M17_M29_M50_E13_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M5_M13_M17_M29_M50_E13>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E13_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M5_M13_M17_M29_M50_E13_descriptor(), value);
}
inline bool Message8_M2_M5_M13_M17_M29_M50_E13_Parse(absl::string_view name, Message8_M2_M5_M13_M17_M29_M50_E13* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M5_M13_M17_M29_M50_E13>(
      Message8_M2_M5_M13_M17_M29_M50_E13_descriptor(), name, value);
}
enum Message8_M2_M5_M13_M17_M29_M61_E17 : int {
  Message8_M2_M5_M13_M17_M29_M61_E17_E17_UNSPECIFIED = 0,
  Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_1 = 40,
  Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_2 = 115,
  Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_3 = 104,
  Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_4 = 60,
  Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_5 = 117,
};

bool Message8_M2_M5_M13_M17_M29_M61_E17_IsValid(int value);
extern const uint32_t Message8_M2_M5_M13_M17_M29_M61_E17_internal_data_[];
constexpr Message8_M2_M5_M13_M17_M29_M61_E17 Message8_M2_M5_M13_M17_M29_M61_E17_E17_MIN = static_cast<Message8_M2_M5_M13_M17_M29_M61_E17>(0);
constexpr Message8_M2_M5_M13_M17_M29_M61_E17 Message8_M2_M5_M13_M17_M29_M61_E17_E17_MAX = static_cast<Message8_M2_M5_M13_M17_M29_M61_E17>(117);
constexpr int Message8_M2_M5_M13_M17_M29_M61_E17_E17_ARRAYSIZE = 117 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M5_M13_M17_M29_M61_E17_descriptor();
template <typename T>
const std::string& Message8_M2_M5_M13_M17_M29_M61_E17_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M5_M13_M17_M29_M61_E17>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E17_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M5_M13_M17_M29_M61_E17_descriptor(), value);
}
inline bool Message8_M2_M5_M13_M17_M29_M61_E17_Parse(absl::string_view name, Message8_M2_M5_M13_M17_M29_M61_E17* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M5_M13_M17_M29_M61_E17>(
      Message8_M2_M5_M13_M17_M29_M61_E17_descriptor(), name, value);
}
enum Message8_M2_M5_M13_M26_M47_E12 : int {
  Message8_M2_M5_M13_M26_M47_E12_E12_UNSPECIFIED = 0,
  Message8_M2_M5_M13_M26_M47_E12_E12_CONST_1 = 33,
  Message8_M2_M5_M13_M26_M47_E12_E12_CONST_2 = 116,
  Message8_M2_M5_M13_M26_M47_E12_E12_CONST_3 = 9,
  Message8_M2_M5_M13_M26_M47_E12_E12_CONST_4 = 73,
  Message8_M2_M5_M13_M26_M47_E12_E12_CONST_5 = 10,
};

bool Message8_M2_M5_M13_M26_M47_E12_IsValid(int value);
extern const uint32_t Message8_M2_M5_M13_M26_M47_E12_internal_data_[];
constexpr Message8_M2_M5_M13_M26_M47_E12 Message8_M2_M5_M13_M26_M47_E12_E12_MIN = static_cast<Message8_M2_M5_M13_M26_M47_E12>(0);
constexpr Message8_M2_M5_M13_M26_M47_E12 Message8_M2_M5_M13_M26_M47_E12_E12_MAX = static_cast<Message8_M2_M5_M13_M26_M47_E12>(116);
constexpr int Message8_M2_M5_M13_M26_M47_E12_E12_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M5_M13_M26_M47_E12_descriptor();
template <typename T>
const std::string& Message8_M2_M5_M13_M26_M47_E12_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M5_M13_M26_M47_E12>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E12_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M5_M13_M26_M47_E12_descriptor(), value);
}
inline bool Message8_M2_M5_M13_M26_M47_E12_Parse(absl::string_view name, Message8_M2_M5_M13_M26_M47_E12* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M5_M13_M26_M47_E12>(
      Message8_M2_M5_M13_M26_M47_E12_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M21_E6 : int {
  Message8_M2_M6_M12_M21_E6_E6_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M21_E6_E6_CONST_1 = 49,
  Message8_M2_M6_M12_M21_E6_E6_CONST_2 = 11,
  Message8_M2_M6_M12_M21_E6_E6_CONST_3 = 53,
  Message8_M2_M6_M12_M21_E6_E6_CONST_4 = 92,
  Message8_M2_M6_M12_M21_E6_E6_CONST_5 = 6,
};

bool Message8_M2_M6_M12_M21_E6_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M21_E6_internal_data_[];
constexpr Message8_M2_M6_M12_M21_E6 Message8_M2_M6_M12_M21_E6_E6_MIN = static_cast<Message8_M2_M6_M12_M21_E6>(0);
constexpr Message8_M2_M6_M12_M21_E6 Message8_M2_M6_M12_M21_E6_E6_MAX = static_cast<Message8_M2_M6_M12_M21_E6>(92);
constexpr int Message8_M2_M6_M12_M21_E6_E6_ARRAYSIZE = 92 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M21_E6_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M21_E6_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M21_E6>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E6_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M21_E6_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M21_E6_Parse(absl::string_view name, Message8_M2_M6_M12_M21_E6* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M21_E6>(
      Message8_M2_M6_M12_M21_E6_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M24_M35_M54_E14 : int {
  Message8_M2_M6_M12_M24_M35_M54_E14_E14_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_1 = 106,
  Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_2 = 29,
  Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_3 = 31,
  Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_4 = 21,
  Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_5 = 60,
};

bool Message8_M2_M6_M12_M24_M35_M54_E14_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M24_M35_M54_E14_internal_data_[];
constexpr Message8_M2_M6_M12_M24_M35_M54_E14 Message8_M2_M6_M12_M24_M35_M54_E14_E14_MIN = static_cast<Message8_M2_M6_M12_M24_M35_M54_E14>(0);
constexpr Message8_M2_M6_M12_M24_M35_M54_E14 Message8_M2_M6_M12_M24_M35_M54_E14_E14_MAX = static_cast<Message8_M2_M6_M12_M24_M35_M54_E14>(106);
constexpr int Message8_M2_M6_M12_M24_M35_M54_E14_E14_ARRAYSIZE = 106 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M24_M35_M54_E14_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M24_M35_M54_E14_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M24_M35_M54_E14>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E14_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M24_M35_M54_E14_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M24_M35_M54_E14_Parse(absl::string_view name, Message8_M2_M6_M12_M24_M35_M54_E14* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M24_M35_M54_E14>(
      Message8_M2_M6_M12_M24_M35_M54_E14_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M24_M35_M54_E15 : int {
  Message8_M2_M6_M12_M24_M35_M54_E15_E15_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_1 = 6,
  Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_2 = 84,
  Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_3 = 120,
  Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_4 = 88,
  Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_5 = 64,
};

bool Message8_M2_M6_M12_M24_M35_M54_E15_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M24_M35_M54_E15_internal_data_[];
constexpr Message8_M2_M6_M12_M24_M35_M54_E15 Message8_M2_M6_M12_M24_M35_M54_E15_E15_MIN = static_cast<Message8_M2_M6_M12_M24_M35_M54_E15>(0);
constexpr Message8_M2_M6_M12_M24_M35_M54_E15 Message8_M2_M6_M12_M24_M35_M54_E15_E15_MAX = static_cast<Message8_M2_M6_M12_M24_M35_M54_E15>(120);
constexpr int Message8_M2_M6_M12_M24_M35_M54_E15_E15_ARRAYSIZE = 120 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M24_M35_M54_E15_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M24_M35_M54_E15_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M24_M35_M54_E15>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E15_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M24_M35_M54_E15_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M24_M35_M54_E15_Parse(absl::string_view name, Message8_M2_M6_M12_M24_M35_M54_E15* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M24_M35_M54_E15>(
      Message8_M2_M6_M12_M24_M35_M54_E15_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M24_M35_M54_E16 : int {
  Message8_M2_M6_M12_M24_M35_M54_E16_E16_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_1 = 7,
  Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_2 = 82,
  Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_3 = 63,
  Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_4 = 124,
  Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_5 = 117,
};

bool Message8_M2_M6_M12_M24_M35_M54_E16_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M24_M35_M54_E16_internal_data_[];
constexpr Message8_M2_M6_M12_M24_M35_M54_E16 Message8_M2_M6_M12_M24_M35_M54_E16_E16_MIN = static_cast<Message8_M2_M6_M12_M24_M35_M54_E16>(0);
constexpr Message8_M2_M6_M12_M24_M35_M54_E16 Message8_M2_M6_M12_M24_M35_M54_E16_E16_MAX = static_cast<Message8_M2_M6_M12_M24_M35_M54_E16>(124);
constexpr int Message8_M2_M6_M12_M24_M35_M54_E16_E16_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M24_M35_M54_E16_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M24_M35_M54_E16_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M24_M35_M54_E16>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E16_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M24_M35_M54_E16_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M24_M35_M54_E16_Parse(absl::string_view name, Message8_M2_M6_M12_M24_M35_M54_E16* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M24_M35_M54_E16>(
      Message8_M2_M6_M12_M24_M35_M54_E16_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M24_M35_M62_E18 : int {
  Message8_M2_M6_M12_M24_M35_M62_E18_E18_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_1 = 88,
  Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_2 = 61,
  Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_3 = 29,
  Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_4 = 51,
  Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_5 = 57,
};

bool Message8_M2_M6_M12_M24_M35_M62_E18_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M24_M35_M62_E18_internal_data_[];
constexpr Message8_M2_M6_M12_M24_M35_M62_E18 Message8_M2_M6_M12_M24_M35_M62_E18_E18_MIN = static_cast<Message8_M2_M6_M12_M24_M35_M62_E18>(0);
constexpr Message8_M2_M6_M12_M24_M35_M62_E18 Message8_M2_M6_M12_M24_M35_M62_E18_E18_MAX = static_cast<Message8_M2_M6_M12_M24_M35_M62_E18>(88);
constexpr int Message8_M2_M6_M12_M24_M35_M62_E18_E18_ARRAYSIZE = 88 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M24_M35_M62_E18_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M24_M35_M62_E18_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M24_M35_M62_E18>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E18_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M24_M35_M62_E18_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M24_M35_M62_E18_Parse(absl::string_view name, Message8_M2_M6_M12_M24_M35_M62_E18* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M24_M35_M62_E18>(
      Message8_M2_M6_M12_M24_M35_M62_E18_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M24_M35_M63_E19 : int {
  Message8_M2_M6_M12_M24_M35_M63_E19_E19_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_1 = 70,
  Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_2 = 13,
  Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_3 = 53,
  Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_4 = 114,
  Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_5 = 34,
};

bool Message8_M2_M6_M12_M24_M35_M63_E19_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M24_M35_M63_E19_internal_data_[];
constexpr Message8_M2_M6_M12_M24_M35_M63_E19 Message8_M2_M6_M12_M24_M35_M63_E19_E19_MIN = static_cast<Message8_M2_M6_M12_M24_M35_M63_E19>(0);
constexpr Message8_M2_M6_M12_M24_M35_M63_E19 Message8_M2_M6_M12_M24_M35_M63_E19_E19_MAX = static_cast<Message8_M2_M6_M12_M24_M35_M63_E19>(114);
constexpr int Message8_M2_M6_M12_M24_M35_M63_E19_E19_ARRAYSIZE = 114 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M24_M35_M63_E19_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M24_M35_M63_E19_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M24_M35_M63_E19>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E19_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M24_M35_M63_E19_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M24_M35_M63_E19_Parse(absl::string_view name, Message8_M2_M6_M12_M24_M35_M63_E19* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M24_M35_M63_E19>(
      Message8_M2_M6_M12_M24_M35_M63_E19_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M24_M43_E10 : int {
  Message8_M2_M6_M12_M24_M43_E10_E10_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M24_M43_E10_E10_CONST_1 = 113,
  Message8_M2_M6_M12_M24_M43_E10_E10_CONST_2 = 66,
  Message8_M2_M6_M12_M24_M43_E10_E10_CONST_3 = 15,
  Message8_M2_M6_M12_M24_M43_E10_E10_CONST_4 = 12,
  Message8_M2_M6_M12_M24_M43_E10_E10_CONST_5 = 24,
};

bool Message8_M2_M6_M12_M24_M43_E10_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M24_M43_E10_internal_data_[];
constexpr Message8_M2_M6_M12_M24_M43_E10 Message8_M2_M6_M12_M24_M43_E10_E10_MIN = static_cast<Message8_M2_M6_M12_M24_M43_E10>(0);
constexpr Message8_M2_M6_M12_M24_M43_E10 Message8_M2_M6_M12_M24_M43_E10_E10_MAX = static_cast<Message8_M2_M6_M12_M24_M43_E10>(113);
constexpr int Message8_M2_M6_M12_M24_M43_E10_E10_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M24_M43_E10_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M24_M43_E10_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M24_M43_E10>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E10_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M24_M43_E10_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M24_M43_E10_Parse(absl::string_view name, Message8_M2_M6_M12_M24_M43_E10* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M24_M43_E10>(
      Message8_M2_M6_M12_M24_M43_E10_descriptor(), name, value);
}
enum Message8_M2_M6_M12_M24_E7 : int {
  Message8_M2_M6_M12_M24_E7_E7_UNSPECIFIED = 0,
  Message8_M2_M6_M12_M24_E7_E7_CONST_1 = 17,
  Message8_M2_M6_M12_M24_E7_E7_CONST_2 = 125,
  Message8_M2_M6_M12_M24_E7_E7_CONST_3 = 36,
  Message8_M2_M6_M12_M24_E7_E7_CONST_4 = 42,
  Message8_M2_M6_M12_M24_E7_E7_CONST_5 = 16,
};

bool Message8_M2_M6_M12_M24_E7_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_M24_E7_internal_data_[];
constexpr Message8_M2_M6_M12_M24_E7 Message8_M2_M6_M12_M24_E7_E7_MIN = static_cast<Message8_M2_M6_M12_M24_E7>(0);
constexpr Message8_M2_M6_M12_M24_E7 Message8_M2_M6_M12_M24_E7_E7_MAX = static_cast<Message8_M2_M6_M12_M24_E7>(125);
constexpr int Message8_M2_M6_M12_M24_E7_E7_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_M24_E7_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_M24_E7_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_M24_E7>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E7_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_M24_E7_descriptor(), value);
}
inline bool Message8_M2_M6_M12_M24_E7_Parse(absl::string_view name, Message8_M2_M6_M12_M24_E7* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_M24_E7>(
      Message8_M2_M6_M12_M24_E7_descriptor(), name, value);
}
enum Message8_M2_M6_M12_E3 : int {
  Message8_M2_M6_M12_E3_E3_UNSPECIFIED = 0,
  Message8_M2_M6_M12_E3_E3_CONST_1 = 79,
  Message8_M2_M6_M12_E3_E3_CONST_2 = 121,
  Message8_M2_M6_M12_E3_E3_CONST_3 = 15,
  Message8_M2_M6_M12_E3_E3_CONST_4 = 24,
  Message8_M2_M6_M12_E3_E3_CONST_5 = 57,
};

bool Message8_M2_M6_M12_E3_IsValid(int value);
extern const uint32_t Message8_M2_M6_M12_E3_internal_data_[];
constexpr Message8_M2_M6_M12_E3 Message8_M2_M6_M12_E3_E3_MIN = static_cast<Message8_M2_M6_M12_E3>(0);
constexpr Message8_M2_M6_M12_E3 Message8_M2_M6_M12_E3_E3_MAX = static_cast<Message8_M2_M6_M12_E3>(121);
constexpr int Message8_M2_M6_M12_E3_E3_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M6_M12_E3_descriptor();
template <typename T>
const std::string& Message8_M2_M6_M12_E3_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M6_M12_E3>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E3_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M6_M12_E3_descriptor(), value);
}
inline bool Message8_M2_M6_M12_E3_Parse(absl::string_view name, Message8_M2_M6_M12_E3* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M6_M12_E3>(
      Message8_M2_M6_M12_E3_descriptor(), name, value);
}
enum Message8_M2_M10_E1 : int {
  Message8_M2_M10_E1_E1_UNSPECIFIED = 0,
  Message8_M2_M10_E1_E1_CONST_1 = 97,
  Message8_M2_M10_E1_E1_CONST_2 = 47,
  Message8_M2_M10_E1_E1_CONST_3 = 59,
  Message8_M2_M10_E1_E1_CONST_4 = 107,
  Message8_M2_M10_E1_E1_CONST_5 = 32,
};

bool Message8_M2_M10_E1_IsValid(int value);
extern const uint32_t Message8_M2_M10_E1_internal_data_[];
constexpr Message8_M2_M10_E1 Message8_M2_M10_E1_E1_MIN = static_cast<Message8_M2_M10_E1>(0);
constexpr Message8_M2_M10_E1 Message8_M2_M10_E1_E1_MAX = static_cast<Message8_M2_M10_E1>(107);
constexpr int Message8_M2_M10_E1_E1_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M10_E1_descriptor();
template <typename T>
const std::string& Message8_M2_M10_E1_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M10_E1>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E1_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M10_E1_descriptor(), value);
}
inline bool Message8_M2_M10_E1_Parse(absl::string_view name, Message8_M2_M10_E1* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M10_E1>(
      Message8_M2_M10_E1_descriptor(), name, value);
}
enum Message8_M2_M10_E2 : int {
  Message8_M2_M10_E2_E2_UNSPECIFIED = 0,
  Message8_M2_M10_E2_E2_CONST_1 = 34,
  Message8_M2_M10_E2_E2_CONST_2 = 33,
  Message8_M2_M10_E2_E2_CONST_3 = 2,
  Message8_M2_M10_E2_E2_CONST_4 = 62,
  Message8_M2_M10_E2_E2_CONST_5 = 28,
};

bool Message8_M2_M10_E2_IsValid(int value);
extern const uint32_t Message8_M2_M10_E2_internal_data_[];
constexpr Message8_M2_M10_E2 Message8_M2_M10_E2_E2_MIN = static_cast<Message8_M2_M10_E2>(0);
constexpr Message8_M2_M10_E2 Message8_M2_M10_E2_E2_MAX = static_cast<Message8_M2_M10_E2>(62);
constexpr int Message8_M2_M10_E2_E2_ARRAYSIZE = 62 + 1;
const ::google::protobuf::EnumDescriptor*
Message8_M2_M10_E2_descriptor();
template <typename T>
const std::string& Message8_M2_M10_E2_Name(T value) {
  static_assert(std::is_same<T, Message8_M2_M10_E2>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E2_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message8_M2_M10_E2_descriptor(), value);
}
inline bool Message8_M2_M10_E2_Parse(absl::string_view name, Message8_M2_M10_E2* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message8_M2_M10_E2>(
      Message8_M2_M10_E2_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Message8_M2_M8 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M8) */ {
 public:
  inline Message8_M2_M8() : Message8_M2_M8(nullptr) {}
  ~Message8_M2_M8() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M8(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M8(const Message8_M2_M8& from) : Message8_M2_M8(nullptr, from) {}
  inline Message8_M2_M8(Message8_M2_M8&& from) noexcept
      : Message8_M2_M8(nullptr, std::move(from)) {}
  inline Message8_M2_M8& operator=(const Message8_M2_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M8& operator=(Message8_M2_M8&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M8& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M8* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M8*>(
        &_Message8_M2_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 94;
  friend void swap(Message8_M2_M8& a, Message8_M2_M8& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M8* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M8* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M8* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M8>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M8& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M8& from) { Message8_M2_M8::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M8* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M8"; }

 protected:
  explicit Message8_M2_M8(::google::protobuf::Arena* arena);
  Message8_M2_M8(::google::protobuf::Arena* arena, const Message8_M2_M8& from);
  Message8_M2_M8(::google::protobuf::Arena* arena, Message8_M2_M8&& from) noexcept
      : Message8_M2_M8(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF2FieldNumber = 5,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional uint64 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  ::uint64_t f_2() const;
  void set_f_2(::uint64_t value);

  private:
  ::uint64_t _internal_f_2() const;
  void _internal_set_f_2(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M8)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M8_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::int64_t f_1_;
    ::uint64_t f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M7 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M7) */ {
 public:
  inline Message8_M2_M7() : Message8_M2_M7(nullptr) {}
  ~Message8_M2_M7() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M7(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M7(const Message8_M2_M7& from) : Message8_M2_M7(nullptr, from) {}
  inline Message8_M2_M7(Message8_M2_M7&& from) noexcept
      : Message8_M2_M7(nullptr, std::move(from)) {}
  inline Message8_M2_M7& operator=(const Message8_M2_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M7& operator=(Message8_M2_M7&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M7& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M7* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M7*>(
        &_Message8_M2_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 93;
  friend void swap(Message8_M2_M7& a, Message8_M2_M7& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M7* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M7* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M7* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M7>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M7& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M7& from) { Message8_M2_M7::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M7* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M7"; }

 protected:
  explicit Message8_M2_M7(::google::protobuf::Arena* arena);
  Message8_M2_M7(::google::protobuf::Arena* arena, const Message8_M2_M7& from);
  Message8_M2_M7(::google::protobuf::Arena* arena, Message8_M2_M7&& from) noexcept
      : Message8_M2_M7(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M7)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M7_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M43_M51 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51) */ {
 public:
  inline Message8_M2_M6_M12_M24_M43_M51() : Message8_M2_M6_M12_M24_M43_M51(nullptr) {}
  ~Message8_M2_M6_M12_M24_M43_M51() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M43_M51(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M43_M51(const Message8_M2_M6_M12_M24_M43_M51& from) : Message8_M2_M6_M12_M24_M43_M51(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M43_M51(Message8_M2_M6_M12_M24_M43_M51&& from) noexcept
      : Message8_M2_M6_M12_M24_M43_M51(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M43_M51& operator=(const Message8_M2_M6_M12_M24_M43_M51& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M43_M51& operator=(Message8_M2_M6_M12_M24_M43_M51&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M43_M51& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M43_M51* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M43_M51*>(
        &_Message8_M2_M6_M12_M24_M43_M51_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 88;
  friend void swap(Message8_M2_M6_M12_M24_M43_M51& a, Message8_M2_M6_M12_M24_M43_M51& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M43_M51* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M43_M51* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M43_M51* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M43_M51>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M43_M51& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M43_M51& from) { Message8_M2_M6_M12_M24_M43_M51::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M43_M51* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M43_M51(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M43_M51(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M43_M51& from);
  Message8_M2_M6_M12_M24_M43_M51(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M43_M51&& from) noexcept
      : Message8_M2_M6_M12_M24_M43_M51(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M43_M51_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M43_M49_M68 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68) */ {
 public:
  inline Message8_M2_M6_M12_M24_M43_M49_M68() : Message8_M2_M6_M12_M24_M43_M49_M68(nullptr) {}
  ~Message8_M2_M6_M12_M24_M43_M49_M68() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M43_M49_M68(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M43_M49_M68(const Message8_M2_M6_M12_M24_M43_M49_M68& from) : Message8_M2_M6_M12_M24_M43_M49_M68(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M43_M49_M68(Message8_M2_M6_M12_M24_M43_M49_M68&& from) noexcept
      : Message8_M2_M6_M12_M24_M43_M49_M68(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M43_M49_M68& operator=(const Message8_M2_M6_M12_M24_M43_M49_M68& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M43_M49_M68& operator=(Message8_M2_M6_M12_M24_M43_M49_M68&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M43_M49_M68& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M43_M49_M68* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M43_M49_M68*>(
        &_Message8_M2_M6_M12_M24_M43_M49_M68_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 86;
  friend void swap(Message8_M2_M6_M12_M24_M43_M49_M68& a, Message8_M2_M6_M12_M24_M43_M49_M68& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M43_M49_M68* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M43_M49_M68* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M43_M49_M68* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M43_M49_M68>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M43_M49_M68& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M43_M49_M68& from) { Message8_M2_M6_M12_M24_M43_M49_M68::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M43_M49_M68* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M43_M49_M68(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M43_M49_M68(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M43_M49_M68& from);
  Message8_M2_M6_M12_M24_M43_M49_M68(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M43_M49_M68&& from) noexcept
      : Message8_M2_M6_M12_M24_M43_M49_M68(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M43_M49_M68_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M63 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M63() : Message8_M2_M6_M12_M24_M35_M63(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M63() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M63(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M63(const Message8_M2_M6_M12_M24_M35_M63& from) : Message8_M2_M6_M12_M24_M35_M63(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M63(Message8_M2_M6_M12_M24_M35_M63&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M63(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M63& operator=(const Message8_M2_M6_M12_M24_M35_M63& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M63& operator=(Message8_M2_M6_M12_M24_M35_M63&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M63& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M63* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M63*>(
        &_Message8_M2_M6_M12_M24_M35_M63_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 84;
  friend void swap(Message8_M2_M6_M12_M24_M35_M63& a, Message8_M2_M6_M12_M24_M35_M63& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M63* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M63* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M63* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M63>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M63& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M63& from) { Message8_M2_M6_M12_M24_M35_M63::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M63* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M63(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M63(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M63& from);
  Message8_M2_M6_M12_M24_M35_M63(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M63&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M63(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E19 = Message8_M2_M6_M12_M24_M35_M63_E19;
  static constexpr E19 E19_UNSPECIFIED = Message8_M2_M6_M12_M24_M35_M63_E19_E19_UNSPECIFIED;
  static constexpr E19 E19_CONST_1 = Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_1;
  static constexpr E19 E19_CONST_2 = Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_2;
  static constexpr E19 E19_CONST_3 = Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_3;
  static constexpr E19 E19_CONST_4 = Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_4;
  static constexpr E19 E19_CONST_5 = Message8_M2_M6_M12_M24_M35_M63_E19_E19_CONST_5;
  static inline bool E19_IsValid(int value) {
    return Message8_M2_M6_M12_M24_M35_M63_E19_IsValid(value);
  }
  static constexpr E19 E19_MIN = Message8_M2_M6_M12_M24_M35_M63_E19_E19_MIN;
  static constexpr E19 E19_MAX = Message8_M2_M6_M12_M24_M35_M63_E19_E19_MAX;
  static constexpr int E19_ARRAYSIZE = Message8_M2_M6_M12_M24_M35_M63_E19_E19_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E19_descriptor() {
    return Message8_M2_M6_M12_M24_M35_M63_E19_descriptor();
  }
  template <typename T>
  static inline const std::string& E19_Name(T value) {
    return Message8_M2_M6_M12_M24_M35_M63_E19_Name(value);
  }
  static inline bool E19_Parse(absl::string_view name, E19* value) {
    return Message8_M2_M6_M12_M24_M35_M63_E19_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_13_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_13())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())), f_6().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())), f_11().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_13_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_13()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      sizes_list.push_back(f_6().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      sizes_list.push_back(f_11().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_13_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_13_);
      sizes.push_back(end_addr - start_addr + sizeof(f_13()));
      sizes.push_back(f_2().size());
      sizes.push_back(f_3().size());
      sizes.push_back(f_6().size());
      sizes.push_back(f_7().size());
      sizes.push_back(f_11().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_13_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF6FieldNumber = 8,
    kF7FieldNumber = 9,
    kF11FieldNumber = 15,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
    kF4FieldNumber = 6,
    kF5FieldNumber = 7,
    kF9FieldNumber = 13,
    kF8FieldNumber = 11,
    kF10FieldNumber = 14,
    kF12FieldNumber = 16,
    kF13FieldNumber = 18,
  };
  // optional string f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional string f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  const std::string& f_6() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_6(Arg_&& arg, Args_... args);
  std::string* mutable_f_6();
  PROTOBUF_NODISCARD std::string* release_f_6();
  void set_allocated_f_6(std::string* value);

  private:
  const std::string& _internal_f_6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_6(
      const std::string& value);
  std::string* _internal_mutable_f_6();

  public:
  // optional string f_7 = 9;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional string f_11 = 15;
  bool has_f_11() const;
  void clear_f_11() ;
  const std::string& f_11() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_11(Arg_&& arg, Args_... args);
  std::string* mutable_f_11();
  PROTOBUF_NODISCARD std::string* release_f_11();
  void set_allocated_f_11(std::string* value);

  private:
  const std::string& _internal_f_11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_11(
      const std::string& value);
  std::string* _internal_mutable_f_11();

  public:
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional int32 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int32_t f_4() const;
  void set_f_4(::int32_t value);

  private:
  ::int32_t _internal_f_4() const;
  void _internal_set_f_4(::int32_t value);

  public:
  // optional fixed32 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  ::uint32_t f_5() const;
  void set_f_5(::uint32_t value);

  private:
  ::uint32_t _internal_f_5() const;
  void _internal_set_f_5(::uint32_t value);

  public:
  // optional float f_9 = 13;
  bool has_f_9() const;
  void clear_f_9() ;
  float f_9() const;
  void set_f_9(float value);

  private:
  float _internal_f_9() const;
  void _internal_set_f_9(float value);

  public:
  // optional double f_8 = 11;
  bool has_f_8() const;
  void clear_f_8() ;
  double f_8() const;
  void set_f_8(double value);

  private:
  double _internal_f_8() const;
  void _internal_set_f_8(double value);

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.E19 f_10 = 14;
  bool has_f_10() const;
  void clear_f_10() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 f_10() const;
  void set_f_10(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 _internal_f_10() const;
  void _internal_set_f_10(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 value);

  public:
  // optional int32 f_12 = 16;
  bool has_f_12() const;
  void clear_f_12() ;
  ::int32_t f_12() const;
  void set_f_12(::int32_t value);

  private:
  ::int32_t _internal_f_12() const;
  void _internal_set_f_12(::int32_t value);

  public:
  // optional bool f_13 = 18;
  bool has_f_13() const;
  void clear_f_13() ;
  bool f_13() const;
  void set_f_13(bool value);

  private:
  bool _internal_f_13() const;
  void _internal_set_f_13(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 1,
      80, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M63_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_6_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_11_;
    ::int64_t f_1_;
    ::int32_t f_0_;
    ::int32_t f_4_;
    ::uint32_t f_5_;
    float f_9_;
    double f_8_;
    int f_10_;
    ::int32_t f_12_;
    bool f_13_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M62_M66 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M62_M66() : Message8_M2_M6_M12_M24_M35_M62_M66(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M62_M66() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M62_M66(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M62_M66(const Message8_M2_M6_M12_M24_M35_M62_M66& from) : Message8_M2_M6_M12_M24_M35_M62_M66(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M62_M66(Message8_M2_M6_M12_M24_M35_M62_M66&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M62_M66(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M62_M66& operator=(const Message8_M2_M6_M12_M24_M35_M62_M66& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M62_M66& operator=(Message8_M2_M6_M12_M24_M35_M62_M66&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M62_M66& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M62_M66* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M62_M66*>(
        &_Message8_M2_M6_M12_M24_M35_M62_M66_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 82;
  friend void swap(Message8_M2_M6_M12_M24_M35_M62_M66& a, Message8_M2_M6_M12_M24_M35_M62_M66& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M62_M66* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M62_M66* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M62_M66* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M62_M66>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M62_M66& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M62_M66& from) { Message8_M2_M6_M12_M24_M35_M62_M66::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M62_M66* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M62_M66(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M62_M66(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M62_M66& from);
  Message8_M2_M6_M12_M24_M35_M62_M66(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M62_M66&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M62_M66(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      sizes.push_back(f_1().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 5,
    kF0FieldNumber = 3,
    kF2FieldNumber = 6,
  };
  // optional string f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional bool f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M62_M66_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::int32_t f_0_;
    bool f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M62_M65 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M62_M65() : Message8_M2_M6_M12_M24_M35_M62_M65(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M62_M65() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M62_M65(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M62_M65(const Message8_M2_M6_M12_M24_M35_M62_M65& from) : Message8_M2_M6_M12_M24_M35_M62_M65(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M62_M65(Message8_M2_M6_M12_M24_M35_M62_M65&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M62_M65(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M62_M65& operator=(const Message8_M2_M6_M12_M24_M35_M62_M65& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M62_M65& operator=(Message8_M2_M6_M12_M24_M35_M62_M65&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M62_M65& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M62_M65* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M62_M65*>(
        &_Message8_M2_M6_M12_M24_M35_M62_M65_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 81;
  friend void swap(Message8_M2_M6_M12_M24_M35_M62_M65& a, Message8_M2_M6_M12_M24_M35_M62_M65& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M62_M65* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M62_M65* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M62_M65* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M62_M65>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M62_M65& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M62_M65& from) { Message8_M2_M6_M12_M24_M35_M62_M65::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M62_M65* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M62_M65(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M62_M65(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M62_M65& from);
  Message8_M2_M6_M12_M24_M35_M62_M65(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M62_M65&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M62_M65(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional int32 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M62_M65_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::int64_t f_1_;
    ::int32_t f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M54 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M54() : Message8_M2_M6_M12_M24_M35_M54(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M54() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M54(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M54(const Message8_M2_M6_M12_M24_M35_M54& from) : Message8_M2_M6_M12_M24_M35_M54(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M54(Message8_M2_M6_M12_M24_M35_M54&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M54(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M54& operator=(const Message8_M2_M6_M12_M24_M35_M54& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M54& operator=(Message8_M2_M6_M12_M24_M35_M54&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M54& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M54* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M54*>(
        &_Message8_M2_M6_M12_M24_M35_M54_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 80;
  friend void swap(Message8_M2_M6_M12_M24_M35_M54& a, Message8_M2_M6_M12_M24_M35_M54& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M54* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M54* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M54* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M54>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M54& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M54& from) { Message8_M2_M6_M12_M24_M35_M54::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M54* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M54(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M54(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M54& from);
  Message8_M2_M6_M12_M24_M35_M54(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M54&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M54(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E14 = Message8_M2_M6_M12_M24_M35_M54_E14;
  static constexpr E14 E14_UNSPECIFIED = Message8_M2_M6_M12_M24_M35_M54_E14_E14_UNSPECIFIED;
  static constexpr E14 E14_CONST_1 = Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_1;
  static constexpr E14 E14_CONST_2 = Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_2;
  static constexpr E14 E14_CONST_3 = Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_3;
  static constexpr E14 E14_CONST_4 = Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_4;
  static constexpr E14 E14_CONST_5 = Message8_M2_M6_M12_M24_M35_M54_E14_E14_CONST_5;
  static inline bool E14_IsValid(int value) {
    return Message8_M2_M6_M12_M24_M35_M54_E14_IsValid(value);
  }
  static constexpr E14 E14_MIN = Message8_M2_M6_M12_M24_M35_M54_E14_E14_MIN;
  static constexpr E14 E14_MAX = Message8_M2_M6_M12_M24_M35_M54_E14_E14_MAX;
  static constexpr int E14_ARRAYSIZE = Message8_M2_M6_M12_M24_M35_M54_E14_E14_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E14_descriptor() {
    return Message8_M2_M6_M12_M24_M35_M54_E14_descriptor();
  }
  template <typename T>
  static inline const std::string& E14_Name(T value) {
    return Message8_M2_M6_M12_M24_M35_M54_E14_Name(value);
  }
  static inline bool E14_Parse(absl::string_view name, E14* value) {
    return Message8_M2_M6_M12_M24_M35_M54_E14_Parse(name, value);
  }
  using E15 = Message8_M2_M6_M12_M24_M35_M54_E15;
  static constexpr E15 E15_UNSPECIFIED = Message8_M2_M6_M12_M24_M35_M54_E15_E15_UNSPECIFIED;
  static constexpr E15 E15_CONST_1 = Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_1;
  static constexpr E15 E15_CONST_2 = Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_2;
  static constexpr E15 E15_CONST_3 = Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_3;
  static constexpr E15 E15_CONST_4 = Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_4;
  static constexpr E15 E15_CONST_5 = Message8_M2_M6_M12_M24_M35_M54_E15_E15_CONST_5;
  static inline bool E15_IsValid(int value) {
    return Message8_M2_M6_M12_M24_M35_M54_E15_IsValid(value);
  }
  static constexpr E15 E15_MIN = Message8_M2_M6_M12_M24_M35_M54_E15_E15_MIN;
  static constexpr E15 E15_MAX = Message8_M2_M6_M12_M24_M35_M54_E15_E15_MAX;
  static constexpr int E15_ARRAYSIZE = Message8_M2_M6_M12_M24_M35_M54_E15_E15_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E15_descriptor() {
    return Message8_M2_M6_M12_M24_M35_M54_E15_descriptor();
  }
  template <typename T>
  static inline const std::string& E15_Name(T value) {
    return Message8_M2_M6_M12_M24_M35_M54_E15_Name(value);
  }
  static inline bool E15_Parse(absl::string_view name, E15* value) {
    return Message8_M2_M6_M12_M24_M35_M54_E15_Parse(name, value);
  }
  using E16 = Message8_M2_M6_M12_M24_M35_M54_E16;
  static constexpr E16 E16_UNSPECIFIED = Message8_M2_M6_M12_M24_M35_M54_E16_E16_UNSPECIFIED;
  static constexpr E16 E16_CONST_1 = Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_1;
  static constexpr E16 E16_CONST_2 = Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_2;
  static constexpr E16 E16_CONST_3 = Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_3;
  static constexpr E16 E16_CONST_4 = Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_4;
  static constexpr E16 E16_CONST_5 = Message8_M2_M6_M12_M24_M35_M54_E16_E16_CONST_5;
  static inline bool E16_IsValid(int value) {
    return Message8_M2_M6_M12_M24_M35_M54_E16_IsValid(value);
  }
  static constexpr E16 E16_MIN = Message8_M2_M6_M12_M24_M35_M54_E16_E16_MIN;
  static constexpr E16 E16_MAX = Message8_M2_M6_M12_M24_M35_M54_E16_E16_MAX;
  static constexpr int E16_ARRAYSIZE = Message8_M2_M6_M12_M24_M35_M54_E16_E16_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E16_descriptor() {
    return Message8_M2_M6_M12_M24_M35_M54_E16_descriptor();
  }
  template <typename T>
  static inline const std::string& E16_Name(T value) {
    return Message8_M2_M6_M12_M24_M35_M54_E16_Name(value);
  }
  static inline bool E16_Parse(absl::string_view name, E16* value) {
    return Message8_M2_M6_M12_M24_M35_M54_E16_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_8())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_8()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      sizes.push_back(end_addr - start_addr + sizeof(f_8()));
      sizes.push_back(f_2().size());
      sizes.push_back(f_3().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF4FieldNumber = 6,
    kF5FieldNumber = 8,
    kF6FieldNumber = 9,
    kF7FieldNumber = 12,
    kF8FieldNumber = 13,
  };
  // optional string f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // optional bool f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.E14 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 f_4() const;
  void set_f_4(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 value);

  public:
  // optional int64 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional int32 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int32_t f_6() const;
  void set_f_6(::int32_t value);

  private:
  ::int32_t _internal_f_6() const;
  void _internal_set_f_6(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.E15 f_7 = 12;
  bool has_f_7() const;
  void clear_f_7() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 f_7() const;
  void set_f_7(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 _internal_f_7() const;
  void _internal_set_f_7(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 value);

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.E16 f_8 = 13;
  bool has_f_8() const;
  void clear_f_8() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 f_8() const;
  void set_f_8(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 _internal_f_8() const;
  void _internal_set_f_8(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      70, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M54_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    bool f_0_;
    bool f_1_;
    int f_4_;
    ::int64_t f_5_;
    ::int32_t f_6_;
    int f_7_;
    int f_8_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M52_M67 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M67) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M52_M67() : Message8_M2_M6_M12_M24_M35_M52_M67(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M52_M67() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M52_M67(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M52_M67(const Message8_M2_M6_M12_M24_M35_M52_M67& from) : Message8_M2_M6_M12_M24_M35_M52_M67(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M52_M67(Message8_M2_M6_M12_M24_M35_M52_M67&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52_M67(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M52_M67& operator=(const Message8_M2_M6_M12_M24_M35_M52_M67& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M52_M67& operator=(Message8_M2_M6_M12_M24_M35_M52_M67&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M52_M67& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M52_M67* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M52_M67*>(
        &_Message8_M2_M6_M12_M24_M35_M52_M67_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 78;
  friend void swap(Message8_M2_M6_M12_M24_M35_M52_M67& a, Message8_M2_M6_M12_M24_M35_M52_M67& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M52_M67* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M52_M67* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M52_M67* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M52_M67>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M52_M67& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M52_M67& from) { Message8_M2_M6_M12_M24_M35_M52_M67::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M52_M67* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M67"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M52_M67(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M52_M67(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M52_M67& from);
  Message8_M2_M6_M12_M24_M35_M52_M67(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M52_M67&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52_M67(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // optional int32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M67)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M52_M67_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M52_M64_M78 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M52_M64_M78() : Message8_M2_M6_M12_M24_M35_M52_M64_M78(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M52_M64_M78() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M52_M64_M78(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M52_M64_M78(const Message8_M2_M6_M12_M24_M35_M52_M64_M78& from) : Message8_M2_M6_M12_M24_M35_M52_M64_M78(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M52_M64_M78(Message8_M2_M6_M12_M24_M35_M52_M64_M78&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52_M64_M78(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M52_M64_M78& operator=(const Message8_M2_M6_M12_M24_M35_M52_M64_M78& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M52_M64_M78& operator=(Message8_M2_M6_M12_M24_M35_M52_M64_M78&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M52_M64_M78& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M52_M64_M78* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M52_M64_M78*>(
        &_Message8_M2_M6_M12_M24_M35_M52_M64_M78_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 76;
  friend void swap(Message8_M2_M6_M12_M24_M35_M52_M64_M78& a, Message8_M2_M6_M12_M24_M35_M52_M64_M78& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M52_M64_M78* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M52_M64_M78* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M52_M64_M78* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M52_M64_M78>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M52_M64_M78& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M52_M64_M78& from) { Message8_M2_M6_M12_M24_M35_M52_M64_M78::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M52_M64_M78* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M52_M64_M78(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M52_M64_M78(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M52_M64_M78& from);
  Message8_M2_M6_M12_M24_M35_M52_M64_M78(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M52_M64_M78&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52_M64_M78(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())), f_0().size() * sizeof(float)));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(float));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(float));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(float), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // repeated float f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  float f_0(int index) const;
  void set_f_0(int index, float value);
  void add_f_0(float value);
  const ::google::protobuf::RepeatedField<float>& f_0() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M52_M64_M78_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<float> f_0_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M22_M41_M59_M70 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.M70) */ {
 public:
  inline Message8_M2_M6_M12_M22_M41_M59_M70() : Message8_M2_M6_M12_M22_M41_M59_M70(nullptr) {}
  ~Message8_M2_M6_M12_M22_M41_M59_M70() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M22_M41_M59_M70(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M22_M41_M59_M70(const Message8_M2_M6_M12_M22_M41_M59_M70& from) : Message8_M2_M6_M12_M22_M41_M59_M70(nullptr, from) {}
  inline Message8_M2_M6_M12_M22_M41_M59_M70(Message8_M2_M6_M12_M22_M41_M59_M70&& from) noexcept
      : Message8_M2_M6_M12_M22_M41_M59_M70(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M22_M41_M59_M70& operator=(const Message8_M2_M6_M12_M22_M41_M59_M70& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M22_M41_M59_M70& operator=(Message8_M2_M6_M12_M22_M41_M59_M70&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M22_M41_M59_M70& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M22_M41_M59_M70* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M22_M41_M59_M70*>(
        &_Message8_M2_M6_M12_M22_M41_M59_M70_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 72;
  friend void swap(Message8_M2_M6_M12_M22_M41_M59_M70& a, Message8_M2_M6_M12_M22_M41_M59_M70& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M22_M41_M59_M70* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M22_M41_M59_M70* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M22_M41_M59_M70* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M22_M41_M59_M70>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M22_M41_M59_M70& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M22_M41_M59_M70& from) { Message8_M2_M6_M12_M22_M41_M59_M70::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M22_M41_M59_M70* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.M70"; }

 protected:
  explicit Message8_M2_M6_M12_M22_M41_M59_M70(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M22_M41_M59_M70(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M22_M41_M59_M70& from);
  Message8_M2_M6_M12_M22_M41_M59_M70(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M22_M41_M59_M70&& from) noexcept
      : Message8_M2_M6_M12_M22_M41_M59_M70(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // optional bool f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.M70)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M22_M41_M59_M70_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M21_M34_M55_M71 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.M71) */ {
 public:
  inline Message8_M2_M6_M12_M21_M34_M55_M71() : Message8_M2_M6_M12_M21_M34_M55_M71(nullptr) {}
  ~Message8_M2_M6_M12_M21_M34_M55_M71() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M21_M34_M55_M71(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M21_M34_M55_M71(const Message8_M2_M6_M12_M21_M34_M55_M71& from) : Message8_M2_M6_M12_M21_M34_M55_M71(nullptr, from) {}
  inline Message8_M2_M6_M12_M21_M34_M55_M71(Message8_M2_M6_M12_M21_M34_M55_M71&& from) noexcept
      : Message8_M2_M6_M12_M21_M34_M55_M71(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M21_M34_M55_M71& operator=(const Message8_M2_M6_M12_M21_M34_M55_M71& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M21_M34_M55_M71& operator=(Message8_M2_M6_M12_M21_M34_M55_M71&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M21_M34_M55_M71& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M21_M34_M55_M71* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M21_M34_M55_M71*>(
        &_Message8_M2_M6_M12_M21_M34_M55_M71_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 68;
  friend void swap(Message8_M2_M6_M12_M21_M34_M55_M71& a, Message8_M2_M6_M12_M21_M34_M55_M71& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M21_M34_M55_M71* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M21_M34_M55_M71* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M21_M34_M55_M71* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M21_M34_M55_M71>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M21_M34_M55_M71& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M21_M34_M55_M71& from) { Message8_M2_M6_M12_M21_M34_M55_M71::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M21_M34_M55_M71* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.M71"; }

 protected:
  explicit Message8_M2_M6_M12_M21_M34_M55_M71(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M21_M34_M55_M71(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M21_M34_M55_M71& from);
  Message8_M2_M6_M12_M21_M34_M55_M71(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M21_M34_M55_M71&& from) noexcept
      : Message8_M2_M6_M12_M21_M34_M55_M71(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.M71)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M21_M34_M55_M71_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M26_M47 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M26.M47) */ {
 public:
  inline Message8_M2_M5_M13_M26_M47() : Message8_M2_M5_M13_M26_M47(nullptr) {}
  ~Message8_M2_M5_M13_M26_M47() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M26_M47(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M26_M47(const Message8_M2_M5_M13_M26_M47& from) : Message8_M2_M5_M13_M26_M47(nullptr, from) {}
  inline Message8_M2_M5_M13_M26_M47(Message8_M2_M5_M13_M26_M47&& from) noexcept
      : Message8_M2_M5_M13_M26_M47(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M26_M47& operator=(const Message8_M2_M5_M13_M26_M47& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M26_M47& operator=(Message8_M2_M5_M13_M26_M47&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M26_M47& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M26_M47* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M26_M47*>(
        &_Message8_M2_M5_M13_M26_M47_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 64;
  friend void swap(Message8_M2_M5_M13_M26_M47& a, Message8_M2_M5_M13_M26_M47& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M26_M47* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M26_M47* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M26_M47* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M26_M47>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M26_M47& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M26_M47& from) { Message8_M2_M5_M13_M26_M47::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M26_M47* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M26.M47"; }

 protected:
  explicit Message8_M2_M5_M13_M26_M47(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M26_M47(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M26_M47& from);
  Message8_M2_M5_M13_M26_M47(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M26_M47&& from) noexcept
      : Message8_M2_M5_M13_M26_M47(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E12 = Message8_M2_M5_M13_M26_M47_E12;
  static constexpr E12 E12_UNSPECIFIED = Message8_M2_M5_M13_M26_M47_E12_E12_UNSPECIFIED;
  static constexpr E12 E12_CONST_1 = Message8_M2_M5_M13_M26_M47_E12_E12_CONST_1;
  static constexpr E12 E12_CONST_2 = Message8_M2_M5_M13_M26_M47_E12_E12_CONST_2;
  static constexpr E12 E12_CONST_3 = Message8_M2_M5_M13_M26_M47_E12_E12_CONST_3;
  static constexpr E12 E12_CONST_4 = Message8_M2_M5_M13_M26_M47_E12_E12_CONST_4;
  static constexpr E12 E12_CONST_5 = Message8_M2_M5_M13_M26_M47_E12_E12_CONST_5;
  static inline bool E12_IsValid(int value) {
    return Message8_M2_M5_M13_M26_M47_E12_IsValid(value);
  }
  static constexpr E12 E12_MIN = Message8_M2_M5_M13_M26_M47_E12_E12_MIN;
  static constexpr E12 E12_MAX = Message8_M2_M5_M13_M26_M47_E12_E12_MAX;
  static constexpr int E12_ARRAYSIZE = Message8_M2_M5_M13_M26_M47_E12_E12_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E12_descriptor() {
    return Message8_M2_M5_M13_M26_M47_E12_descriptor();
  }
  template <typename T>
  static inline const std::string& E12_Name(T value) {
    return Message8_M2_M5_M13_M26_M47_E12_Name(value);
  }
  static inline bool E12_Parse(absl::string_view name, E12* value) {
    return Message8_M2_M5_M13_M26_M47_E12_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF2FieldNumber = 5,
    kF3FieldNumber = 7,
    kF4FieldNumber = 9,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // optional float f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional fixed32 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  ::uint32_t f_2() const;
  void set_f_2(::uint32_t value);

  private:
  ::uint32_t _internal_f_2() const;
  void _internal_set_f_2(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message8.M2.M5.M13.M26.M47.E12 f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 f_3() const;
  void set_f_3(::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 value);

  private:
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 _internal_f_3() const;
  void _internal_set_f_3(::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 value);

  public:
  // optional int32 f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int32_t f_4() const;
  void set_f_4(::int32_t value);

  private:
  ::int32_t _internal_f_4() const;
  void _internal_set_f_4(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M26.M47)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M26_M47_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    float f_1_;
    ::uint32_t f_2_;
    int f_3_;
    ::int32_t f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M26_M36 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M26.M36) */ {
 public:
  inline Message8_M2_M5_M13_M26_M36() : Message8_M2_M5_M13_M26_M36(nullptr) {}
  ~Message8_M2_M5_M13_M26_M36() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M26_M36(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M26_M36(const Message8_M2_M5_M13_M26_M36& from) : Message8_M2_M5_M13_M26_M36(nullptr, from) {}
  inline Message8_M2_M5_M13_M26_M36(Message8_M2_M5_M13_M26_M36&& from) noexcept
      : Message8_M2_M5_M13_M26_M36(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M26_M36& operator=(const Message8_M2_M5_M13_M26_M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M26_M36& operator=(Message8_M2_M5_M13_M26_M36&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M26_M36& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M26_M36* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M26_M36*>(
        &_Message8_M2_M5_M13_M26_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 63;
  friend void swap(Message8_M2_M5_M13_M26_M36& a, Message8_M2_M5_M13_M26_M36& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M26_M36* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M26_M36* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M26_M36* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M26_M36>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M26_M36& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M26_M36& from) { Message8_M2_M5_M13_M26_M36::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M26_M36* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M26.M36"; }

 protected:
  explicit Message8_M2_M5_M13_M26_M36(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M26_M36(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M26_M36& from);
  Message8_M2_M5_M13_M26_M36(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M26_M36&& from) noexcept
      : Message8_M2_M5_M13_M26_M36(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M26.M36)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M26_M36_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M17_M29_M61 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61) */ {
 public:
  inline Message8_M2_M5_M13_M17_M29_M61() : Message8_M2_M5_M13_M17_M29_M61(nullptr) {}
  ~Message8_M2_M5_M13_M17_M29_M61() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M17_M29_M61(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M17_M29_M61(const Message8_M2_M5_M13_M17_M29_M61& from) : Message8_M2_M5_M13_M17_M29_M61(nullptr, from) {}
  inline Message8_M2_M5_M13_M17_M29_M61(Message8_M2_M5_M13_M17_M29_M61&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M61(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M17_M29_M61& operator=(const Message8_M2_M5_M13_M17_M29_M61& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M17_M29_M61& operator=(Message8_M2_M5_M13_M17_M29_M61&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M17_M29_M61& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M17_M29_M61* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M17_M29_M61*>(
        &_Message8_M2_M5_M13_M17_M29_M61_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 60;
  friend void swap(Message8_M2_M5_M13_M17_M29_M61& a, Message8_M2_M5_M13_M17_M29_M61& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M17_M29_M61* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M17_M29_M61* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M17_M29_M61* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M17_M29_M61>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M17_M29_M61& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M17_M29_M61& from) { Message8_M2_M5_M13_M17_M29_M61::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M17_M29_M61* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61"; }

 protected:
  explicit Message8_M2_M5_M13_M17_M29_M61(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M17_M29_M61(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M17_M29_M61& from);
  Message8_M2_M5_M13_M17_M29_M61(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M17_M29_M61&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M61(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E17 = Message8_M2_M5_M13_M17_M29_M61_E17;
  static constexpr E17 E17_UNSPECIFIED = Message8_M2_M5_M13_M17_M29_M61_E17_E17_UNSPECIFIED;
  static constexpr E17 E17_CONST_1 = Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_1;
  static constexpr E17 E17_CONST_2 = Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_2;
  static constexpr E17 E17_CONST_3 = Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_3;
  static constexpr E17 E17_CONST_4 = Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_4;
  static constexpr E17 E17_CONST_5 = Message8_M2_M5_M13_M17_M29_M61_E17_E17_CONST_5;
  static inline bool E17_IsValid(int value) {
    return Message8_M2_M5_M13_M17_M29_M61_E17_IsValid(value);
  }
  static constexpr E17 E17_MIN = Message8_M2_M5_M13_M17_M29_M61_E17_E17_MIN;
  static constexpr E17 E17_MAX = Message8_M2_M5_M13_M17_M29_M61_E17_E17_MAX;
  static constexpr int E17_ARRAYSIZE = Message8_M2_M5_M13_M17_M29_M61_E17_E17_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E17_descriptor() {
    return Message8_M2_M5_M13_M17_M29_M61_E17_descriptor();
  }
  template <typename T>
  static inline const std::string& E17_Name(T value) {
    return Message8_M2_M5_M13_M17_M29_M61_E17_Name(value);
  }
  static inline bool E17_Parse(absl::string_view name, E17* value) {
    return Message8_M2_M5_M13_M17_M29_M61_E17_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61.E17 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 value);

  private:
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M17_M29_M61_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M17_M29_M50_M72_M77 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.M77) */ {
 public:
  inline Message8_M2_M5_M13_M17_M29_M50_M72_M77() : Message8_M2_M5_M13_M17_M29_M50_M72_M77(nullptr) {}
  ~Message8_M2_M5_M13_M17_M29_M50_M72_M77() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M17_M29_M50_M72_M77(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M17_M29_M50_M72_M77(const Message8_M2_M5_M13_M17_M29_M50_M72_M77& from) : Message8_M2_M5_M13_M17_M29_M50_M72_M77(nullptr, from) {}
  inline Message8_M2_M5_M13_M17_M29_M50_M72_M77(Message8_M2_M5_M13_M17_M29_M50_M72_M77&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M50_M72_M77(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M17_M29_M50_M72_M77& operator=(const Message8_M2_M5_M13_M17_M29_M50_M72_M77& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M17_M29_M50_M72_M77& operator=(Message8_M2_M5_M13_M17_M29_M50_M72_M77&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M17_M29_M50_M72_M77& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M17_M29_M50_M72_M77* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M17_M29_M50_M72_M77*>(
        &_Message8_M2_M5_M13_M17_M29_M50_M72_M77_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 57;
  friend void swap(Message8_M2_M5_M13_M17_M29_M50_M72_M77& a, Message8_M2_M5_M13_M17_M29_M50_M72_M77& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M17_M29_M50_M72_M77* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M17_M29_M50_M72_M77* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M17_M29_M50_M72_M77* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M17_M29_M50_M72_M77>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M17_M29_M50_M72_M77& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M17_M29_M50_M72_M77& from) { Message8_M2_M5_M13_M17_M29_M50_M72_M77::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M17_M29_M50_M72_M77* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.M77"; }

 protected:
  explicit Message8_M2_M5_M13_M17_M29_M50_M72_M77(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M17_M29_M50_M72_M77(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M17_M29_M50_M72_M77& from);
  Message8_M2_M5_M13_M17_M29_M50_M72_M77(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M17_M29_M50_M72_M77&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M50_M72_M77(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.M77)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M17_M29_M50_M72_M77_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M3) */ {
 public:
  inline Message8_M2_M3() : Message8_M2_M3(nullptr) {}
  ~Message8_M2_M3() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M3(const Message8_M2_M3& from) : Message8_M2_M3(nullptr, from) {}
  inline Message8_M2_M3(Message8_M2_M3&& from) noexcept
      : Message8_M2_M3(nullptr, std::move(from)) {}
  inline Message8_M2_M3& operator=(const Message8_M2_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M3& operator=(Message8_M2_M3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M3* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M3*>(
        &_Message8_M2_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 56;
  friend void swap(Message8_M2_M3& a, Message8_M2_M3& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M3* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M3& from) { Message8_M2_M3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M3* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M3"; }

 protected:
  explicit Message8_M2_M3(::google::protobuf::Arena* arena);
  Message8_M2_M3(::google::protobuf::Arena* arena, const Message8_M2_M3& from);
  Message8_M2_M3(::google::protobuf::Arena* arena, Message8_M2_M3&& from) noexcept
      : Message8_M2_M3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())), f_1().size() * sizeof(float)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())), f_2().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(float));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size() * sizeof(float));
      sizes.push_back(f_2().size() * sizeof(::int32_t));
      sizes.push_back(f_3().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_1().data())));
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(float), 0);
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF0FieldNumber = 1,
  };
  // repeated float f_1 = 2 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  float f_1(int index) const;
  void set_f_1(int index, float value);
  void add_f_1(float value);
  const ::google::protobuf::RepeatedField<float>& f_1() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_1();

  public:
  // repeated int32 f_2 = 4 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::int32_t f_2(int index) const;
  void set_f_2(int index, ::int32_t value);
  void add_f_2(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_2() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_2();

  public:
  // optional string f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional uint64 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::uint64_t f_4() const;
  void set_f_4(::uint64_t value);

  private:
  ::uint64_t _internal_f_4() const;
  void _internal_set_f_4(::uint64_t value);

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M3_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> f_1_;
    ::google::protobuf::RepeatedField<::int32_t> f_2_;
    mutable ::google::protobuf::internal::CachedSize _f_2_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::uint64_t f_4_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M10 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M10) */ {
 public:
  inline Message8_M2_M10() : Message8_M2_M10(nullptr) {}
  ~Message8_M2_M10() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M10(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M10(const Message8_M2_M10& from) : Message8_M2_M10(nullptr, from) {}
  inline Message8_M2_M10(Message8_M2_M10&& from) noexcept
      : Message8_M2_M10(nullptr, std::move(from)) {}
  inline Message8_M2_M10& operator=(const Message8_M2_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M10& operator=(Message8_M2_M10&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M10& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M10* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M10*>(
        &_Message8_M2_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 95;
  friend void swap(Message8_M2_M10& a, Message8_M2_M10& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M10* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M10* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M10* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M10>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M10& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M10& from) { Message8_M2_M10::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M10* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M10"; }

 protected:
  explicit Message8_M2_M10(::google::protobuf::Arena* arena);
  Message8_M2_M10(::google::protobuf::Arena* arena, const Message8_M2_M10& from);
  Message8_M2_M10(::google::protobuf::Arena* arena, Message8_M2_M10&& from) noexcept
      : Message8_M2_M10(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E1 = Message8_M2_M10_E1;
  static constexpr E1 E1_UNSPECIFIED = Message8_M2_M10_E1_E1_UNSPECIFIED;
  static constexpr E1 E1_CONST_1 = Message8_M2_M10_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 = Message8_M2_M10_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 = Message8_M2_M10_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 = Message8_M2_M10_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 = Message8_M2_M10_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return Message8_M2_M10_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN = Message8_M2_M10_E1_E1_MIN;
  static constexpr E1 E1_MAX = Message8_M2_M10_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE = Message8_M2_M10_E1_E1_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E1_descriptor() {
    return Message8_M2_M10_E1_descriptor();
  }
  template <typename T>
  static inline const std::string& E1_Name(T value) {
    return Message8_M2_M10_E1_Name(value);
  }
  static inline bool E1_Parse(absl::string_view name, E1* value) {
    return Message8_M2_M10_E1_Parse(name, value);
  }
  using E2 = Message8_M2_M10_E2;
  static constexpr E2 E2_UNSPECIFIED = Message8_M2_M10_E2_E2_UNSPECIFIED;
  static constexpr E2 E2_CONST_1 = Message8_M2_M10_E2_E2_CONST_1;
  static constexpr E2 E2_CONST_2 = Message8_M2_M10_E2_E2_CONST_2;
  static constexpr E2 E2_CONST_3 = Message8_M2_M10_E2_E2_CONST_3;
  static constexpr E2 E2_CONST_4 = Message8_M2_M10_E2_E2_CONST_4;
  static constexpr E2 E2_CONST_5 = Message8_M2_M10_E2_E2_CONST_5;
  static inline bool E2_IsValid(int value) {
    return Message8_M2_M10_E2_IsValid(value);
  }
  static constexpr E2 E2_MIN = Message8_M2_M10_E2_E2_MIN;
  static constexpr E2 E2_MAX = Message8_M2_M10_E2_E2_MAX;
  static constexpr int E2_ARRAYSIZE = Message8_M2_M10_E2_E2_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E2_descriptor() {
    return Message8_M2_M10_E2_descriptor();
  }
  template <typename T>
  static inline const std::string& E2_Name(T value) {
    return Message8_M2_M10_E2_Name(value);
  }
  static inline bool E2_Parse(absl::string_view name, E2* value) {
    return Message8_M2_M10_E2_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_7())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_7()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      sizes.push_back(end_addr - start_addr + sizeof(f_7()));
      sizes.push_back(f_5().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_7_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF5FieldNumber = 10,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF1FieldNumber = 2,
    kF3FieldNumber = 6,
    kF4FieldNumber = 8,
    kF6FieldNumber = 12,
    kF7FieldNumber = 13,
  };
  // optional string f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional int64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M2.M10.E1 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M2_M10_E1 f_1() const;
  void set_f_1(::fleetbench::proto::Message8_M2_M10_E1 value);

  private:
  ::fleetbench::proto::Message8_M2_M10_E1 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message8_M2_M10_E1 value);

  public:
  // optional .fleetbench.proto.Message8.M2.M10.E2 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::fleetbench::proto::Message8_M2_M10_E2 f_3() const;
  void set_f_3(::fleetbench::proto::Message8_M2_M10_E2 value);

  private:
  ::fleetbench::proto::Message8_M2_M10_E2 _internal_f_3() const;
  void _internal_set_f_3(::fleetbench::proto::Message8_M2_M10_E2 value);

  public:
  // optional uint64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::uint64_t f_4() const;
  void set_f_4(::uint64_t value);

  private:
  ::uint64_t _internal_f_4() const;
  void _internal_set_f_4(::uint64_t value);

  public:
  // optional double f_6 = 12;
  bool has_f_6() const;
  void clear_f_6() ;
  double f_6() const;
  void set_f_6(double value);

  private:
  double _internal_f_6() const;
  void _internal_set_f_6(double value);

  public:
  // optional int64 f_7 = 13;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int64_t f_7() const;
  void set_f_7(::int64_t value);

  private:
  ::int64_t _internal_f_7() const;
  void _internal_set_f_7(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M10)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 2,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M10_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    ::int64_t f_0_;
    ::int64_t f_2_;
    int f_1_;
    int f_3_;
    ::uint64_t f_4_;
    double f_6_;
    ::int64_t f_7_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M9 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M9) */ {
 public:
  inline Message8_M1_M9() : Message8_M1_M9(nullptr) {}
  ~Message8_M1_M9() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M9(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M9(const Message8_M1_M9& from) : Message8_M1_M9(nullptr, from) {}
  inline Message8_M1_M9(Message8_M1_M9&& from) noexcept
      : Message8_M1_M9(nullptr, std::move(from)) {}
  inline Message8_M1_M9& operator=(const Message8_M1_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M9& operator=(Message8_M1_M9&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M9& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M9* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M9*>(
        &_Message8_M1_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(Message8_M1_M9& a, Message8_M1_M9& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M9* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M9* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M9* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M9>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M9& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M9& from) { Message8_M1_M9::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M9* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M9"; }

 protected:
  explicit Message8_M1_M9(::google::protobuf::Arena* arena);
  Message8_M1_M9(::google::protobuf::Arena* arena, const Message8_M1_M9& from);
  Message8_M1_M9(::google::protobuf::Arena* arena, Message8_M1_M9&& from) noexcept
      : Message8_M1_M9(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M9)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M9_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M28 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M28) */ {
 public:
  inline Message8_M1_M4_M15_M28() : Message8_M1_M4_M15_M28(nullptr) {}
  ~Message8_M1_M4_M15_M28() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M28(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M28(const Message8_M1_M4_M15_M28& from) : Message8_M1_M4_M15_M28(nullptr, from) {}
  inline Message8_M1_M4_M15_M28(Message8_M1_M4_M15_M28&& from) noexcept
      : Message8_M1_M4_M15_M28(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M28& operator=(const Message8_M1_M4_M15_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M28& operator=(Message8_M1_M4_M15_M28&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M28& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M28* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M28*>(
        &_Message8_M1_M4_M15_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(Message8_M1_M4_M15_M28& a, Message8_M1_M4_M15_M28& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M28* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M28* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M28* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M28>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M28& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M28& from) { Message8_M1_M4_M15_M28::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M28* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M28"; }

 protected:
  explicit Message8_M1_M4_M15_M28(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M28(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M28& from);
  Message8_M1_M4_M15_M28(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M28&& from) noexcept
      : Message8_M1_M4_M15_M28(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M28)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M28_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M25 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M25) */ {
 public:
  inline Message8_M1_M4_M15_M25() : Message8_M1_M4_M15_M25(nullptr) {}
  ~Message8_M1_M4_M15_M25() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M25(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M25(const Message8_M1_M4_M15_M25& from) : Message8_M1_M4_M15_M25(nullptr, from) {}
  inline Message8_M1_M4_M15_M25(Message8_M1_M4_M15_M25&& from) noexcept
      : Message8_M1_M4_M15_M25(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M25& operator=(const Message8_M1_M4_M15_M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M25& operator=(Message8_M1_M4_M15_M25&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M25& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M25* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M25*>(
        &_Message8_M1_M4_M15_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(Message8_M1_M4_M15_M25& a, Message8_M1_M4_M15_M25& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M25* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M25* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M25* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M25>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M25& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M25& from) { Message8_M1_M4_M15_M25::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M25* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M25"; }

 protected:
  explicit Message8_M1_M4_M15_M25(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M25(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M25& from);
  Message8_M1_M4_M15_M25(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M25&& from) noexcept
      : Message8_M1_M4_M15_M25(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
  };
  // optional int64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M25)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M25_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85() : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& a, Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E34 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34;
  static constexpr E34 E34_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_UNSPECIFIED;
  static constexpr E34 E34_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_1;
  static constexpr E34 E34_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_2;
  static constexpr E34 E34_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_3;
  static constexpr E34 E34_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_4;
  static constexpr E34 E34_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_CONST_5;
  static inline bool E34_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_IsValid(value);
  }
  static constexpr E34 E34_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_MIN;
  static constexpr E34 E34_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_MAX;
  static constexpr int E34_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_E34_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E34_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_descriptor();
  }
  template <typename T>
  static inline const std::string& E34_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_Name(value);
  }
  static inline bool E34_Parse(absl::string_view name, E34* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(int));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(int));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85.E34 f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  public:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 f_0(int index) const;
  void set_f_0(int index, ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 value);
  void add_f_0(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 value);
  const ::google::protobuf::RepeatedField<int>& f_0() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<int> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E31 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31;
  static constexpr E31 E31_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_UNSPECIFIED;
  static constexpr E31 E31_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_1;
  static constexpr E31 E31_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_2;
  static constexpr E31 E31_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_3;
  static constexpr E31 E31_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_4;
  static constexpr E31 E31_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_CONST_5;
  static inline bool E31_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_IsValid(value);
  }
  static constexpr E31 E31_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_MIN;
  static constexpr E31 E31_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_MAX;
  static constexpr int E31_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_E31_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E31_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_descriptor();
  }
  template <typename T>
  static inline const std::string& E31_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_Name(value);
  }
  static inline bool E31_Parse(absl::string_view name, E31* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_Parse(name, value);
  }
  using E32 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32;
  static constexpr E32 E32_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_UNSPECIFIED;
  static constexpr E32 E32_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_1;
  static constexpr E32 E32_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_2;
  static constexpr E32 E32_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_3;
  static constexpr E32 E32_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_4;
  static constexpr E32 E32_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_CONST_5;
  static inline bool E32_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_IsValid(value);
  }
  static constexpr E32 E32_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_MIN;
  static constexpr E32 E32_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_MAX;
  static constexpr int E32_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_E32_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E32_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_descriptor();
  }
  template <typename T>
  static inline const std::string& E32_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_Name(value);
  }
  static inline bool E32_Parse(absl::string_view name, E32* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_Parse(name, value);
  }
  using E33 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33;
  static constexpr E33 E33_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_UNSPECIFIED;
  static constexpr E33 E33_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_1;
  static constexpr E33 E33_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_2;
  static constexpr E33 E33_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_3;
  static constexpr E33 E33_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_4;
  static constexpr E33 E33_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_CONST_5;
  static inline bool E33_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_IsValid(value);
  }
  static constexpr E33 E33_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_MIN;
  static constexpr E33 E33_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_MAX;
  static constexpr int E33_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_E33_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E33_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_descriptor();
  }
  template <typename T>
  static inline const std::string& E33_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_Name(value);
  }
  static inline bool E33_Parse(absl::string_view name, E33* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_21_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_21())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())), f_9().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())), f_11().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())), f_15().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())), f_22().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_21_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_21()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      sizes_list.push_back(f_9().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      sizes_list.push_back(f_11().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      sizes_list.push_back(f_15().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      sizes_list.push_back(f_22().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_21_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_21_);
      sizes.push_back(end_addr - start_addr + sizeof(f_21()));
      sizes.push_back(f_1().size());
      sizes.push_back(f_9().size());
      sizes.push_back(f_11().size());
      sizes.push_back(f_15().size());
      sizes.push_back(f_16().size());
      sizes.push_back(f_22().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_21_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_15().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_22().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_15(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_22(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF9FieldNumber = 15,
    kF11FieldNumber = 18,
    kF15FieldNumber = 25,
    kF16FieldNumber = 27,
    kF22FieldNumber = 34,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF4FieldNumber = 9,
    kF6FieldNumber = 11,
    kF5FieldNumber = 10,
    kF7FieldNumber = 12,
    kF8FieldNumber = 13,
    kF3FieldNumber = 7,
    kF10FieldNumber = 17,
    kF20FieldNumber = 32,
    kF12FieldNumber = 19,
    kF13FieldNumber = 20,
    kF14FieldNumber = 23,
    kF17FieldNumber = 29,
    kF18FieldNumber = 30,
    kF19FieldNumber = 31,
    kF21FieldNumber = 33,
  };
  // optional string f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_9 = 15;
  bool has_f_9() const;
  void clear_f_9() ;
  const std::string& f_9() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_9(Arg_&& arg, Args_... args);
  std::string* mutable_f_9();
  PROTOBUF_NODISCARD std::string* release_f_9();
  void set_allocated_f_9(std::string* value);

  private:
  const std::string& _internal_f_9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_9(
      const std::string& value);
  std::string* _internal_mutable_f_9();

  public:
  // optional string f_11 = 18;
  bool has_f_11() const;
  void clear_f_11() ;
  const std::string& f_11() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_11(Arg_&& arg, Args_... args);
  std::string* mutable_f_11();
  PROTOBUF_NODISCARD std::string* release_f_11();
  void set_allocated_f_11(std::string* value);

  private:
  const std::string& _internal_f_11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_11(
      const std::string& value);
  std::string* _internal_mutable_f_11();

  public:
  // optional bytes f_15 = 25;
  bool has_f_15() const;
  void clear_f_15() ;
  const std::string& f_15() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_15(Arg_&& arg, Args_... args);
  std::string* mutable_f_15();
  PROTOBUF_NODISCARD std::string* release_f_15();
  void set_allocated_f_15(std::string* value);

  private:
  const std::string& _internal_f_15() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_15(
      const std::string& value);
  std::string* _internal_mutable_f_15();

  public:
  // optional string f_16 = 27;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional string f_22 = 34;
  bool has_f_22() const;
  void clear_f_22() ;
  const std::string& f_22() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_22(Arg_&& arg, Args_... args);
  std::string* mutable_f_22();
  PROTOBUF_NODISCARD std::string* release_f_22();
  void set_allocated_f_22(std::string* value);

  private:
  const std::string& _internal_f_22() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_22(
      const std::string& value);
  std::string* _internal_mutable_f_22();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional fixed64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::uint64_t f_2() const;
  void set_f_2(::uint64_t value);

  private:
  ::uint64_t _internal_f_2() const;
  void _internal_set_f_2(::uint64_t value);

  public:
  // optional int64 f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int64 f_6 = 11;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.E31 f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 f_5() const;
  void set_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 _internal_f_5() const;
  void _internal_set_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.E32 f_7 = 12;
  bool has_f_7() const;
  void clear_f_7() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 f_7() const;
  void set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 _internal_f_7() const;
  void _internal_set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.E33 f_8 = 13;
  bool has_f_8() const;
  void clear_f_8() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 f_8() const;
  void set_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 _internal_f_8() const;
  void _internal_set_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 value);

  public:
  // optional bool f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // optional bool f_10 = 17;
  bool has_f_10() const;
  void clear_f_10() ;
  bool f_10() const;
  void set_f_10(bool value);

  private:
  bool _internal_f_10() const;
  void _internal_set_f_10(bool value);

  public:
  // optional bool f_20 = 32;
  bool has_f_20() const;
  void clear_f_20() ;
  bool f_20() const;
  void set_f_20(bool value);

  private:
  bool _internal_f_20() const;
  void _internal_set_f_20(bool value);

  public:
  // optional int64 f_12 = 19;
  bool has_f_12() const;
  void clear_f_12() ;
  ::int64_t f_12() const;
  void set_f_12(::int64_t value);

  private:
  ::int64_t _internal_f_12() const;
  void _internal_set_f_12(::int64_t value);

  public:
  // optional float f_13 = 20;
  bool has_f_13() const;
  void clear_f_13() ;
  float f_13() const;
  void set_f_13(float value);

  private:
  float _internal_f_13() const;
  void _internal_set_f_13(float value);

  public:
  // optional int32 f_14 = 23;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int32_t f_14() const;
  void set_f_14(::int32_t value);

  private:
  ::int32_t _internal_f_14() const;
  void _internal_set_f_14(::int32_t value);

  public:
  // optional int64 f_17 = 29;
  bool has_f_17() const;
  void clear_f_17() ;
  ::int64_t f_17() const;
  void set_f_17(::int64_t value);

  private:
  ::int64_t _internal_f_17() const;
  void _internal_set_f_17(::int64_t value);

  public:
  // optional int64 f_18 = 30;
  bool has_f_18() const;
  void clear_f_18() ;
  ::int64_t f_18() const;
  void set_f_18(::int64_t value);

  private:
  ::int64_t _internal_f_18() const;
  void _internal_set_f_18(::int64_t value);

  public:
  // optional int64 f_19 = 31;
  bool has_f_19() const;
  void clear_f_19() ;
  ::int64_t f_19() const;
  void set_f_19(::int64_t value);

  private:
  ::int64_t _internal_f_19() const;
  void _internal_set_f_19(::int64_t value);

  public:
  // optional int32 f_21 = 33;
  bool has_f_21() const;
  void clear_f_21() ;
  ::int32_t f_21() const;
  void set_f_21(::int32_t value);

  private:
  ::int32_t _internal_f_21() const;
  void _internal_set_f_21(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 23, 3,
      102, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_9_;
    ::google::protobuf::internal::ArenaStringPtr f_11_;
    ::google::protobuf::internal::ArenaStringPtr f_15_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::google::protobuf::internal::ArenaStringPtr f_22_;
    ::int64_t f_0_;
    ::uint64_t f_2_;
    ::int64_t f_4_;
    ::int64_t f_6_;
    int f_5_;
    int f_7_;
    int f_8_;
    bool f_3_;
    bool f_10_;
    bool f_20_;
    ::int64_t f_12_;
    float f_13_;
    ::int32_t f_14_;
    ::int64_t f_17_;
    ::int64_t f_18_;
    ::int64_t f_19_;
    ::int32_t f_21_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
  };
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional uint32 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint32_t f_1() const;
  void set_f_1(::uint32_t value);

  private:
  ::uint32_t _internal_f_1() const;
  void _internal_set_f_1(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    ::uint32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M84) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M84"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M84)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_0().size());
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 6,
    kF1FieldNumber = 4,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional int32 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      110, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M96) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M96"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M96)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      83, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M38 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M38) */ {
 public:
  inline Message8_M1_M4_M15_M23_M38() : Message8_M1_M4_M15_M23_M38(nullptr) {}
  ~Message8_M1_M4_M15_M23_M38() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M38(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M38(const Message8_M1_M4_M15_M23_M38& from) : Message8_M1_M4_M15_M23_M38(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M38(Message8_M1_M4_M15_M23_M38&& from) noexcept
      : Message8_M1_M4_M15_M23_M38(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M38& operator=(const Message8_M1_M4_M15_M23_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M38& operator=(Message8_M1_M4_M15_M23_M38&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M38& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M38* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M38*>(
        &_Message8_M1_M4_M15_M23_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Message8_M1_M4_M15_M23_M38& a, Message8_M1_M4_M15_M23_M38& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M38* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M38* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M38* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M38>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M38& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M38& from) { Message8_M1_M4_M15_M23_M38::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M38* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M38"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M38(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M38(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M38& from);
  Message8_M1_M4_M15_M23_M38(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M38&& from) noexcept
      : Message8_M1_M4_M15_M23_M38(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional uint32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M38)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M38_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M31 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M31) */ {
 public:
  inline Message8_M1_M4_M15_M23_M31() : Message8_M1_M4_M15_M23_M31(nullptr) {}
  ~Message8_M1_M4_M15_M23_M31() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M31(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M31(const Message8_M1_M4_M15_M23_M31& from) : Message8_M1_M4_M15_M23_M31(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M31(Message8_M1_M4_M15_M23_M31&& from) noexcept
      : Message8_M1_M4_M15_M23_M31(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M31& operator=(const Message8_M1_M4_M15_M23_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M31& operator=(Message8_M1_M4_M15_M23_M31&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M31& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M31* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M31*>(
        &_Message8_M1_M4_M15_M23_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Message8_M1_M4_M15_M23_M31& a, Message8_M1_M4_M15_M23_M31& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M31* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M31* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M31* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M31>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M31& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M31& from) { Message8_M1_M4_M15_M23_M31::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M31* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M31"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M31(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M31(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M31& from);
  Message8_M1_M4_M15_M23_M31(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M31&& from) noexcept
      : Message8_M1_M4_M15_M23_M31(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M31)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      55, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M31_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M30 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M30) */ {
 public:
  inline Message8_M1_M4_M15_M23_M30() : Message8_M1_M4_M15_M23_M30(nullptr) {}
  ~Message8_M1_M4_M15_M23_M30() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M30(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M30(const Message8_M1_M4_M15_M23_M30& from) : Message8_M1_M4_M15_M23_M30(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M30(Message8_M1_M4_M15_M23_M30&& from) noexcept
      : Message8_M1_M4_M15_M23_M30(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M30& operator=(const Message8_M1_M4_M15_M23_M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M30& operator=(Message8_M1_M4_M15_M23_M30&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M30& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M30* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M30*>(
        &_Message8_M1_M4_M15_M23_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(Message8_M1_M4_M15_M23_M30& a, Message8_M1_M4_M15_M23_M30& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M30* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M30* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M30* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M30>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M30& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M30& from) { Message8_M1_M4_M15_M23_M30::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M30* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M30"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M30(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M30(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M30& from);
  Message8_M1_M4_M15_M23_M30(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M30&& from) noexcept
      : Message8_M1_M4_M15_M23_M30(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())), f_0().size() * sizeof(::int64_t)));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int64_t));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int64_t));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // repeated int64 f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int64_t f_0(int index) const;
  void set_f_0(int index, ::int64_t value);
  void add_f_0(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M30)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M30_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M20_M46_M56 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56) */ {
 public:
  inline Message8_M1_M4_M15_M20_M46_M56() : Message8_M1_M4_M15_M20_M46_M56(nullptr) {}
  ~Message8_M1_M4_M15_M20_M46_M56() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M20_M46_M56(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M20_M46_M56(const Message8_M1_M4_M15_M20_M46_M56& from) : Message8_M1_M4_M15_M20_M46_M56(nullptr, from) {}
  inline Message8_M1_M4_M15_M20_M46_M56(Message8_M1_M4_M15_M20_M46_M56&& from) noexcept
      : Message8_M1_M4_M15_M20_M46_M56(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M20_M46_M56& operator=(const Message8_M1_M4_M15_M20_M46_M56& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M20_M46_M56& operator=(Message8_M1_M4_M15_M20_M46_M56&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M20_M46_M56& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M20_M46_M56* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M20_M46_M56*>(
        &_Message8_M1_M4_M15_M20_M46_M56_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Message8_M1_M4_M15_M20_M46_M56& a, Message8_M1_M4_M15_M20_M46_M56& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M20_M46_M56* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M20_M46_M56* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M20_M46_M56* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M20_M46_M56>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M20_M46_M56& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M20_M46_M56& from) { Message8_M1_M4_M15_M20_M46_M56::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M20_M46_M56* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56"; }

 protected:
  explicit Message8_M1_M4_M15_M20_M46_M56(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M20_M46_M56(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M20_M46_M56& from);
  Message8_M1_M4_M15_M20_M46_M56(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M20_M46_M56&& from) noexcept
      : Message8_M1_M4_M15_M20_M46_M56(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M20_M46_M56_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M20_M45_M57 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57) */ {
 public:
  inline Message8_M1_M4_M15_M20_M45_M57() : Message8_M1_M4_M15_M20_M45_M57(nullptr) {}
  ~Message8_M1_M4_M15_M20_M45_M57() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M20_M45_M57(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M20_M45_M57(const Message8_M1_M4_M15_M20_M45_M57& from) : Message8_M1_M4_M15_M20_M45_M57(nullptr, from) {}
  inline Message8_M1_M4_M15_M20_M45_M57(Message8_M1_M4_M15_M20_M45_M57&& from) noexcept
      : Message8_M1_M4_M15_M20_M45_M57(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M20_M45_M57& operator=(const Message8_M1_M4_M15_M20_M45_M57& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M20_M45_M57& operator=(Message8_M1_M4_M15_M20_M45_M57&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M20_M45_M57& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M20_M45_M57* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M20_M45_M57*>(
        &_Message8_M1_M4_M15_M20_M45_M57_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Message8_M1_M4_M15_M20_M45_M57& a, Message8_M1_M4_M15_M20_M45_M57& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M20_M45_M57* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M20_M45_M57* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M20_M45_M57* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M20_M45_M57>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M20_M45_M57& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M20_M45_M57& from) { Message8_M1_M4_M15_M20_M45_M57::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M20_M45_M57* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57"; }

 protected:
  explicit Message8_M1_M4_M15_M20_M45_M57(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M20_M45_M57(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M20_M45_M57& from);
  Message8_M1_M4_M15_M20_M45_M57(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M20_M45_M57&& from) noexcept
      : Message8_M1_M4_M15_M20_M45_M57(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 4,
  };
  // optional string f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      59, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M20_M45_M57_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16_M44 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16.M44) */ {
 public:
  inline Message8_M1_M4_M15_M16_M44() : Message8_M1_M4_M15_M16_M44(nullptr) {}
  ~Message8_M1_M4_M15_M16_M44() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16_M44(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16_M44(const Message8_M1_M4_M15_M16_M44& from) : Message8_M1_M4_M15_M16_M44(nullptr, from) {}
  inline Message8_M1_M4_M15_M16_M44(Message8_M1_M4_M15_M16_M44&& from) noexcept
      : Message8_M1_M4_M15_M16_M44(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16_M44& operator=(const Message8_M1_M4_M15_M16_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16_M44& operator=(Message8_M1_M4_M15_M16_M44&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16_M44& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16_M44* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16_M44*>(
        &_Message8_M1_M4_M15_M16_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Message8_M1_M4_M15_M16_M44& a, Message8_M1_M4_M15_M16_M44& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16_M44* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16_M44* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16_M44* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16_M44>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16_M44& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16_M44& from) { Message8_M1_M4_M15_M16_M44::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16_M44* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16.M44"; }

 protected:
  explicit Message8_M1_M4_M15_M16_M44(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16_M44(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16_M44& from);
  Message8_M1_M4_M15_M16_M44(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16_M44&& from) noexcept
      : Message8_M1_M4_M15_M16_M44(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16.M44)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_M44_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16_M33_M60 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60) */ {
 public:
  inline Message8_M1_M4_M15_M16_M33_M60() : Message8_M1_M4_M15_M16_M33_M60(nullptr) {}
  ~Message8_M1_M4_M15_M16_M33_M60() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16_M33_M60(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16_M33_M60(const Message8_M1_M4_M15_M16_M33_M60& from) : Message8_M1_M4_M15_M16_M33_M60(nullptr, from) {}
  inline Message8_M1_M4_M15_M16_M33_M60(Message8_M1_M4_M15_M16_M33_M60&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M60(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16_M33_M60& operator=(const Message8_M1_M4_M15_M16_M33_M60& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16_M33_M60& operator=(Message8_M1_M4_M15_M16_M33_M60&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16_M33_M60& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16_M33_M60* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16_M33_M60*>(
        &_Message8_M1_M4_M15_M16_M33_M60_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Message8_M1_M4_M15_M16_M33_M60& a, Message8_M1_M4_M15_M16_M33_M60& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16_M33_M60* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16_M33_M60* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16_M33_M60* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16_M33_M60>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16_M33_M60& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16_M33_M60& from) { Message8_M1_M4_M15_M16_M33_M60::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16_M33_M60* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60"; }

 protected:
  explicit Message8_M1_M4_M15_M16_M33_M60(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16_M33_M60(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16_M33_M60& from);
  Message8_M1_M4_M15_M16_M33_M60(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16_M33_M60&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M60(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_M33_M60_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16_M33_M53_M74 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74) */ {
 public:
  inline Message8_M1_M4_M15_M16_M33_M53_M74() : Message8_M1_M4_M15_M16_M33_M53_M74(nullptr) {}
  ~Message8_M1_M4_M15_M16_M33_M53_M74() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16_M33_M53_M74(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16_M33_M53_M74(const Message8_M1_M4_M15_M16_M33_M53_M74& from) : Message8_M1_M4_M15_M16_M33_M53_M74(nullptr, from) {}
  inline Message8_M1_M4_M15_M16_M33_M53_M74(Message8_M1_M4_M15_M16_M33_M53_M74&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53_M74(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16_M33_M53_M74& operator=(const Message8_M1_M4_M15_M16_M33_M53_M74& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16_M33_M53_M74& operator=(Message8_M1_M4_M15_M16_M33_M53_M74&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16_M33_M53_M74& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16_M33_M53_M74* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16_M33_M53_M74*>(
        &_Message8_M1_M4_M15_M16_M33_M53_M74_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Message8_M1_M4_M15_M16_M33_M53_M74& a, Message8_M1_M4_M15_M16_M33_M53_M74& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16_M33_M53_M74* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16_M33_M53_M74* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16_M33_M53_M74* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16_M33_M53_M74>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16_M33_M53_M74& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16_M33_M53_M74& from) { Message8_M1_M4_M15_M16_M33_M53_M74::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16_M33_M53_M74* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74"; }

 protected:
  explicit Message8_M1_M4_M15_M16_M33_M53_M74(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16_M33_M53_M74(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16_M33_M53_M74& from);
  Message8_M1_M4_M15_M16_M33_M53_M74(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16_M33_M53_M74&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53_M74(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional bytes f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_M33_M53_M74_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16_M33_M53_M69_M76 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76) */ {
 public:
  inline Message8_M1_M4_M15_M16_M33_M53_M69_M76() : Message8_M1_M4_M15_M16_M33_M53_M69_M76(nullptr) {}
  ~Message8_M1_M4_M15_M16_M33_M53_M69_M76() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16_M33_M53_M69_M76(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16_M33_M53_M69_M76(const Message8_M1_M4_M15_M16_M33_M53_M69_M76& from) : Message8_M1_M4_M15_M16_M33_M53_M69_M76(nullptr, from) {}
  inline Message8_M1_M4_M15_M16_M33_M53_M69_M76(Message8_M1_M4_M15_M16_M33_M53_M69_M76&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53_M69_M76(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16_M33_M53_M69_M76& operator=(const Message8_M1_M4_M15_M16_M33_M53_M69_M76& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16_M33_M53_M69_M76& operator=(Message8_M1_M4_M15_M16_M33_M53_M69_M76&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16_M33_M53_M69_M76& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16_M33_M53_M69_M76* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16_M33_M53_M69_M76*>(
        &_Message8_M1_M4_M15_M16_M33_M53_M69_M76_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Message8_M1_M4_M15_M16_M33_M53_M69_M76& a, Message8_M1_M4_M15_M16_M33_M53_M69_M76& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16_M33_M53_M69_M76* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16_M33_M53_M69_M76* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16_M33_M53_M69_M76* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16_M33_M53_M69_M76>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16_M33_M53_M69_M76& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16_M33_M53_M69_M76& from) { Message8_M1_M4_M15_M16_M33_M53_M69_M76::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16_M33_M53_M69_M76* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76"; }

 protected:
  explicit Message8_M1_M4_M15_M16_M33_M53_M69_M76(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16_M33_M53_M69_M76(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16_M33_M53_M69_M76& from);
  Message8_M1_M4_M15_M16_M33_M53_M69_M76(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16_M33_M53_M69_M76&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53_M69_M76(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_M33_M53_M69_M76_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M27_M39_M58 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M27.M39.M58) */ {
 public:
  inline Message8_M1_M11_M14_M27_M39_M58() : Message8_M1_M11_M14_M27_M39_M58(nullptr) {}
  ~Message8_M1_M11_M14_M27_M39_M58() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M27_M39_M58(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M27_M39_M58(const Message8_M1_M11_M14_M27_M39_M58& from) : Message8_M1_M11_M14_M27_M39_M58(nullptr, from) {}
  inline Message8_M1_M11_M14_M27_M39_M58(Message8_M1_M11_M14_M27_M39_M58&& from) noexcept
      : Message8_M1_M11_M14_M27_M39_M58(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M27_M39_M58& operator=(const Message8_M1_M11_M14_M27_M39_M58& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M27_M39_M58& operator=(Message8_M1_M11_M14_M27_M39_M58&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M27_M39_M58& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M27_M39_M58* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M27_M39_M58*>(
        &_Message8_M1_M11_M14_M27_M39_M58_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 50;
  friend void swap(Message8_M1_M11_M14_M27_M39_M58& a, Message8_M1_M11_M14_M27_M39_M58& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M27_M39_M58* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M27_M39_M58* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M27_M39_M58* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M27_M39_M58>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M27_M39_M58& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M27_M39_M58& from) { Message8_M1_M11_M14_M27_M39_M58::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M27_M39_M58* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M27.M39.M58"; }

 protected:
  explicit Message8_M1_M11_M14_M27_M39_M58(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M27_M39_M58(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M27_M39_M58& from);
  Message8_M1_M11_M14_M27_M39_M58(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M27_M39_M58&& from) noexcept
      : Message8_M1_M11_M14_M27_M39_M58(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M27.M39.M58)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M27_M39_M58_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M27_M32 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M27.M32) */ {
 public:
  inline Message8_M1_M11_M14_M27_M32() : Message8_M1_M11_M14_M27_M32(nullptr) {}
  ~Message8_M1_M11_M14_M27_M32() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M27_M32(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M27_M32(const Message8_M1_M11_M14_M27_M32& from) : Message8_M1_M11_M14_M27_M32(nullptr, from) {}
  inline Message8_M1_M11_M14_M27_M32(Message8_M1_M11_M14_M27_M32&& from) noexcept
      : Message8_M1_M11_M14_M27_M32(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M27_M32& operator=(const Message8_M1_M11_M14_M27_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M27_M32& operator=(Message8_M1_M11_M14_M27_M32&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M27_M32& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M27_M32* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M27_M32*>(
        &_Message8_M1_M11_M14_M27_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 49;
  friend void swap(Message8_M1_M11_M14_M27_M32& a, Message8_M1_M11_M14_M27_M32& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M27_M32* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M27_M32* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M27_M32* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M27_M32>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M27_M32& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M27_M32& from) { Message8_M1_M11_M14_M27_M32::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M27_M32* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M27.M32"; }

 protected:
  explicit Message8_M1_M11_M14_M27_M32(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M27_M32(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M27_M32& from);
  Message8_M1_M11_M14_M27_M32(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M27_M32&& from) noexcept
      : Message8_M1_M11_M14_M27_M32(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E8 = Message8_M1_M11_M14_M27_M32_E8;
  static constexpr E8 E8_UNSPECIFIED = Message8_M1_M11_M14_M27_M32_E8_E8_UNSPECIFIED;
  static constexpr E8 E8_CONST_1 = Message8_M1_M11_M14_M27_M32_E8_E8_CONST_1;
  static constexpr E8 E8_CONST_2 = Message8_M1_M11_M14_M27_M32_E8_E8_CONST_2;
  static constexpr E8 E8_CONST_3 = Message8_M1_M11_M14_M27_M32_E8_E8_CONST_3;
  static constexpr E8 E8_CONST_4 = Message8_M1_M11_M14_M27_M32_E8_E8_CONST_4;
  static constexpr E8 E8_CONST_5 = Message8_M1_M11_M14_M27_M32_E8_E8_CONST_5;
  static inline bool E8_IsValid(int value) {
    return Message8_M1_M11_M14_M27_M32_E8_IsValid(value);
  }
  static constexpr E8 E8_MIN = Message8_M1_M11_M14_M27_M32_E8_E8_MIN;
  static constexpr E8 E8_MAX = Message8_M1_M11_M14_M27_M32_E8_E8_MAX;
  static constexpr int E8_ARRAYSIZE = Message8_M1_M11_M14_M27_M32_E8_E8_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E8_descriptor() {
    return Message8_M1_M11_M14_M27_M32_E8_descriptor();
  }
  template <typename T>
  static inline const std::string& E8_Name(T value) {
    return Message8_M1_M11_M14_M27_M32_E8_Name(value);
  }
  static inline bool E8_Parse(absl::string_view name, E8* value) {
    return Message8_M1_M11_M14_M27_M32_E8_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M11.M14.M27.M32.E8 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 value);

  private:
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M27.M32)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M27_M32_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M19_M37 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M19.M37) */ {
 public:
  inline Message8_M1_M11_M14_M19_M37() : Message8_M1_M11_M14_M19_M37(nullptr) {}
  ~Message8_M1_M11_M14_M19_M37() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M19_M37(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M19_M37(const Message8_M1_M11_M14_M19_M37& from) : Message8_M1_M11_M14_M19_M37(nullptr, from) {}
  inline Message8_M1_M11_M14_M19_M37(Message8_M1_M11_M14_M19_M37&& from) noexcept
      : Message8_M1_M11_M14_M19_M37(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M19_M37& operator=(const Message8_M1_M11_M14_M19_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M19_M37& operator=(Message8_M1_M11_M14_M19_M37&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M19_M37& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M19_M37* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M19_M37*>(
        &_Message8_M1_M11_M14_M19_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 47;
  friend void swap(Message8_M1_M11_M14_M19_M37& a, Message8_M1_M11_M14_M19_M37& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M19_M37* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M19_M37* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M19_M37* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M19_M37>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M19_M37& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M19_M37& from) { Message8_M1_M11_M14_M19_M37::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M19_M37* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M19.M37"; }

 protected:
  explicit Message8_M1_M11_M14_M19_M37(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M19_M37(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M19_M37& from);
  Message8_M1_M11_M14_M19_M37(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M19_M37&& from) noexcept
      : Message8_M1_M11_M14_M19_M37(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M19.M37)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M19_M37_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M18_M42 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M18.M42) */ {
 public:
  inline Message8_M1_M11_M14_M18_M42() : Message8_M1_M11_M14_M18_M42(nullptr) {}
  ~Message8_M1_M11_M14_M18_M42() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M18_M42(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M18_M42(const Message8_M1_M11_M14_M18_M42& from) : Message8_M1_M11_M14_M18_M42(nullptr, from) {}
  inline Message8_M1_M11_M14_M18_M42(Message8_M1_M11_M14_M18_M42&& from) noexcept
      : Message8_M1_M11_M14_M18_M42(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M18_M42& operator=(const Message8_M1_M11_M14_M18_M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M18_M42& operator=(Message8_M1_M11_M14_M18_M42&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M18_M42& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M18_M42* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M18_M42*>(
        &_Message8_M1_M11_M14_M18_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(Message8_M1_M11_M14_M18_M42& a, Message8_M1_M11_M14_M18_M42& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M18_M42* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M18_M42* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M18_M42* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M18_M42>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M18_M42& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M18_M42& from) { Message8_M1_M11_M14_M18_M42::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M18_M42* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M18.M42"; }

 protected:
  explicit Message8_M1_M11_M14_M18_M42(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M18_M42(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M18_M42& from);
  Message8_M1_M11_M14_M18_M42(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M18_M42&& from) noexcept
      : Message8_M1_M11_M14_M18_M42(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      sizes.push_back(f_1().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional bytes f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M18.M42)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M18_M42_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M43_M49 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49) */ {
 public:
  inline Message8_M2_M6_M12_M24_M43_M49() : Message8_M2_M6_M12_M24_M43_M49(nullptr) {}
  ~Message8_M2_M6_M12_M24_M43_M49() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M43_M49(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M43_M49(const Message8_M2_M6_M12_M24_M43_M49& from) : Message8_M2_M6_M12_M24_M43_M49(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M43_M49(Message8_M2_M6_M12_M24_M43_M49&& from) noexcept
      : Message8_M2_M6_M12_M24_M43_M49(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M43_M49& operator=(const Message8_M2_M6_M12_M24_M43_M49& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M43_M49& operator=(Message8_M2_M6_M12_M24_M43_M49&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M43_M49& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M43_M49* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M43_M49*>(
        &_Message8_M2_M6_M12_M24_M43_M49_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 87;
  friend void swap(Message8_M2_M6_M12_M24_M43_M49& a, Message8_M2_M6_M12_M24_M43_M49& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M43_M49* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M43_M49* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M43_M49* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M43_M49>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M43_M49& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M43_M49& from) { Message8_M2_M6_M12_M24_M43_M49::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M43_M49* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M43_M49(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M43_M49(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M43_M49& from);
  Message8_M2_M6_M12_M24_M43_M49(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M43_M49&& from) noexcept
      : Message8_M2_M6_M12_M24_M43_M49(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M68 = Message8_M2_M6_M12_M24_M43_M49_M68;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* release_f_2();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M43_M49_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M62 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M62() : Message8_M2_M6_M12_M24_M35_M62(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M62() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M62(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M62(const Message8_M2_M6_M12_M24_M35_M62& from) : Message8_M2_M6_M12_M24_M35_M62(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M62(Message8_M2_M6_M12_M24_M35_M62&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M62(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M62& operator=(const Message8_M2_M6_M12_M24_M35_M62& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M62& operator=(Message8_M2_M6_M12_M24_M35_M62&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M62& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M62* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M62*>(
        &_Message8_M2_M6_M12_M24_M35_M62_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 83;
  friend void swap(Message8_M2_M6_M12_M24_M35_M62& a, Message8_M2_M6_M12_M24_M35_M62& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M62* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M62* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M62* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M62>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M62& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M62& from) { Message8_M2_M6_M12_M24_M35_M62::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M62* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M62(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M62(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M62& from);
  Message8_M2_M6_M12_M24_M35_M62(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M62&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M62(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M65 = Message8_M2_M6_M12_M24_M35_M62_M65;
  using M66 = Message8_M2_M6_M12_M24_M35_M62_M66;
  using E18 = Message8_M2_M6_M12_M24_M35_M62_E18;
  static constexpr E18 E18_UNSPECIFIED = Message8_M2_M6_M12_M24_M35_M62_E18_E18_UNSPECIFIED;
  static constexpr E18 E18_CONST_1 = Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_1;
  static constexpr E18 E18_CONST_2 = Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_2;
  static constexpr E18 E18_CONST_3 = Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_3;
  static constexpr E18 E18_CONST_4 = Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_4;
  static constexpr E18 E18_CONST_5 = Message8_M2_M6_M12_M24_M35_M62_E18_E18_CONST_5;
  static inline bool E18_IsValid(int value) {
    return Message8_M2_M6_M12_M24_M35_M62_E18_IsValid(value);
  }
  static constexpr E18 E18_MIN = Message8_M2_M6_M12_M24_M35_M62_E18_E18_MIN;
  static constexpr E18 E18_MAX = Message8_M2_M6_M12_M24_M35_M62_E18_E18_MAX;
  static constexpr int E18_ARRAYSIZE = Message8_M2_M6_M12_M24_M35_M62_E18_E18_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E18_descriptor() {
    return Message8_M2_M6_M12_M24_M35_M62_E18_descriptor();
  }
  template <typename T>
  static inline const std::string& E18_Name(T value) {
    return Message8_M2_M6_M12_M24_M35_M62_E18_Name(value);
  }
  static inline bool E18_Parse(absl::string_view name, E18* value) {
    return Message8_M2_M6_M12_M24_M35_M62_E18_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* release_f_1();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65& _internal_f_1() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* release_f_2();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.E18 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M62_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* f_1_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M52_M64 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M52_M64() : Message8_M2_M6_M12_M24_M35_M52_M64(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M52_M64() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M52_M64(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M52_M64(const Message8_M2_M6_M12_M24_M35_M52_M64& from) : Message8_M2_M6_M12_M24_M35_M52_M64(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M52_M64(Message8_M2_M6_M12_M24_M35_M52_M64&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52_M64(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M52_M64& operator=(const Message8_M2_M6_M12_M24_M35_M52_M64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M52_M64& operator=(Message8_M2_M6_M12_M24_M35_M52_M64&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M52_M64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M52_M64* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M52_M64*>(
        &_Message8_M2_M6_M12_M24_M35_M52_M64_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 77;
  friend void swap(Message8_M2_M6_M12_M24_M35_M52_M64& a, Message8_M2_M6_M12_M24_M35_M52_M64& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M52_M64* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M52_M64* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M52_M64* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M52_M64>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M52_M64& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M52_M64& from) { Message8_M2_M6_M12_M24_M35_M52_M64::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M52_M64* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M52_M64(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M52_M64(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M52_M64& from);
  Message8_M2_M6_M12_M24_M35_M52_M64(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M52_M64&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52_M64(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M78 = Message8_M2_M6_M12_M24_M35_M52_M64_M78;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* release_f_1();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78& _internal_f_1() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M52_M64_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M22_M41_M59 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59) */ {
 public:
  inline Message8_M2_M6_M12_M22_M41_M59() : Message8_M2_M6_M12_M22_M41_M59(nullptr) {}
  ~Message8_M2_M6_M12_M22_M41_M59() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M22_M41_M59(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M22_M41_M59(const Message8_M2_M6_M12_M22_M41_M59& from) : Message8_M2_M6_M12_M22_M41_M59(nullptr, from) {}
  inline Message8_M2_M6_M12_M22_M41_M59(Message8_M2_M6_M12_M22_M41_M59&& from) noexcept
      : Message8_M2_M6_M12_M22_M41_M59(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M22_M41_M59& operator=(const Message8_M2_M6_M12_M22_M41_M59& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M22_M41_M59& operator=(Message8_M2_M6_M12_M22_M41_M59&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M22_M41_M59& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M22_M41_M59* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M22_M41_M59*>(
        &_Message8_M2_M6_M12_M22_M41_M59_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 73;
  friend void swap(Message8_M2_M6_M12_M22_M41_M59& a, Message8_M2_M6_M12_M22_M41_M59& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M22_M41_M59* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M22_M41_M59* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M22_M41_M59* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M22_M41_M59>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M22_M41_M59& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M22_M41_M59& from) { Message8_M2_M6_M12_M22_M41_M59::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M22_M41_M59* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59"; }

 protected:
  explicit Message8_M2_M6_M12_M22_M41_M59(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M22_M41_M59(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M22_M41_M59& from);
  Message8_M2_M6_M12_M22_M41_M59(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M22_M41_M59&& from) noexcept
      : Message8_M2_M6_M12_M22_M41_M59(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M70 = Message8_M2_M6_M12_M22_M41_M59_M70;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.M70 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* release_f_2();
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M22_M41_M59_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M21_M34_M55 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55) */ {
 public:
  inline Message8_M2_M6_M12_M21_M34_M55() : Message8_M2_M6_M12_M21_M34_M55(nullptr) {}
  ~Message8_M2_M6_M12_M21_M34_M55() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M21_M34_M55(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M21_M34_M55(const Message8_M2_M6_M12_M21_M34_M55& from) : Message8_M2_M6_M12_M21_M34_M55(nullptr, from) {}
  inline Message8_M2_M6_M12_M21_M34_M55(Message8_M2_M6_M12_M21_M34_M55&& from) noexcept
      : Message8_M2_M6_M12_M21_M34_M55(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M21_M34_M55& operator=(const Message8_M2_M6_M12_M21_M34_M55& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M21_M34_M55& operator=(Message8_M2_M6_M12_M21_M34_M55&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M21_M34_M55& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M21_M34_M55* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M21_M34_M55*>(
        &_Message8_M2_M6_M12_M21_M34_M55_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 69;
  friend void swap(Message8_M2_M6_M12_M21_M34_M55& a, Message8_M2_M6_M12_M21_M34_M55& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M21_M34_M55* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M21_M34_M55* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M21_M34_M55* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M21_M34_M55>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M21_M34_M55& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M21_M34_M55& from) { Message8_M2_M6_M12_M21_M34_M55::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M21_M34_M55* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55"; }

 protected:
  explicit Message8_M2_M6_M12_M21_M34_M55(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M21_M34_M55(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M21_M34_M55& from);
  Message8_M2_M6_M12_M21_M34_M55(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M21_M34_M55&& from) noexcept
      : Message8_M2_M6_M12_M21_M34_M55(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M71 = Message8_M2_M6_M12_M21_M34_M55_M71;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.M71 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* release_f_2();
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* _internal_mutable_f_2();

  public:
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M21_M34_M55_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* f_2_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M26 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M26) */ {
 public:
  inline Message8_M2_M5_M13_M26() : Message8_M2_M5_M13_M26(nullptr) {}
  ~Message8_M2_M5_M13_M26() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M26(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M26(const Message8_M2_M5_M13_M26& from) : Message8_M2_M5_M13_M26(nullptr, from) {}
  inline Message8_M2_M5_M13_M26(Message8_M2_M5_M13_M26&& from) noexcept
      : Message8_M2_M5_M13_M26(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M26& operator=(const Message8_M2_M5_M13_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M26& operator=(Message8_M2_M5_M13_M26&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M26& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M26* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M26*>(
        &_Message8_M2_M5_M13_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 65;
  friend void swap(Message8_M2_M5_M13_M26& a, Message8_M2_M5_M13_M26& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M26* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M26* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M26* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M26>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M26& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M26& from) { Message8_M2_M5_M13_M26::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M26* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M26"; }

 protected:
  explicit Message8_M2_M5_M13_M26(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M26(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M26& from);
  Message8_M2_M5_M13_M26(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M26&& from) noexcept
      : Message8_M2_M5_M13_M26(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M36 = Message8_M2_M5_M13_M26_M36;
  using M47 = Message8_M2_M5_M13_M26_M47;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_9())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_11().data())), f_11().size() * sizeof(float)));
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
      mutable_f_22()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_9()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_11().data())));
      sizes_list.push_back(f_11().size() * sizeof(float));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_21().size());
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
      mutable_f_22()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_11().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      mutable_f_22()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      sizes.push_back(end_addr - start_addr + sizeof(f_9()));
      sizes.push_back(f_11().size() * sizeof(float));
      sizes.push_back(f_21().size());
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_10().size());
      mutable_f_22()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_9_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_11()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_11().data())));
      size_t num_f_21_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_21_entries; ++i) {
        auto* new_msg = add_f_21();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_21(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      idx = mutable_f_22()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_11()->Resize(sizes[idx++] / sizeof(float), 0);
      size_t num_f_21_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_21_entries; ++i) {
        auto* new_msg = add_f_21();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_21(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      idx = mutable_f_22()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF11FieldNumber = 21,
    kF21FieldNumber = 22,
    kF10FieldNumber = 20,
    kF22FieldNumber = 23,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
    kF2FieldNumber = 3,
    kF3FieldNumber = 7,
    kF4FieldNumber = 8,
    kF5FieldNumber = 10,
    kF7FieldNumber = 13,
    kF6FieldNumber = 12,
    kF8FieldNumber = 17,
    kF9FieldNumber = 19,
  };
  // repeated float f_11 = 21 [packed = true];
  int f_11_size() const;
  private:
  int _internal_f_11_size() const;

  public:
  void clear_f_11() ;
  float f_11(int index) const;
  void set_f_11(int index, float value);
  void add_f_11(float value);
  const ::google::protobuf::RepeatedField<float>& f_11() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_11();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_11() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_11();

  public:
  // repeated .fleetbench.proto.Message8.M2.M5.M13.M26.M36 f_21 = 22;
  int f_21_size() const;
  private:
  int _internal_f_21_size() const;

  public:
  void clear_f_21() ;
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M36* mutable_f_21(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>* mutable_f_21();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>& _internal_f_21() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>* _internal_mutable_f_21();
  public:
  const ::fleetbench::proto::Message8_M2_M5_M13_M26_M36& f_21(int index) const;
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M36* add_f_21();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>& f_21() const;
  // optional string f_10 = 20;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional .fleetbench.proto.Message8.M2.M5.M13.M26.M47 f_22 = 23;
  bool has_f_22() const;
  void clear_f_22() ;
  const ::fleetbench::proto::Message8_M2_M5_M13_M26_M47& f_22() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* release_f_22();
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* mutable_f_22();
  void set_allocated_f_22(::fleetbench::proto::Message8_M2_M5_M13_M26_M47* value);
  void unsafe_arena_set_allocated_f_22(::fleetbench::proto::Message8_M2_M5_M13_M26_M47* value);
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* unsafe_arena_release_f_22();

  private:
  const ::fleetbench::proto::Message8_M2_M5_M13_M26_M47& _internal_f_22() const;
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* _internal_mutable_f_22();

  public:
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional int32 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional uint64 f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint64_t f_3() const;
  void set_f_3(::uint64_t value);

  private:
  ::uint64_t _internal_f_3() const;
  void _internal_set_f_3(::uint64_t value);

  public:
  // optional int64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int32 f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional float f_7 = 13;
  bool has_f_7() const;
  void clear_f_7() ;
  float f_7() const;
  void set_f_7(float value);

  private:
  float _internal_f_7() const;
  void _internal_set_f_7(float value);

  public:
  // optional int64 f_6 = 12;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional int64 f_8 = 17;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int64_t f_8() const;
  void set_f_8(::int64_t value);

  private:
  ::int64_t _internal_f_8() const;
  void _internal_set_f_8(::int64_t value);

  public:
  // optional uint32 f_9 = 19;
  bool has_f_9() const;
  void clear_f_9() ;
  ::uint32_t f_9() const;
  void set_f_9(::uint32_t value);

  private:
  ::uint32_t _internal_f_9() const;
  void _internal_set_f_9(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M26)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 2,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M26_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> f_11_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M5_M13_M26_M36 > f_21_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* f_22_;
    ::int64_t f_1_;
    ::int32_t f_0_;
    ::int32_t f_2_;
    ::uint64_t f_3_;
    ::int64_t f_4_;
    ::int32_t f_5_;
    float f_7_;
    ::int64_t f_6_;
    ::int64_t f_8_;
    ::uint32_t f_9_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M17_M29_M50_M72 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72) */ {
 public:
  inline Message8_M2_M5_M13_M17_M29_M50_M72() : Message8_M2_M5_M13_M17_M29_M50_M72(nullptr) {}
  ~Message8_M2_M5_M13_M17_M29_M50_M72() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M17_M29_M50_M72(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M17_M29_M50_M72(const Message8_M2_M5_M13_M17_M29_M50_M72& from) : Message8_M2_M5_M13_M17_M29_M50_M72(nullptr, from) {}
  inline Message8_M2_M5_M13_M17_M29_M50_M72(Message8_M2_M5_M13_M17_M29_M50_M72&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M50_M72(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M17_M29_M50_M72& operator=(const Message8_M2_M5_M13_M17_M29_M50_M72& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M17_M29_M50_M72& operator=(Message8_M2_M5_M13_M17_M29_M50_M72&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M17_M29_M50_M72& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M17_M29_M50_M72* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M17_M29_M50_M72*>(
        &_Message8_M2_M5_M13_M17_M29_M50_M72_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 58;
  friend void swap(Message8_M2_M5_M13_M17_M29_M50_M72& a, Message8_M2_M5_M13_M17_M29_M50_M72& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M17_M29_M50_M72* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M17_M29_M50_M72* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M17_M29_M50_M72* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M17_M29_M50_M72>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M17_M29_M50_M72& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M17_M29_M50_M72& from) { Message8_M2_M5_M13_M17_M29_M50_M72::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M17_M29_M50_M72* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72"; }

 protected:
  explicit Message8_M2_M5_M13_M17_M29_M50_M72(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M17_M29_M50_M72(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M17_M29_M50_M72& from);
  Message8_M2_M5_M13_M17_M29_M50_M72(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M17_M29_M50_M72&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M50_M72(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M77 = Message8_M2_M5_M13_M17_M29_M50_M72_M77;
  using E20 = Message8_M2_M5_M13_M17_M29_M50_M72_E20;
  static constexpr E20 E20_UNSPECIFIED = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_UNSPECIFIED;
  static constexpr E20 E20_CONST_1 = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_1;
  static constexpr E20 E20_CONST_2 = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_2;
  static constexpr E20 E20_CONST_3 = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_3;
  static constexpr E20 E20_CONST_4 = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_4;
  static constexpr E20 E20_CONST_5 = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_CONST_5;
  static inline bool E20_IsValid(int value) {
    return Message8_M2_M5_M13_M17_M29_M50_M72_E20_IsValid(value);
  }
  static constexpr E20 E20_MIN = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_MIN;
  static constexpr E20 E20_MAX = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_MAX;
  static constexpr int E20_ARRAYSIZE = Message8_M2_M5_M13_M17_M29_M50_M72_E20_E20_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E20_descriptor() {
    return Message8_M2_M5_M13_M17_M29_M50_M72_E20_descriptor();
  }
  template <typename T>
  static inline const std::string& E20_Name(T value) {
    return Message8_M2_M5_M13_M17_M29_M50_M72_E20_Name(value);
  }
  static inline bool E20_Parse(absl::string_view name, E20* value) {
    return Message8_M2_M5_M13_M17_M29_M50_M72_E20_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.M77 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* release_f_2();
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* value);
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.E20 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 value);

  private:
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M17_M29_M50_M72_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80() : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& a, Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M85 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& f_3(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>& f_3() const;
  // optional float f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85 > f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M87 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M96 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96;
  using M97 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF0FieldNumber = 2,
    kF3FieldNumber = 4,
    kF1FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& f_4(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>& f_4() const;
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M96 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* release_f_3();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& _internal_f_3() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* _internal_mutable_f_3();

  public:
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      103, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97 > f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* f_3_;
    ::int64_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M20_M46 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M20.M46) */ {
 public:
  inline Message8_M1_M4_M15_M20_M46() : Message8_M1_M4_M15_M20_M46(nullptr) {}
  ~Message8_M1_M4_M15_M20_M46() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M20_M46(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M20_M46(const Message8_M1_M4_M15_M20_M46& from) : Message8_M1_M4_M15_M20_M46(nullptr, from) {}
  inline Message8_M1_M4_M15_M20_M46(Message8_M1_M4_M15_M20_M46&& from) noexcept
      : Message8_M1_M4_M15_M20_M46(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M20_M46& operator=(const Message8_M1_M4_M15_M20_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M20_M46& operator=(Message8_M1_M4_M15_M20_M46&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M20_M46& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M20_M46* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M20_M46*>(
        &_Message8_M1_M4_M15_M20_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Message8_M1_M4_M15_M20_M46& a, Message8_M1_M4_M15_M20_M46& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M20_M46* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M20_M46* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M20_M46* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M20_M46>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M20_M46& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M20_M46& from) { Message8_M1_M4_M15_M20_M46::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M20_M46* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M20.M46"; }

 protected:
  explicit Message8_M1_M4_M15_M20_M46(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M20_M46(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M20_M46& from);
  Message8_M1_M4_M15_M20_M46(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M20_M46&& from) noexcept
      : Message8_M1_M4_M15_M20_M46(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M56 = Message8_M1_M4_M15_M20_M46_M56;
  using E11 = Message8_M1_M4_M15_M20_M46_E11;
  static constexpr E11 E11_UNSPECIFIED = Message8_M1_M4_M15_M20_M46_E11_E11_UNSPECIFIED;
  static constexpr E11 E11_CONST_1 = Message8_M1_M4_M15_M20_M46_E11_E11_CONST_1;
  static constexpr E11 E11_CONST_2 = Message8_M1_M4_M15_M20_M46_E11_E11_CONST_2;
  static constexpr E11 E11_CONST_3 = Message8_M1_M4_M15_M20_M46_E11_E11_CONST_3;
  static constexpr E11 E11_CONST_4 = Message8_M1_M4_M15_M20_M46_E11_E11_CONST_4;
  static constexpr E11 E11_CONST_5 = Message8_M1_M4_M15_M20_M46_E11_E11_CONST_5;
  static inline bool E11_IsValid(int value) {
    return Message8_M1_M4_M15_M20_M46_E11_IsValid(value);
  }
  static constexpr E11 E11_MIN = Message8_M1_M4_M15_M20_M46_E11_E11_MIN;
  static constexpr E11 E11_MAX = Message8_M1_M4_M15_M20_M46_E11_E11_MAX;
  static constexpr int E11_ARRAYSIZE = Message8_M1_M4_M15_M20_M46_E11_E11_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E11_descriptor() {
    return Message8_M1_M4_M15_M20_M46_E11_descriptor();
  }
  template <typename T>
  static inline const std::string& E11_Name(T value) {
    return Message8_M1_M4_M15_M20_M46_E11_Name(value);
  }
  static inline bool E11_Parse(absl::string_view name, E11* value) {
    return Message8_M1_M4_M15_M20_M46_E11_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      for (int i = 0; i < f_0_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).data())), f_0(i).size()));
      }
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
        sizes_list.push_back(f_0(i).size());
      }
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_0_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_0().size());
      for (int i = 0; i < f_0_size(); ++i) {
        sizes.push_back(f_0(i).size());
      }
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_0_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0(i).c_str())));
      }
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_0_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_0_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_0(std::move(tmp_str));
      }
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF5FieldNumber = 6,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
  };
  // repeated bytes f_0 = 1;
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  const std::string& f_0(int index) const;
  std::string* mutable_f_0(int index);
  void set_f_0(int index, const std::string& value);
  void set_f_0(int index, std::string&& value);
  void set_f_0(int index, const char* value);
  void set_f_0(int index, const void* value, std::size_t size);
  void set_f_0(int index, absl::string_view value);
  std::string* add_f_0();
  void add_f_0(const std::string& value);
  void add_f_0(std::string&& value);
  void add_f_0(const char* value);
  void add_f_0(const void* value, std::size_t size);
  void add_f_0(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_0() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56 f_5 = 6;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* release_f_5();
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56& _internal_f_5() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* _internal_mutable_f_5();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M20.M46.E11 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 f_1() const;
  void set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 value);

  public:
  // optional float f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  float f_2() const;
  void set_f_2(float value);

  private:
  float _internal_f_2() const;
  void _internal_set_f_2(float value);

  public:
  // optional int64 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional float f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  float f_4() const;
  void set_f_4(float value);

  private:
  float _internal_f_4() const;
  void _internal_set_f_4(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M20.M46)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M20_M46_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_0_;
    ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* f_5_;
    int f_1_;
    float f_2_;
    ::int64_t f_3_;
    float f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M20_M45 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M20.M45) */ {
 public:
  inline Message8_M1_M4_M15_M20_M45() : Message8_M1_M4_M15_M20_M45(nullptr) {}
  ~Message8_M1_M4_M15_M20_M45() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M20_M45(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M20_M45(const Message8_M1_M4_M15_M20_M45& from) : Message8_M1_M4_M15_M20_M45(nullptr, from) {}
  inline Message8_M1_M4_M15_M20_M45(Message8_M1_M4_M15_M20_M45&& from) noexcept
      : Message8_M1_M4_M15_M20_M45(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M20_M45& operator=(const Message8_M1_M4_M15_M20_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M20_M45& operator=(Message8_M1_M4_M15_M20_M45&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M20_M45& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M20_M45* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M20_M45*>(
        &_Message8_M1_M4_M15_M20_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Message8_M1_M4_M15_M20_M45& a, Message8_M1_M4_M15_M20_M45& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M20_M45* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M20_M45* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M20_M45* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M20_M45>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M20_M45& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M20_M45& from) { Message8_M1_M4_M15_M20_M45::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M20_M45* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M20.M45"; }

 protected:
  explicit Message8_M1_M4_M15_M20_M45(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M20_M45(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M20_M45& from);
  Message8_M1_M4_M15_M20_M45(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M20_M45&& from) noexcept
      : Message8_M1_M4_M15_M20_M45(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M57 = Message8_M1_M4_M15_M20_M45_M57;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M20.M45)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M20_M45_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16_M33_M53_M69 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69) */ {
 public:
  inline Message8_M1_M4_M15_M16_M33_M53_M69() : Message8_M1_M4_M15_M16_M33_M53_M69(nullptr) {}
  ~Message8_M1_M4_M15_M16_M33_M53_M69() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16_M33_M53_M69(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16_M33_M53_M69(const Message8_M1_M4_M15_M16_M33_M53_M69& from) : Message8_M1_M4_M15_M16_M33_M53_M69(nullptr, from) {}
  inline Message8_M1_M4_M15_M16_M33_M53_M69(Message8_M1_M4_M15_M16_M33_M53_M69&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53_M69(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16_M33_M53_M69& operator=(const Message8_M1_M4_M15_M16_M33_M53_M69& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16_M33_M53_M69& operator=(Message8_M1_M4_M15_M16_M33_M53_M69&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16_M33_M53_M69& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16_M33_M53_M69* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16_M33_M53_M69*>(
        &_Message8_M1_M4_M15_M16_M33_M53_M69_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Message8_M1_M4_M15_M16_M33_M53_M69& a, Message8_M1_M4_M15_M16_M33_M53_M69& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16_M33_M53_M69* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16_M33_M53_M69* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16_M33_M53_M69* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16_M33_M53_M69>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16_M33_M53_M69& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16_M33_M53_M69& from) { Message8_M1_M4_M15_M16_M33_M53_M69::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16_M33_M53_M69* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69"; }

 protected:
  explicit Message8_M1_M4_M15_M16_M33_M53_M69(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16_M33_M53_M69(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16_M33_M53_M69& from);
  Message8_M1_M4_M15_M16_M33_M53_M69(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16_M33_M53_M69&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53_M69(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M76 = Message8_M1_M4_M15_M16_M33_M53_M69_M76;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* release_f_2();
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76& _internal_f_2() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* _internal_mutable_f_2();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_M33_M53_M69_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M27_M39 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M27.M39) */ {
 public:
  inline Message8_M1_M11_M14_M27_M39() : Message8_M1_M11_M14_M27_M39(nullptr) {}
  ~Message8_M1_M11_M14_M27_M39() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M27_M39(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M27_M39(const Message8_M1_M11_M14_M27_M39& from) : Message8_M1_M11_M14_M27_M39(nullptr, from) {}
  inline Message8_M1_M11_M14_M27_M39(Message8_M1_M11_M14_M27_M39&& from) noexcept
      : Message8_M1_M11_M14_M27_M39(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M27_M39& operator=(const Message8_M1_M11_M14_M27_M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M27_M39& operator=(Message8_M1_M11_M14_M27_M39&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M27_M39& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M27_M39* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M27_M39*>(
        &_Message8_M1_M11_M14_M27_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 51;
  friend void swap(Message8_M1_M11_M14_M27_M39& a, Message8_M1_M11_M14_M27_M39& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M27_M39* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M27_M39* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M27_M39* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M27_M39>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M27_M39& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M27_M39& from) { Message8_M1_M11_M14_M27_M39::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M27_M39* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M27.M39"; }

 protected:
  explicit Message8_M1_M11_M14_M27_M39(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M27_M39(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M27_M39& from);
  Message8_M1_M11_M14_M27_M39(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M27_M39&& from) noexcept
      : Message8_M1_M11_M14_M27_M39(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M58 = Message8_M1_M11_M14_M27_M39_M58;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M1.M11.M14.M27.M39.M58 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58& f_1(int index) const;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>& f_1() const;
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M27.M39)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M27_M39_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58 > f_1_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M19 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M19) */ {
 public:
  inline Message8_M1_M11_M14_M19() : Message8_M1_M11_M14_M19(nullptr) {}
  ~Message8_M1_M11_M14_M19() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M19(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M19(const Message8_M1_M11_M14_M19& from) : Message8_M1_M11_M14_M19(nullptr, from) {}
  inline Message8_M1_M11_M14_M19(Message8_M1_M11_M14_M19&& from) noexcept
      : Message8_M1_M11_M14_M19(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M19& operator=(const Message8_M1_M11_M14_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M19& operator=(Message8_M1_M11_M14_M19&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M19& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M19* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M19*>(
        &_Message8_M1_M11_M14_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 48;
  friend void swap(Message8_M1_M11_M14_M19& a, Message8_M1_M11_M14_M19& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M19* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M19* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M19* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M19>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M19& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M19& from) { Message8_M1_M11_M14_M19::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M19* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M19"; }

 protected:
  explicit Message8_M1_M11_M14_M19(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M19(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M19& from);
  Message8_M1_M11_M14_M19(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M19&& from) noexcept
      : Message8_M1_M11_M14_M19(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M37 = Message8_M1_M11_M14_M19_M37;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message8.M1.M11.M14.M19.M37 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message8_M1_M11_M14_M19_M37* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message8_M1_M11_M14_M19_M37& f_3(int index) const;
  ::fleetbench::proto::Message8_M1_M11_M14_M19_M37* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>& f_3() const;
  // optional string f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M19)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M19_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M11_M14_M19_M37 > f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M18 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M18) */ {
 public:
  inline Message8_M1_M11_M14_M18() : Message8_M1_M11_M14_M18(nullptr) {}
  ~Message8_M1_M11_M14_M18() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M18(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M18(const Message8_M1_M11_M14_M18& from) : Message8_M1_M11_M14_M18(nullptr, from) {}
  inline Message8_M1_M11_M14_M18(Message8_M1_M11_M14_M18&& from) noexcept
      : Message8_M1_M11_M14_M18(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M18& operator=(const Message8_M1_M11_M14_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M18& operator=(Message8_M1_M11_M14_M18&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M18& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M18* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M18*>(
        &_Message8_M1_M11_M14_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(Message8_M1_M11_M14_M18& a, Message8_M1_M11_M14_M18& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M18* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M18* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M18* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M18>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M18& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M18& from) { Message8_M1_M11_M14_M18::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M18* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M18"; }

 protected:
  explicit Message8_M1_M11_M14_M18(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M18(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M18& from);
  Message8_M1_M11_M14_M18(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M18&& from) noexcept
      : Message8_M1_M11_M14_M18(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M42 = Message8_M1_M11_M14_M18_M42;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M11.M14.M18.M42 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M11_M14_M18_M42& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* release_f_1();
  ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M11_M14_M18_M42* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M11_M14_M18_M42* value);
  ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M11_M14_M18_M42& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M18)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M18_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M43 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M43) */ {
 public:
  inline Message8_M2_M6_M12_M24_M43() : Message8_M2_M6_M12_M24_M43(nullptr) {}
  ~Message8_M2_M6_M12_M24_M43() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M43(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M43(const Message8_M2_M6_M12_M24_M43& from) : Message8_M2_M6_M12_M24_M43(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M43(Message8_M2_M6_M12_M24_M43&& from) noexcept
      : Message8_M2_M6_M12_M24_M43(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M43& operator=(const Message8_M2_M6_M12_M24_M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M43& operator=(Message8_M2_M6_M12_M24_M43&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M43& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M43* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M43*>(
        &_Message8_M2_M6_M12_M24_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 89;
  friend void swap(Message8_M2_M6_M12_M24_M43& a, Message8_M2_M6_M12_M24_M43& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M43* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M43* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M43* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M43>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M43& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M43& from) { Message8_M2_M6_M12_M24_M43::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M43* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M43"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M43(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M43(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M43& from);
  Message8_M2_M6_M12_M24_M43(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M43&& from) noexcept
      : Message8_M2_M6_M12_M24_M43(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M49 = Message8_M2_M6_M12_M24_M43_M49;
  using M51 = Message8_M2_M6_M12_M24_M43_M51;
  using E10 = Message8_M2_M6_M12_M24_M43_E10;
  static constexpr E10 E10_UNSPECIFIED = Message8_M2_M6_M12_M24_M43_E10_E10_UNSPECIFIED;
  static constexpr E10 E10_CONST_1 = Message8_M2_M6_M12_M24_M43_E10_E10_CONST_1;
  static constexpr E10 E10_CONST_2 = Message8_M2_M6_M12_M24_M43_E10_E10_CONST_2;
  static constexpr E10 E10_CONST_3 = Message8_M2_M6_M12_M24_M43_E10_E10_CONST_3;
  static constexpr E10 E10_CONST_4 = Message8_M2_M6_M12_M24_M43_E10_E10_CONST_4;
  static constexpr E10 E10_CONST_5 = Message8_M2_M6_M12_M24_M43_E10_E10_CONST_5;
  static inline bool E10_IsValid(int value) {
    return Message8_M2_M6_M12_M24_M43_E10_IsValid(value);
  }
  static constexpr E10 E10_MIN = Message8_M2_M6_M12_M24_M43_E10_E10_MIN;
  static constexpr E10 E10_MAX = Message8_M2_M6_M12_M24_M43_E10_E10_MAX;
  static constexpr int E10_ARRAYSIZE = Message8_M2_M6_M12_M24_M43_E10_E10_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E10_descriptor() {
    return Message8_M2_M6_M12_M24_M43_E10_descriptor();
  }
  template <typename T>
  static inline const std::string& E10_Name(T value) {
    return Message8_M2_M6_M12_M24_M43_E10_Name(value);
  }
  static inline bool E10_Parse(absl::string_view name, E10* value) {
    return Message8_M2_M6_M12_M24_M43_E10_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* release_f_2();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* release_f_3();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.E10 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M43)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M43_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* f_2_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* f_3_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35_M52 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35_M52() : Message8_M2_M6_M12_M24_M35_M52(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35_M52() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35_M52(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35_M52(const Message8_M2_M6_M12_M24_M35_M52& from) : Message8_M2_M6_M12_M24_M35_M52(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35_M52(Message8_M2_M6_M12_M24_M35_M52&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35_M52& operator=(const Message8_M2_M6_M12_M24_M35_M52& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35_M52& operator=(Message8_M2_M6_M12_M24_M35_M52&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35_M52& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35_M52* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35_M52*>(
        &_Message8_M2_M6_M12_M24_M35_M52_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 79;
  friend void swap(Message8_M2_M6_M12_M24_M35_M52& a, Message8_M2_M6_M12_M24_M35_M52& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35_M52* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35_M52* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35_M52* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35_M52>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35_M52& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35_M52& from) { Message8_M2_M6_M12_M24_M35_M52::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35_M52* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35_M52(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35_M52(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35_M52& from);
  Message8_M2_M6_M12_M24_M35_M52(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35_M52&& from) noexcept
      : Message8_M2_M6_M12_M24_M35_M52(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M64 = Message8_M2_M6_M12_M24_M35_M52_M64;
  using M67 = Message8_M2_M6_M12_M24_M35_M52_M67;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* release_f_1();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64& _internal_f_1() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M67 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* release_f_3();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* _internal_mutable_f_3();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_M52_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* f_1_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M22_M41 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M22.M41) */ {
 public:
  inline Message8_M2_M6_M12_M22_M41() : Message8_M2_M6_M12_M22_M41(nullptr) {}
  ~Message8_M2_M6_M12_M22_M41() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M22_M41(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M22_M41(const Message8_M2_M6_M12_M22_M41& from) : Message8_M2_M6_M12_M22_M41(nullptr, from) {}
  inline Message8_M2_M6_M12_M22_M41(Message8_M2_M6_M12_M22_M41&& from) noexcept
      : Message8_M2_M6_M12_M22_M41(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M22_M41& operator=(const Message8_M2_M6_M12_M22_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M22_M41& operator=(Message8_M2_M6_M12_M22_M41&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M22_M41& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M22_M41* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M22_M41*>(
        &_Message8_M2_M6_M12_M22_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 74;
  friend void swap(Message8_M2_M6_M12_M22_M41& a, Message8_M2_M6_M12_M22_M41& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M22_M41* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M22_M41* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M22_M41* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M22_M41>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M22_M41& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M22_M41& from) { Message8_M2_M6_M12_M22_M41::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M22_M41* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M22.M41"; }

 protected:
  explicit Message8_M2_M6_M12_M22_M41(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M22_M41(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M22_M41& from);
  Message8_M2_M6_M12_M22_M41(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M22_M41&& from) noexcept
      : Message8_M2_M6_M12_M22_M41(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M59 = Message8_M2_M6_M12_M22_M41_M59;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 5,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* release_f_3();
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* _internal_mutable_f_3();

  public:
  // optional float f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M22.M41)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M22_M41_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M21_M34 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M21.M34) */ {
 public:
  inline Message8_M2_M6_M12_M21_M34() : Message8_M2_M6_M12_M21_M34(nullptr) {}
  ~Message8_M2_M6_M12_M21_M34() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M21_M34(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M21_M34(const Message8_M2_M6_M12_M21_M34& from) : Message8_M2_M6_M12_M21_M34(nullptr, from) {}
  inline Message8_M2_M6_M12_M21_M34(Message8_M2_M6_M12_M21_M34&& from) noexcept
      : Message8_M2_M6_M12_M21_M34(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M21_M34& operator=(const Message8_M2_M6_M12_M21_M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M21_M34& operator=(Message8_M2_M6_M12_M21_M34&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M21_M34& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M21_M34* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M21_M34*>(
        &_Message8_M2_M6_M12_M21_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 70;
  friend void swap(Message8_M2_M6_M12_M21_M34& a, Message8_M2_M6_M12_M21_M34& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M21_M34* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M21_M34* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M21_M34* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M21_M34>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M21_M34& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M21_M34& from) { Message8_M2_M6_M12_M21_M34::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M21_M34* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M21.M34"; }

 protected:
  explicit Message8_M2_M6_M12_M21_M34(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M21_M34(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M21_M34& from);
  Message8_M2_M6_M12_M21_M34(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M21_M34&& from) noexcept
      : Message8_M2_M6_M12_M21_M34(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M55 = Message8_M2_M6_M12_M21_M34_M55;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55& f_1(int index) const;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>& f_1() const;
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M21.M34)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M21_M34_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55 > f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M17_M29_M50 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50) */ {
 public:
  inline Message8_M2_M5_M13_M17_M29_M50() : Message8_M2_M5_M13_M17_M29_M50(nullptr) {}
  ~Message8_M2_M5_M13_M17_M29_M50() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M17_M29_M50(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M17_M29_M50(const Message8_M2_M5_M13_M17_M29_M50& from) : Message8_M2_M5_M13_M17_M29_M50(nullptr, from) {}
  inline Message8_M2_M5_M13_M17_M29_M50(Message8_M2_M5_M13_M17_M29_M50&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M50(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M17_M29_M50& operator=(const Message8_M2_M5_M13_M17_M29_M50& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M17_M29_M50& operator=(Message8_M2_M5_M13_M17_M29_M50&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M17_M29_M50& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M17_M29_M50* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M17_M29_M50*>(
        &_Message8_M2_M5_M13_M17_M29_M50_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 59;
  friend void swap(Message8_M2_M5_M13_M17_M29_M50& a, Message8_M2_M5_M13_M17_M29_M50& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M17_M29_M50* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M17_M29_M50* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M17_M29_M50* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M17_M29_M50>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M17_M29_M50& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M17_M29_M50& from) { Message8_M2_M5_M13_M17_M29_M50::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M17_M29_M50* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50"; }

 protected:
  explicit Message8_M2_M5_M13_M17_M29_M50(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M17_M29_M50(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M17_M29_M50& from);
  Message8_M2_M5_M13_M17_M29_M50(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M17_M29_M50&& from) noexcept
      : Message8_M2_M5_M13_M17_M29_M50(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M72 = Message8_M2_M5_M13_M17_M29_M50_M72;
  using E13 = Message8_M2_M5_M13_M17_M29_M50_E13;
  static constexpr E13 E13_UNSPECIFIED = Message8_M2_M5_M13_M17_M29_M50_E13_E13_UNSPECIFIED;
  static constexpr E13 E13_CONST_1 = Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_1;
  static constexpr E13 E13_CONST_2 = Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_2;
  static constexpr E13 E13_CONST_3 = Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_3;
  static constexpr E13 E13_CONST_4 = Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_4;
  static constexpr E13 E13_CONST_5 = Message8_M2_M5_M13_M17_M29_M50_E13_E13_CONST_5;
  static inline bool E13_IsValid(int value) {
    return Message8_M2_M5_M13_M17_M29_M50_E13_IsValid(value);
  }
  static constexpr E13 E13_MIN = Message8_M2_M5_M13_M17_M29_M50_E13_E13_MIN;
  static constexpr E13 E13_MAX = Message8_M2_M5_M13_M17_M29_M50_E13_E13_MAX;
  static constexpr int E13_ARRAYSIZE = Message8_M2_M5_M13_M17_M29_M50_E13_E13_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E13_descriptor() {
    return Message8_M2_M5_M13_M17_M29_M50_E13_descriptor();
  }
  template <typename T>
  static inline const std::string& E13_Name(T value) {
    return Message8_M2_M5_M13_M17_M29_M50_E13_Name(value);
  }
  static inline bool E13_Parse(absl::string_view name, E13* value) {
    return Message8_M2_M5_M13_M17_M29_M50_E13_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(int));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(int));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_0().data())));
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(int), 0);
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 5,
  };
  // repeated .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.E13 f_0 = 2 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  public:
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13 f_0(int index) const;
  void set_f_0(int index, ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13 value);
  void add_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13 value);
  const ::google::protobuf::RepeatedField<int>& f_0() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_0();

  public:
  // repeated .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72 f_2 = 5;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72& f_2(int index) const;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>& f_2() const;
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M17_M29_M50_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<int> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72 > f_2_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M79 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79() : Message8_M1_M4_M15_M23_M40_M48_M73_M79(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M79() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M79(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79(const Message8_M1_M4_M15_M23_M40_M48_M73_M79& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M79(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79(Message8_M1_M4_M15_M23_M40_M48_M73_M79&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M79(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M79& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M79& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M79&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M79& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M79* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M79*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M79_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M79& a, Message8_M1_M4_M15_M23_M40_M48_M73_M79& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M79* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M79* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M79* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M79>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M79& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M79& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M79::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M79* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M79(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M79(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M79& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M79(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M79&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M79(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M80 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80;
  using E21 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21;
  static constexpr E21 E21_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_UNSPECIFIED;
  static constexpr E21 E21_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_1;
  static constexpr E21 E21_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_2;
  static constexpr E21 E21_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_3;
  static constexpr E21 E21_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_4;
  static constexpr E21 E21_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_CONST_5;
  static inline bool E21_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_IsValid(value);
  }
  static constexpr E21 E21_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_MIN;
  static constexpr E21 E21_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_MAX;
  static constexpr int E21_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_E21_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E21_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_descriptor();
  }
  template <typename T>
  static inline const std::string& E21_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_Name(value);
  }
  static inline bool E21_Parse(absl::string_view name, E21* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_Parse(name, value);
  }
  using E22 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22;
  static constexpr E22 E22_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_UNSPECIFIED;
  static constexpr E22 E22_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_1;
  static constexpr E22 E22_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_2;
  static constexpr E22 E22_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_3;
  static constexpr E22 E22_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_4;
  static constexpr E22 E22_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_CONST_5;
  static inline bool E22_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_IsValid(value);
  }
  static constexpr E22 E22_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_MIN;
  static constexpr E22 E22_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_MAX;
  static constexpr int E22_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_E22_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E22_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_descriptor();
  }
  template <typename T>
  static inline const std::string& E22_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_Name(value);
  }
  static inline bool E22_Parse(absl::string_view name, E22* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_Parse(name, value);
  }
  using E23 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23;
  static constexpr E23 E23_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_UNSPECIFIED;
  static constexpr E23 E23_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_1;
  static constexpr E23 E23_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_2;
  static constexpr E23 E23_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_3;
  static constexpr E23 E23_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_4;
  static constexpr E23 E23_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_CONST_5;
  static inline bool E23_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_IsValid(value);
  }
  static constexpr E23 E23_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_MIN;
  static constexpr E23 E23_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_MAX;
  static constexpr int E23_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_E23_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E23_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_descriptor();
  }
  template <typename T>
  static inline const std::string& E23_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_Name(value);
  }
  static inline bool E23_Parse(absl::string_view name, E23* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_Parse(name, value);
  }
  using E24 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24;
  static constexpr E24 E24_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_UNSPECIFIED;
  static constexpr E24 E24_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_1;
  static constexpr E24 E24_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_2;
  static constexpr E24 E24_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_3;
  static constexpr E24 E24_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_4;
  static constexpr E24 E24_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_CONST_5;
  static inline bool E24_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_IsValid(value);
  }
  static constexpr E24 E24_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_MIN;
  static constexpr E24 E24_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_MAX;
  static constexpr int E24_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_E24_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E24_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_descriptor();
  }
  template <typename T>
  static inline const std::string& E24_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_Name(value);
  }
  static inline bool E24_Parse(absl::string_view name, E24* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_Parse(name, value);
  }
  using E25 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25;
  static constexpr E25 E25_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_UNSPECIFIED;
  static constexpr E25 E25_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_1;
  static constexpr E25 E25_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_2;
  static constexpr E25 E25_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_3;
  static constexpr E25 E25_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_4;
  static constexpr E25 E25_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_CONST_5;
  static inline bool E25_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_IsValid(value);
  }
  static constexpr E25 E25_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_MIN;
  static constexpr E25 E25_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_MAX;
  static constexpr int E25_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_E25_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E25_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_descriptor();
  }
  template <typename T>
  static inline const std::string& E25_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_Name(value);
  }
  static inline bool E25_Parse(absl::string_view name, E25* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_Parse(name, value);
  }
  using E26 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26;
  static constexpr E26 E26_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_UNSPECIFIED;
  static constexpr E26 E26_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_1;
  static constexpr E26 E26_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_2;
  static constexpr E26 E26_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_3;
  static constexpr E26 E26_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_4;
  static constexpr E26 E26_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_CONST_5;
  static inline bool E26_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_IsValid(value);
  }
  static constexpr E26 E26_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_MIN;
  static constexpr E26 E26_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_MAX;
  static constexpr int E26_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_E26_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E26_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_descriptor();
  }
  template <typename T>
  static inline const std::string& E26_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_Name(value);
  }
  static inline bool E26_Parse(absl::string_view name, E26* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_Parse(name, value);
  }
  using E27 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27;
  static constexpr E27 E27_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_UNSPECIFIED;
  static constexpr E27 E27_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_1;
  static constexpr E27 E27_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_2;
  static constexpr E27 E27_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_3;
  static constexpr E27 E27_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_4;
  static constexpr E27 E27_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_CONST_5;
  static inline bool E27_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_IsValid(value);
  }
  static constexpr E27 E27_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_MIN;
  static constexpr E27 E27_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_MAX;
  static constexpr int E27_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_E27_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E27_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_descriptor();
  }
  template <typename T>
  static inline const std::string& E27_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_Name(value);
  }
  static inline bool E27_Parse(absl::string_view name, E27* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_Parse(name, value);
  }
  using E28 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28;
  static constexpr E28 E28_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_UNSPECIFIED;
  static constexpr E28 E28_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_1;
  static constexpr E28 E28_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_2;
  static constexpr E28 E28_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_3;
  static constexpr E28 E28_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_4;
  static constexpr E28 E28_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_CONST_5;
  static inline bool E28_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_IsValid(value);
  }
  static constexpr E28 E28_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_MIN;
  static constexpr E28 E28_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_MAX;
  static constexpr int E28_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_E28_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E28_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_descriptor();
  }
  template <typename T>
  static inline const std::string& E28_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_Name(value);
  }
  static inline bool E28_Parse(absl::string_view name, E28* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_Parse(name, value);
  }
  using E29 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29;
  static constexpr E29 E29_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_UNSPECIFIED;
  static constexpr E29 E29_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_1;
  static constexpr E29 E29_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_2;
  static constexpr E29 E29_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_3;
  static constexpr E29 E29_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_4;
  static constexpr E29 E29_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_CONST_5;
  static inline bool E29_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_IsValid(value);
  }
  static constexpr E29 E29_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_MIN;
  static constexpr E29 E29_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_MAX;
  static constexpr int E29_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_E29_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E29_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_descriptor();
  }
  template <typename T>
  static inline const std::string& E29_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_Name(value);
  }
  static inline bool E29_Parse(absl::string_view name, E29* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_74_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_74())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_19().data())), f_19().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_56().data())), f_56().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_72().data())), f_72().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_73_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73(i).data())), f_73(i).size()));
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())), f_11().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())), f_14().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())), f_17().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())), f_18().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())), f_24().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())), f_31().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())), f_34().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())), f_43().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())), f_44().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())), f_46().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())), f_52().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())), f_61().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())), f_75().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())), f_77().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())), f_78().size()));
      mutable_f_117()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_74_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_74()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_6().data())));
      sizes_list.push_back(f_6().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_19().data())));
      sizes_list.push_back(f_19().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_56().data())));
      sizes_list.push_back(f_56().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_72().data())));
      sizes_list.push_back(f_72().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_73().size());
      for (int i = 0; i < f_73_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73(i).c_str())));
        sizes_list.push_back(f_73(i).size());
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      sizes_list.push_back(f_11().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      sizes_list.push_back(f_14().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      sizes_list.push_back(f_17().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      sizes_list.push_back(f_18().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      sizes_list.push_back(f_24().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      sizes_list.push_back(f_31().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      sizes_list.push_back(f_34().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      sizes_list.push_back(f_43().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      sizes_list.push_back(f_44().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      sizes_list.push_back(f_46().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      sizes_list.push_back(f_52().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())));
      sizes_list.push_back(f_61().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())));
      sizes_list.push_back(f_75().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())));
      sizes_list.push_back(f_77().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      sizes_list.push_back(f_78().size());
      mutable_f_117()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_74_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_6().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_19().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_56().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_72().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_73_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73(i).c_str())));
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      mutable_f_117()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_74_);
      sizes.push_back(end_addr - start_addr + sizeof(f_74()));
      sizes.push_back(f_6().size() * sizeof(int));
      sizes.push_back(f_19().size() * sizeof(::int32_t));
      sizes.push_back(f_56().size() * sizeof(::int64_t));
      sizes.push_back(f_72().size() * sizeof(::int32_t));
      sizes.push_back(f_73().size());
      for (int i = 0; i < f_73_size(); ++i) {
        sizes.push_back(f_73(i).size());
      }
      sizes.push_back(f_11().size());
      sizes.push_back(f_14().size());
      sizes.push_back(f_17().size());
      sizes.push_back(f_18().size());
      sizes.push_back(f_24().size());
      sizes.push_back(f_31().size());
      sizes.push_back(f_34().size());
      sizes.push_back(f_43().size());
      sizes.push_back(f_44().size());
      sizes.push_back(f_46().size());
      sizes.push_back(f_52().size());
      sizes.push_back(f_61().size());
      sizes.push_back(f_75().size());
      sizes.push_back(f_77().size());
      sizes.push_back(f_78().size());
      mutable_f_117()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_74_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_6()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_6().data())));
      mutable_f_19()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_19().data())));
      mutable_f_56()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_56().data())));
      mutable_f_72()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_72().data())));
      size_t num_f_73_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_73_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_73(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_73(i).c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_11().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_14(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_14().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_17().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_18(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_18().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_31().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_34(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_34().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_43(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_43().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_44().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_52(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_52().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_61(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_75(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_75().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_77(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_77().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_78(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_78().c_str())));
      }
      idx = mutable_f_117()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_6()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_19()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_56()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      mutable_f_72()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_73_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_73_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_73(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_11(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_14(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_17(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_18(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_31(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_34(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_43(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_44(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_52(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_61(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_75(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_77(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_78(std::move(tmp_str));
        }
      }
      idx = mutable_f_117()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF6FieldNumber = 9,
    kF19FieldNumber = 30,
    kF56FieldNumber = 87,
    kF72FieldNumber = 111,
    kF73FieldNumber = 112,
    kF11FieldNumber = 16,
    kF14FieldNumber = 20,
    kF17FieldNumber = 25,
    kF18FieldNumber = 27,
    kF24FieldNumber = 36,
    kF31FieldNumber = 49,
    kF34FieldNumber = 55,
    kF43FieldNumber = 68,
    kF44FieldNumber = 69,
    kF46FieldNumber = 74,
    kF52FieldNumber = 83,
    kF61FieldNumber = 94,
    kF75FieldNumber = 114,
    kF77FieldNumber = 116,
    kF78FieldNumber = 117,
    kF117FieldNumber = 118,
    kF2FieldNumber = 4,
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF4FieldNumber = 7,
    kF5FieldNumber = 8,
    kF7FieldNumber = 10,
    kF8FieldNumber = 11,
    kF9FieldNumber = 13,
    kF10FieldNumber = 15,
    kF12FieldNumber = 17,
    kF13FieldNumber = 19,
    kF16FieldNumber = 23,
    kF20FieldNumber = 31,
    kF21FieldNumber = 33,
    kF22FieldNumber = 34,
    kF23FieldNumber = 35,
    kF25FieldNumber = 39,
    kF26FieldNumber = 41,
    kF0FieldNumber = 1,
    kF15FieldNumber = 21,
    kF37FieldNumber = 60,
    kF53FieldNumber = 84,
    kF27FieldNumber = 42,
    kF28FieldNumber = 44,
    kF29FieldNumber = 46,
    kF30FieldNumber = 47,
    kF32FieldNumber = 51,
    kF33FieldNumber = 53,
    kF35FieldNumber = 56,
    kF36FieldNumber = 57,
    kF38FieldNumber = 62,
    kF39FieldNumber = 63,
    kF40FieldNumber = 64,
    kF41FieldNumber = 65,
    kF42FieldNumber = 66,
    kF45FieldNumber = 71,
    kF47FieldNumber = 75,
    kF48FieldNumber = 76,
    kF49FieldNumber = 78,
    kF51FieldNumber = 81,
    kF50FieldNumber = 80,
    kF54FieldNumber = 85,
    kF55FieldNumber = 86,
    kF58FieldNumber = 90,
    kF60FieldNumber = 93,
    kF59FieldNumber = 92,
    kF62FieldNumber = 95,
    kF57FieldNumber = 89,
    kF65FieldNumber = 99,
    kF66FieldNumber = 101,
    kF64FieldNumber = 98,
    kF63FieldNumber = 97,
    kF67FieldNumber = 102,
    kF69FieldNumber = 105,
    kF68FieldNumber = 104,
    kF70FieldNumber = 107,
    kF71FieldNumber = 109,
    kF76FieldNumber = 115,
    kF74FieldNumber = 113,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E22 f_6 = 9 [packed = true];
  int f_6_size() const;
  private:
  int _internal_f_6_size() const;

  public:
  void clear_f_6() ;
  public:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 f_6(int index) const;
  void set_f_6(int index, ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 value);
  void add_f_6(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 value);
  const ::google::protobuf::RepeatedField<int>& f_6() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_6();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_6() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_6();

  public:
  // repeated int32 f_19 = 30 [packed = true];
  int f_19_size() const;
  private:
  int _internal_f_19_size() const;

  public:
  void clear_f_19() ;
  ::int32_t f_19(int index) const;
  void set_f_19(int index, ::int32_t value);
  void add_f_19(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_19() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_19();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_19() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_19();

  public:
  // repeated sint64 f_56 = 87 [packed = true];
  int f_56_size() const;
  private:
  int _internal_f_56_size() const;

  public:
  void clear_f_56() ;
  ::int64_t f_56(int index) const;
  void set_f_56(int index, ::int64_t value);
  void add_f_56(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_56() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_56();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_56() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_56();

  public:
  // repeated int32 f_72 = 111 [packed = true];
  int f_72_size() const;
  private:
  int _internal_f_72_size() const;

  public:
  void clear_f_72() ;
  ::int32_t f_72(int index) const;
  void set_f_72(int index, ::int32_t value);
  void add_f_72(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_72() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_72();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_72() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_72();

  public:
  // repeated string f_73 = 112;
  int f_73_size() const;
  private:
  int _internal_f_73_size() const;

  public:
  void clear_f_73() ;
  const std::string& f_73(int index) const;
  std::string* mutable_f_73(int index);
  void set_f_73(int index, const std::string& value);
  void set_f_73(int index, std::string&& value);
  void set_f_73(int index, const char* value);
  void set_f_73(int index, const char* value, std::size_t size);
  void set_f_73(int index, absl::string_view value);
  std::string* add_f_73();
  void add_f_73(const std::string& value);
  void add_f_73(std::string&& value);
  void add_f_73(const char* value);
  void add_f_73(const char* value, std::size_t size);
  void add_f_73(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_73() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_73();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_73() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_73();

  public:
  // optional string f_11 = 16;
  bool has_f_11() const;
  void clear_f_11() ;
  const std::string& f_11() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_11(Arg_&& arg, Args_... args);
  std::string* mutable_f_11();
  PROTOBUF_NODISCARD std::string* release_f_11();
  void set_allocated_f_11(std::string* value);

  private:
  const std::string& _internal_f_11() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_11(
      const std::string& value);
  std::string* _internal_mutable_f_11();

  public:
  // optional bytes f_14 = 20;
  bool has_f_14() const;
  void clear_f_14() ;
  const std::string& f_14() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_14(Arg_&& arg, Args_... args);
  std::string* mutable_f_14();
  PROTOBUF_NODISCARD std::string* release_f_14();
  void set_allocated_f_14(std::string* value);

  private:
  const std::string& _internal_f_14() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_14(
      const std::string& value);
  std::string* _internal_mutable_f_14();

  public:
  // optional string f_17 = 25;
  bool has_f_17() const;
  void clear_f_17() ;
  const std::string& f_17() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_17(Arg_&& arg, Args_... args);
  std::string* mutable_f_17();
  PROTOBUF_NODISCARD std::string* release_f_17();
  void set_allocated_f_17(std::string* value);

  private:
  const std::string& _internal_f_17() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_17(
      const std::string& value);
  std::string* _internal_mutable_f_17();

  public:
  // optional string f_18 = 27;
  bool has_f_18() const;
  void clear_f_18() ;
  const std::string& f_18() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_18(Arg_&& arg, Args_... args);
  std::string* mutable_f_18();
  PROTOBUF_NODISCARD std::string* release_f_18();
  void set_allocated_f_18(std::string* value);

  private:
  const std::string& _internal_f_18() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_18(
      const std::string& value);
  std::string* _internal_mutable_f_18();

  public:
  // optional string f_24 = 36;
  bool has_f_24() const;
  void clear_f_24() ;
  const std::string& f_24() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_24(Arg_&& arg, Args_... args);
  std::string* mutable_f_24();
  PROTOBUF_NODISCARD std::string* release_f_24();
  void set_allocated_f_24(std::string* value);

  private:
  const std::string& _internal_f_24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_24(
      const std::string& value);
  std::string* _internal_mutable_f_24();

  public:
  // optional bytes f_31 = 49;
  bool has_f_31() const;
  void clear_f_31() ;
  const std::string& f_31() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_31(Arg_&& arg, Args_... args);
  std::string* mutable_f_31();
  PROTOBUF_NODISCARD std::string* release_f_31();
  void set_allocated_f_31(std::string* value);

  private:
  const std::string& _internal_f_31() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_31(
      const std::string& value);
  std::string* _internal_mutable_f_31();

  public:
  // optional string f_34 = 55;
  bool has_f_34() const;
  void clear_f_34() ;
  const std::string& f_34() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_34(Arg_&& arg, Args_... args);
  std::string* mutable_f_34();
  PROTOBUF_NODISCARD std::string* release_f_34();
  void set_allocated_f_34(std::string* value);

  private:
  const std::string& _internal_f_34() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_34(
      const std::string& value);
  std::string* _internal_mutable_f_34();

  public:
  // optional string f_43 = 68;
  bool has_f_43() const;
  void clear_f_43() ;
  const std::string& f_43() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_43(Arg_&& arg, Args_... args);
  std::string* mutable_f_43();
  PROTOBUF_NODISCARD std::string* release_f_43();
  void set_allocated_f_43(std::string* value);

  private:
  const std::string& _internal_f_43() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_43(
      const std::string& value);
  std::string* _internal_mutable_f_43();

  public:
  // optional string f_44 = 69;
  bool has_f_44() const;
  void clear_f_44() ;
  const std::string& f_44() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_44(Arg_&& arg, Args_... args);
  std::string* mutable_f_44();
  PROTOBUF_NODISCARD std::string* release_f_44();
  void set_allocated_f_44(std::string* value);

  private:
  const std::string& _internal_f_44() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_44(
      const std::string& value);
  std::string* _internal_mutable_f_44();

  public:
  // optional bytes f_46 = 74;
  bool has_f_46() const;
  void clear_f_46() ;
  const std::string& f_46() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_46(Arg_&& arg, Args_... args);
  std::string* mutable_f_46();
  PROTOBUF_NODISCARD std::string* release_f_46();
  void set_allocated_f_46(std::string* value);

  private:
  const std::string& _internal_f_46() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_46(
      const std::string& value);
  std::string* _internal_mutable_f_46();

  public:
  // optional string f_52 = 83;
  bool has_f_52() const;
  void clear_f_52() ;
  const std::string& f_52() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_52(Arg_&& arg, Args_... args);
  std::string* mutable_f_52();
  PROTOBUF_NODISCARD std::string* release_f_52();
  void set_allocated_f_52(std::string* value);

  private:
  const std::string& _internal_f_52() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_52(
      const std::string& value);
  std::string* _internal_mutable_f_52();

  public:
  // optional bytes f_61 = 94;
  bool has_f_61() const;
  void clear_f_61() ;
  const std::string& f_61() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_61(Arg_&& arg, Args_... args);
  std::string* mutable_f_61();
  PROTOBUF_NODISCARD std::string* release_f_61();
  void set_allocated_f_61(std::string* value);

  private:
  const std::string& _internal_f_61() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_61(
      const std::string& value);
  std::string* _internal_mutable_f_61();

  public:
  // optional string f_75 = 114;
  bool has_f_75() const;
  void clear_f_75() ;
  const std::string& f_75() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_75(Arg_&& arg, Args_... args);
  std::string* mutable_f_75();
  PROTOBUF_NODISCARD std::string* release_f_75();
  void set_allocated_f_75(std::string* value);

  private:
  const std::string& _internal_f_75() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_75(
      const std::string& value);
  std::string* _internal_mutable_f_75();

  public:
  // optional string f_77 = 116;
  bool has_f_77() const;
  void clear_f_77() ;
  const std::string& f_77() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_77(Arg_&& arg, Args_... args);
  std::string* mutable_f_77();
  PROTOBUF_NODISCARD std::string* release_f_77();
  void set_allocated_f_77(std::string* value);

  private:
  const std::string& _internal_f_77() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_77(
      const std::string& value);
  std::string* _internal_mutable_f_77();

  public:
  // optional string f_78 = 117;
  bool has_f_78() const;
  void clear_f_78() ;
  const std::string& f_78() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_78(Arg_&& arg, Args_... args);
  std::string* mutable_f_78();
  PROTOBUF_NODISCARD std::string* release_f_78();
  void set_allocated_f_78(std::string* value);

  private:
  const std::string& _internal_f_78() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_78(
      const std::string& value);
  std::string* _internal_mutable_f_78();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80 f_117 = 118;
  bool has_f_117() const;
  void clear_f_117() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& f_117() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* release_f_117();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* mutable_f_117();
  void set_allocated_f_117(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* value);
  void unsafe_arena_set_allocated_f_117(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* unsafe_arena_release_f_117();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& _internal_f_117() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* _internal_mutable_f_117();

  public:
  // optional int64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E21 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 f_1() const;
  void set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 value);

  public:
  // optional float f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional int64 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int32 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional float f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  float f_7() const;
  void set_f_7(float value);

  private:
  float _internal_f_7() const;
  void _internal_set_f_7(float value);

  public:
  // optional uint64 f_8 = 11;
  bool has_f_8() const;
  void clear_f_8() ;
  ::uint64_t f_8() const;
  void set_f_8(::uint64_t value);

  private:
  ::uint64_t _internal_f_8() const;
  void _internal_set_f_8(::uint64_t value);

  public:
  // optional int32 f_9 = 13;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int32_t f_9() const;
  void set_f_9(::int32_t value);

  private:
  ::int32_t _internal_f_9() const;
  void _internal_set_f_9(::int32_t value);

  public:
  // optional fixed32 f_10 = 15;
  bool has_f_10() const;
  void clear_f_10() ;
  ::uint32_t f_10() const;
  void set_f_10(::uint32_t value);

  private:
  ::uint32_t _internal_f_10() const;
  void _internal_set_f_10(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E23 f_12 = 17;
  bool has_f_12() const;
  void clear_f_12() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 f_12() const;
  void set_f_12(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 _internal_f_12() const;
  void _internal_set_f_12(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 value);

  public:
  // optional fixed32 f_13 = 19;
  bool has_f_13() const;
  void clear_f_13() ;
  ::uint32_t f_13() const;
  void set_f_13(::uint32_t value);

  private:
  ::uint32_t _internal_f_13() const;
  void _internal_set_f_13(::uint32_t value);

  public:
  // optional int64 f_16 = 23;
  bool has_f_16() const;
  void clear_f_16() ;
  ::int64_t f_16() const;
  void set_f_16(::int64_t value);

  private:
  ::int64_t _internal_f_16() const;
  void _internal_set_f_16(::int64_t value);

  public:
  // optional int32 f_20 = 31;
  bool has_f_20() const;
  void clear_f_20() ;
  ::int32_t f_20() const;
  void set_f_20(::int32_t value);

  private:
  ::int32_t _internal_f_20() const;
  void _internal_set_f_20(::int32_t value);

  public:
  // optional int32 f_21 = 33;
  bool has_f_21() const;
  void clear_f_21() ;
  ::int32_t f_21() const;
  void set_f_21(::int32_t value);

  private:
  ::int32_t _internal_f_21() const;
  void _internal_set_f_21(::int32_t value);

  public:
  // optional fixed32 f_22 = 34;
  bool has_f_22() const;
  void clear_f_22() ;
  ::uint32_t f_22() const;
  void set_f_22(::uint32_t value);

  private:
  ::uint32_t _internal_f_22() const;
  void _internal_set_f_22(::uint32_t value);

  public:
  // optional int32 f_23 = 35;
  bool has_f_23() const;
  void clear_f_23() ;
  ::int32_t f_23() const;
  void set_f_23(::int32_t value);

  private:
  ::int32_t _internal_f_23() const;
  void _internal_set_f_23(::int32_t value);

  public:
  // optional int64 f_25 = 39;
  bool has_f_25() const;
  void clear_f_25() ;
  ::int64_t f_25() const;
  void set_f_25(::int64_t value);

  private:
  ::int64_t _internal_f_25() const;
  void _internal_set_f_25(::int64_t value);

  public:
  // optional uint32 f_26 = 41;
  bool has_f_26() const;
  void clear_f_26() ;
  ::uint32_t f_26() const;
  void set_f_26(::uint32_t value);

  private:
  ::uint32_t _internal_f_26() const;
  void _internal_set_f_26(::uint32_t value);

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // optional bool f_15 = 21;
  bool has_f_15() const;
  void clear_f_15() ;
  bool f_15() const;
  void set_f_15(bool value);

  private:
  bool _internal_f_15() const;
  void _internal_set_f_15(bool value);

  public:
  // optional bool f_37 = 60;
  bool has_f_37() const;
  void clear_f_37() ;
  bool f_37() const;
  void set_f_37(bool value);

  private:
  bool _internal_f_37() const;
  void _internal_set_f_37(bool value);

  public:
  // optional bool f_53 = 84;
  bool has_f_53() const;
  void clear_f_53() ;
  bool f_53() const;
  void set_f_53(bool value);

  private:
  bool _internal_f_53() const;
  void _internal_set_f_53(bool value);

  public:
  // optional int64 f_27 = 42;
  bool has_f_27() const;
  void clear_f_27() ;
  ::int64_t f_27() const;
  void set_f_27(::int64_t value);

  private:
  ::int64_t _internal_f_27() const;
  void _internal_set_f_27(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E24 f_28 = 44;
  bool has_f_28() const;
  void clear_f_28() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 f_28() const;
  void set_f_28(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 _internal_f_28() const;
  void _internal_set_f_28(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 value);

  public:
  // optional int32 f_29 = 46;
  bool has_f_29() const;
  void clear_f_29() ;
  ::int32_t f_29() const;
  void set_f_29(::int32_t value);

  private:
  ::int32_t _internal_f_29() const;
  void _internal_set_f_29(::int32_t value);

  public:
  // optional int32 f_30 = 47;
  bool has_f_30() const;
  void clear_f_30() ;
  ::int32_t f_30() const;
  void set_f_30(::int32_t value);

  private:
  ::int32_t _internal_f_30() const;
  void _internal_set_f_30(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E25 f_32 = 51;
  bool has_f_32() const;
  void clear_f_32() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 f_32() const;
  void set_f_32(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 _internal_f_32() const;
  void _internal_set_f_32(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 value);

  public:
  // optional int32 f_33 = 53;
  bool has_f_33() const;
  void clear_f_33() ;
  ::int32_t f_33() const;
  void set_f_33(::int32_t value);

  private:
  ::int32_t _internal_f_33() const;
  void _internal_set_f_33(::int32_t value);

  public:
  // optional float f_35 = 56;
  bool has_f_35() const;
  void clear_f_35() ;
  float f_35() const;
  void set_f_35(float value);

  private:
  float _internal_f_35() const;
  void _internal_set_f_35(float value);

  public:
  // optional int64 f_36 = 57;
  bool has_f_36() const;
  void clear_f_36() ;
  ::int64_t f_36() const;
  void set_f_36(::int64_t value);

  private:
  ::int64_t _internal_f_36() const;
  void _internal_set_f_36(::int64_t value);

  public:
  // optional int32 f_38 = 62;
  bool has_f_38() const;
  void clear_f_38() ;
  ::int32_t f_38() const;
  void set_f_38(::int32_t value);

  private:
  ::int32_t _internal_f_38() const;
  void _internal_set_f_38(::int32_t value);

  public:
  // optional float f_39 = 63;
  bool has_f_39() const;
  void clear_f_39() ;
  float f_39() const;
  void set_f_39(float value);

  private:
  float _internal_f_39() const;
  void _internal_set_f_39(float value);

  public:
  // optional int64 f_40 = 64;
  bool has_f_40() const;
  void clear_f_40() ;
  ::int64_t f_40() const;
  void set_f_40(::int64_t value);

  private:
  ::int64_t _internal_f_40() const;
  void _internal_set_f_40(::int64_t value);

  public:
  // optional int64 f_41 = 65;
  bool has_f_41() const;
  void clear_f_41() ;
  ::int64_t f_41() const;
  void set_f_41(::int64_t value);

  private:
  ::int64_t _internal_f_41() const;
  void _internal_set_f_41(::int64_t value);

  public:
  // optional int64 f_42 = 66;
  bool has_f_42() const;
  void clear_f_42() ;
  ::int64_t f_42() const;
  void set_f_42(::int64_t value);

  private:
  ::int64_t _internal_f_42() const;
  void _internal_set_f_42(::int64_t value);

  public:
  // optional uint64 f_45 = 71;
  bool has_f_45() const;
  void clear_f_45() ;
  ::uint64_t f_45() const;
  void set_f_45(::uint64_t value);

  private:
  ::uint64_t _internal_f_45() const;
  void _internal_set_f_45(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E26 f_47 = 75;
  bool has_f_47() const;
  void clear_f_47() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 f_47() const;
  void set_f_47(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 _internal_f_47() const;
  void _internal_set_f_47(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 value);

  public:
  // optional int32 f_48 = 76;
  bool has_f_48() const;
  void clear_f_48() ;
  ::int32_t f_48() const;
  void set_f_48(::int32_t value);

  private:
  ::int32_t _internal_f_48() const;
  void _internal_set_f_48(::int32_t value);

  public:
  // optional int32 f_49 = 78;
  bool has_f_49() const;
  void clear_f_49() ;
  ::int32_t f_49() const;
  void set_f_49(::int32_t value);

  private:
  ::int32_t _internal_f_49() const;
  void _internal_set_f_49(::int32_t value);

  public:
  // optional uint32 f_51 = 81;
  bool has_f_51() const;
  void clear_f_51() ;
  ::uint32_t f_51() const;
  void set_f_51(::uint32_t value);

  private:
  ::uint32_t _internal_f_51() const;
  void _internal_set_f_51(::uint32_t value);

  public:
  // optional double f_50 = 80;
  bool has_f_50() const;
  void clear_f_50() ;
  double f_50() const;
  void set_f_50(double value);

  private:
  double _internal_f_50() const;
  void _internal_set_f_50(double value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E27 f_54 = 85;
  bool has_f_54() const;
  void clear_f_54() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 f_54() const;
  void set_f_54(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 _internal_f_54() const;
  void _internal_set_f_54(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 value);

  public:
  // optional int32 f_55 = 86;
  bool has_f_55() const;
  void clear_f_55() ;
  ::int32_t f_55() const;
  void set_f_55(::int32_t value);

  private:
  ::int32_t _internal_f_55() const;
  void _internal_set_f_55(::int32_t value);

  public:
  // optional double f_58 = 90;
  bool has_f_58() const;
  void clear_f_58() ;
  double f_58() const;
  void set_f_58(double value);

  private:
  double _internal_f_58() const;
  void _internal_set_f_58(double value);

  public:
  // optional int64 f_60 = 93;
  bool has_f_60() const;
  void clear_f_60() ;
  ::int64_t f_60() const;
  void set_f_60(::int64_t value);

  private:
  ::int64_t _internal_f_60() const;
  void _internal_set_f_60(::int64_t value);

  public:
  // optional int32 f_59 = 92;
  bool has_f_59() const;
  void clear_f_59() ;
  ::int32_t f_59() const;
  void set_f_59(::int32_t value);

  private:
  ::int32_t _internal_f_59() const;
  void _internal_set_f_59(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E28 f_62 = 95;
  bool has_f_62() const;
  void clear_f_62() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 f_62() const;
  void set_f_62(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 _internal_f_62() const;
  void _internal_set_f_62(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 value);

  public:
  // optional bool f_57 = 89;
  bool has_f_57() const;
  void clear_f_57() ;
  bool f_57() const;
  void set_f_57(bool value);

  private:
  bool _internal_f_57() const;
  void _internal_set_f_57(bool value);

  public:
  // optional bool f_65 = 99;
  bool has_f_65() const;
  void clear_f_65() ;
  bool f_65() const;
  void set_f_65(bool value);

  private:
  bool _internal_f_65() const;
  void _internal_set_f_65(bool value);

  public:
  // optional bool f_66 = 101;
  bool has_f_66() const;
  void clear_f_66() ;
  bool f_66() const;
  void set_f_66(bool value);

  private:
  bool _internal_f_66() const;
  void _internal_set_f_66(bool value);

  public:
  // optional fixed32 f_64 = 98;
  bool has_f_64() const;
  void clear_f_64() ;
  ::uint32_t f_64() const;
  void set_f_64(::uint32_t value);

  private:
  ::uint32_t _internal_f_64() const;
  void _internal_set_f_64(::uint32_t value);

  public:
  // optional int64 f_63 = 97;
  bool has_f_63() const;
  void clear_f_63() ;
  ::int64_t f_63() const;
  void set_f_63(::int64_t value);

  private:
  ::int64_t _internal_f_63() const;
  void _internal_set_f_63(::int64_t value);

  public:
  // optional float f_67 = 102;
  bool has_f_67() const;
  void clear_f_67() ;
  float f_67() const;
  void set_f_67(float value);

  private:
  float _internal_f_67() const;
  void _internal_set_f_67(float value);

  public:
  // optional int32 f_69 = 105;
  bool has_f_69() const;
  void clear_f_69() ;
  ::int32_t f_69() const;
  void set_f_69(::int32_t value);

  private:
  ::int32_t _internal_f_69() const;
  void _internal_set_f_69(::int32_t value);

  public:
  // optional int64 f_68 = 104;
  bool has_f_68() const;
  void clear_f_68() ;
  ::int64_t f_68() const;
  void set_f_68(::int64_t value);

  private:
  ::int64_t _internal_f_68() const;
  void _internal_set_f_68(::int64_t value);

  public:
  // optional fixed32 f_70 = 107;
  bool has_f_70() const;
  void clear_f_70() ;
  ::uint32_t f_70() const;
  void set_f_70(::uint32_t value);

  private:
  ::uint32_t _internal_f_70() const;
  void _internal_set_f_70(::uint32_t value);

  public:
  // optional float f_71 = 109;
  bool has_f_71() const;
  void clear_f_71() ;
  float f_71() const;
  void set_f_71(float value);

  private:
  float _internal_f_71() const;
  void _internal_set_f_71(float value);

  public:
  // optional fixed64 f_76 = 115;
  bool has_f_76() const;
  void clear_f_76() ;
  ::uint64_t f_76() const;
  void set_f_76(::uint64_t value);

  private:
  ::uint64_t _internal_f_76() const;
  void _internal_set_f_76(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E29 f_74 = 113;
  bool has_f_74() const;
  void clear_f_74() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 f_74() const;
  void set_f_74(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 _internal_f_74() const;
  void _internal_set_f_74(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 80, 10,
      192, 17>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M79_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<3> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_6_;
    mutable ::google::protobuf::internal::CachedSize _f_6_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_19_;
    mutable ::google::protobuf::internal::CachedSize _f_19_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_56_;
    mutable ::google::protobuf::internal::CachedSize _f_56_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_72_;
    mutable ::google::protobuf::internal::CachedSize _f_72_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> f_73_;
    ::google::protobuf::internal::ArenaStringPtr f_11_;
    ::google::protobuf::internal::ArenaStringPtr f_14_;
    ::google::protobuf::internal::ArenaStringPtr f_17_;
    ::google::protobuf::internal::ArenaStringPtr f_18_;
    ::google::protobuf::internal::ArenaStringPtr f_24_;
    ::google::protobuf::internal::ArenaStringPtr f_31_;
    ::google::protobuf::internal::ArenaStringPtr f_34_;
    ::google::protobuf::internal::ArenaStringPtr f_43_;
    ::google::protobuf::internal::ArenaStringPtr f_44_;
    ::google::protobuf::internal::ArenaStringPtr f_46_;
    ::google::protobuf::internal::ArenaStringPtr f_52_;
    ::google::protobuf::internal::ArenaStringPtr f_61_;
    ::google::protobuf::internal::ArenaStringPtr f_75_;
    ::google::protobuf::internal::ArenaStringPtr f_77_;
    ::google::protobuf::internal::ArenaStringPtr f_78_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* f_117_;
    ::int64_t f_2_;
    int f_1_;
    float f_3_;
    ::int64_t f_4_;
    ::int32_t f_5_;
    float f_7_;
    ::uint64_t f_8_;
    ::int32_t f_9_;
    ::uint32_t f_10_;
    int f_12_;
    ::uint32_t f_13_;
    ::int64_t f_16_;
    ::int32_t f_20_;
    ::int32_t f_21_;
    ::uint32_t f_22_;
    ::int32_t f_23_;
    ::int64_t f_25_;
    ::uint32_t f_26_;
    bool f_0_;
    bool f_15_;
    bool f_37_;
    bool f_53_;
    ::int64_t f_27_;
    int f_28_;
    ::int32_t f_29_;
    ::int32_t f_30_;
    int f_32_;
    ::int32_t f_33_;
    float f_35_;
    ::int64_t f_36_;
    ::int32_t f_38_;
    float f_39_;
    ::int64_t f_40_;
    ::int64_t f_41_;
    ::int64_t f_42_;
    ::uint64_t f_45_;
    int f_47_;
    ::int32_t f_48_;
    ::int32_t f_49_;
    ::uint32_t f_51_;
    double f_50_;
    int f_54_;
    ::int32_t f_55_;
    double f_58_;
    ::int64_t f_60_;
    ::int32_t f_59_;
    int f_62_;
    bool f_57_;
    bool f_65_;
    bool f_66_;
    ::uint32_t f_64_;
    ::int64_t f_63_;
    float f_67_;
    ::int32_t f_69_;
    ::int64_t f_68_;
    ::uint32_t f_70_;
    float f_71_;
    ::uint64_t f_76_;
    int f_74_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M95 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF6FieldNumber = 8,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95 f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* release_f_6();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& _internal_f_6() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* _internal_mutable_f_6();

  public:
  // optional uint32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional float f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional uint64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::uint64_t f_2() const;
  void set_f_2(::uint64_t value);

  private:
  ::uint64_t _internal_f_2() const;
  void _internal_set_f_2(::uint64_t value);

  public:
  // optional int64 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional bool f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  bool f_4() const;
  void set_f_4(bool value);

  private:
  bool _internal_f_4() const;
  void _internal_set_f_4(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* f_6_;
    ::uint32_t f_0_;
    float f_1_;
    ::uint64_t f_2_;
    ::int64_t f_3_;
    bool f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M20 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M20) */ {
 public:
  inline Message8_M1_M4_M15_M20() : Message8_M1_M4_M15_M20(nullptr) {}
  ~Message8_M1_M4_M15_M20() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M20(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M20(const Message8_M1_M4_M15_M20& from) : Message8_M1_M4_M15_M20(nullptr, from) {}
  inline Message8_M1_M4_M15_M20(Message8_M1_M4_M15_M20&& from) noexcept
      : Message8_M1_M4_M15_M20(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M20& operator=(const Message8_M1_M4_M15_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M20& operator=(Message8_M1_M4_M15_M20&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M20& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M20* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M20*>(
        &_Message8_M1_M4_M15_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Message8_M1_M4_M15_M20& a, Message8_M1_M4_M15_M20& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M20* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M20* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M20* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M20>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M20& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M20& from) { Message8_M1_M4_M15_M20::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M20* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M20"; }

 protected:
  explicit Message8_M1_M4_M15_M20(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M20(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M20& from);
  Message8_M1_M4_M15_M20(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M20&& from) noexcept
      : Message8_M1_M4_M15_M20(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M45 = Message8_M1_M4_M15_M20_M45;
  using M46 = Message8_M1_M4_M15_M20_M46;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M20.M45 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45& f_1(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>& f_1() const;
  // optional .fleetbench.proto.Message8.M1.M4.M15.M20.M46 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* release_f_2();
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M20_M46* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M20_M46* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46& _internal_f_2() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* _internal_mutable_f_2();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M20)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M20_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M20_M45 > f_1_;
    ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* f_2_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16_M33_M53 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53) */ {
 public:
  inline Message8_M1_M4_M15_M16_M33_M53() : Message8_M1_M4_M15_M16_M33_M53(nullptr) {}
  ~Message8_M1_M4_M15_M16_M33_M53() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16_M33_M53(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16_M33_M53(const Message8_M1_M4_M15_M16_M33_M53& from) : Message8_M1_M4_M15_M16_M33_M53(nullptr, from) {}
  inline Message8_M1_M4_M15_M16_M33_M53(Message8_M1_M4_M15_M16_M33_M53&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16_M33_M53& operator=(const Message8_M1_M4_M15_M16_M33_M53& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16_M33_M53& operator=(Message8_M1_M4_M15_M16_M33_M53&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16_M33_M53& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16_M33_M53* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16_M33_M53*>(
        &_Message8_M1_M4_M15_M16_M33_M53_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Message8_M1_M4_M15_M16_M33_M53& a, Message8_M1_M4_M15_M16_M33_M53& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16_M33_M53* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16_M33_M53* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16_M33_M53* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16_M33_M53>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16_M33_M53& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16_M33_M53& from) { Message8_M1_M4_M15_M16_M33_M53::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16_M33_M53* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53"; }

 protected:
  explicit Message8_M1_M4_M15_M16_M33_M53(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16_M33_M53(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16_M33_M53& from);
  Message8_M1_M4_M15_M16_M33_M53(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16_M33_M53&& from) noexcept
      : Message8_M1_M4_M15_M16_M33_M53(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M69 = Message8_M1_M4_M15_M16_M33_M53_M69;
  using M74 = Message8_M1_M4_M15_M16_M33_M53_M74;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF1FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74& f_4(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>& f_4() const;
  // optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* _internal_mutable_f_1();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_M33_M53_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74 > f_4_;
    ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* f_1_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14_M27 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14.M27) */ {
 public:
  inline Message8_M1_M11_M14_M27() : Message8_M1_M11_M14_M27(nullptr) {}
  ~Message8_M1_M11_M14_M27() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14_M27(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14_M27(const Message8_M1_M11_M14_M27& from) : Message8_M1_M11_M14_M27(nullptr, from) {}
  inline Message8_M1_M11_M14_M27(Message8_M1_M11_M14_M27&& from) noexcept
      : Message8_M1_M11_M14_M27(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14_M27& operator=(const Message8_M1_M11_M14_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14_M27& operator=(Message8_M1_M11_M14_M27&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14_M27& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14_M27* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14_M27*>(
        &_Message8_M1_M11_M14_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 52;
  friend void swap(Message8_M1_M11_M14_M27& a, Message8_M1_M11_M14_M27& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14_M27* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14_M27* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14_M27* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14_M27>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14_M27& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14_M27& from) { Message8_M1_M11_M14_M27::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14_M27* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14.M27"; }

 protected:
  explicit Message8_M1_M11_M14_M27(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14_M27(::google::protobuf::Arena* arena, const Message8_M1_M11_M14_M27& from);
  Message8_M1_M11_M14_M27(::google::protobuf::Arena* arena, Message8_M1_M11_M14_M27&& from) noexcept
      : Message8_M1_M11_M14_M27(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M32 = Message8_M1_M11_M14_M27_M32;
  using M39 = Message8_M1_M11_M14_M27_M39;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M1.M11.M14.M27.M32 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M1_M11_M14_M27_M32& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* release_f_2();
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M1_M11_M14_M27_M32* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M11_M14_M27_M32* value);
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M1_M11_M14_M27_M32& _internal_f_2() const;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M1.M11.M14.M27.M39 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* release_f_3();
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M1_M11_M14_M27_M39* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M11_M14_M27_M39* value);
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39& _internal_f_3() const;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* _internal_mutable_f_3();

  public:
  // optional fixed64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14.M27)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_M27_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* f_2_;
    ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* f_3_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24_M35 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24.M35) */ {
 public:
  inline Message8_M2_M6_M12_M24_M35() : Message8_M2_M6_M12_M24_M35(nullptr) {}
  ~Message8_M2_M6_M12_M24_M35() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24_M35(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24_M35(const Message8_M2_M6_M12_M24_M35& from) : Message8_M2_M6_M12_M24_M35(nullptr, from) {}
  inline Message8_M2_M6_M12_M24_M35(Message8_M2_M6_M12_M24_M35&& from) noexcept
      : Message8_M2_M6_M12_M24_M35(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24_M35& operator=(const Message8_M2_M6_M12_M24_M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24_M35& operator=(Message8_M2_M6_M12_M24_M35&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24_M35& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24_M35* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24_M35*>(
        &_Message8_M2_M6_M12_M24_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 85;
  friend void swap(Message8_M2_M6_M12_M24_M35& a, Message8_M2_M6_M12_M24_M35& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24_M35* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24_M35* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24_M35* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24_M35>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24_M35& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24_M35& from) { Message8_M2_M6_M12_M24_M35::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24_M35* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24.M35"; }

 protected:
  explicit Message8_M2_M6_M12_M24_M35(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24_M35(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24_M35& from);
  Message8_M2_M6_M12_M24_M35(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24_M35&& from) noexcept
      : Message8_M2_M6_M12_M24_M35(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M52 = Message8_M2_M6_M12_M24_M35_M52;
  using M54 = Message8_M2_M6_M12_M24_M35_M54;
  using M62 = Message8_M2_M6_M12_M24_M35_M62;
  using M63 = Message8_M2_M6_M12_M24_M35_M63;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_5_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_7_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_5_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_7_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF5FieldNumber = 7,
    kF7FieldNumber = 8,
    kF0FieldNumber = 1,
    kF3FieldNumber = 5,
  };
  // repeated .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52 f_1 = 3;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52& f_1(int index) const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>& f_1() const;
  // repeated .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62 f_5 = 7;
  int f_5_size() const;
  private:
  int _internal_f_5_size() const;

  public:
  void clear_f_5() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62* mutable_f_5(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>* mutable_f_5();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>& _internal_f_5() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>* _internal_mutable_f_5();
  public:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62& f_5(int index) const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62* add_f_5();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>& f_5() const;
  // repeated .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63 f_7 = 8;
  int f_7_size() const;
  private:
  int _internal_f_7_size() const;

  public:
  void clear_f_7() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63* mutable_f_7(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>* mutable_f_7();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>& _internal_f_7() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>* _internal_mutable_f_7();
  public:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63& f_7(int index) const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63* add_f_7();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>& f_7() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* release_f_3();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* _internal_mutable_f_3();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24.M35)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      55, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_M35_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62 > f_5_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63 > f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M22 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M22) */ {
 public:
  inline Message8_M2_M6_M12_M22() : Message8_M2_M6_M12_M22(nullptr) {}
  ~Message8_M2_M6_M12_M22() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M22(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M22(const Message8_M2_M6_M12_M22& from) : Message8_M2_M6_M12_M22(nullptr, from) {}
  inline Message8_M2_M6_M12_M22(Message8_M2_M6_M12_M22&& from) noexcept
      : Message8_M2_M6_M12_M22(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M22& operator=(const Message8_M2_M6_M12_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M22& operator=(Message8_M2_M6_M12_M22&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M22& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M22* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M22*>(
        &_Message8_M2_M6_M12_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 75;
  friend void swap(Message8_M2_M6_M12_M22& a, Message8_M2_M6_M12_M22& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M22* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M22* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M22* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M22>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M22& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M22& from) { Message8_M2_M6_M12_M22::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M22* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M22"; }

 protected:
  explicit Message8_M2_M6_M12_M22(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M22(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M22& from);
  Message8_M2_M6_M12_M22(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M22&& from) noexcept
      : Message8_M2_M6_M12_M22(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M41 = Message8_M2_M6_M12_M22_M41;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M22.M41 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* release_f_1();
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M22_M41* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M22_M41* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41& _internal_f_1() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M22)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      51, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M22_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M21 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M21) */ {
 public:
  inline Message8_M2_M6_M12_M21() : Message8_M2_M6_M12_M21(nullptr) {}
  ~Message8_M2_M6_M12_M21() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M21(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M21(const Message8_M2_M6_M12_M21& from) : Message8_M2_M6_M12_M21(nullptr, from) {}
  inline Message8_M2_M6_M12_M21(Message8_M2_M6_M12_M21&& from) noexcept
      : Message8_M2_M6_M12_M21(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M21& operator=(const Message8_M2_M6_M12_M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M21& operator=(Message8_M2_M6_M12_M21&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M21& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M21* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M21*>(
        &_Message8_M2_M6_M12_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 71;
  friend void swap(Message8_M2_M6_M12_M21& a, Message8_M2_M6_M12_M21& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M21* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M21* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M21* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M21>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M21& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M21& from) { Message8_M2_M6_M12_M21::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M21* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M21"; }

 protected:
  explicit Message8_M2_M6_M12_M21(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M21(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M21& from);
  Message8_M2_M6_M12_M21(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M21&& from) noexcept
      : Message8_M2_M6_M12_M21(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M34 = Message8_M2_M6_M12_M21_M34;
  using E6 = Message8_M2_M6_M12_M21_E6;
  static constexpr E6 E6_UNSPECIFIED = Message8_M2_M6_M12_M21_E6_E6_UNSPECIFIED;
  static constexpr E6 E6_CONST_1 = Message8_M2_M6_M12_M21_E6_E6_CONST_1;
  static constexpr E6 E6_CONST_2 = Message8_M2_M6_M12_M21_E6_E6_CONST_2;
  static constexpr E6 E6_CONST_3 = Message8_M2_M6_M12_M21_E6_E6_CONST_3;
  static constexpr E6 E6_CONST_4 = Message8_M2_M6_M12_M21_E6_E6_CONST_4;
  static constexpr E6 E6_CONST_5 = Message8_M2_M6_M12_M21_E6_E6_CONST_5;
  static inline bool E6_IsValid(int value) {
    return Message8_M2_M6_M12_M21_E6_IsValid(value);
  }
  static constexpr E6 E6_MIN = Message8_M2_M6_M12_M21_E6_E6_MIN;
  static constexpr E6 E6_MAX = Message8_M2_M6_M12_M21_E6_E6_MAX;
  static constexpr int E6_ARRAYSIZE = Message8_M2_M6_M12_M21_E6_E6_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E6_descriptor() {
    return Message8_M2_M6_M12_M21_E6_descriptor();
  }
  template <typename T>
  static inline const std::string& E6_Name(T value) {
    return Message8_M2_M6_M12_M21_E6_Name(value);
  }
  static inline bool E6_Parse(absl::string_view name, E6* value) {
    return Message8_M2_M6_M12_M21_E6_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message8.M2.M6.M12.M21.M34 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* release_f_3();
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21_M34* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21_M34* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M21.E6 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_E6 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M21_E6 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M21_E6 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M21_E6 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M21)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M21_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* f_3_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M17_M29 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M17.M29) */ {
 public:
  inline Message8_M2_M5_M13_M17_M29() : Message8_M2_M5_M13_M17_M29(nullptr) {}
  ~Message8_M2_M5_M13_M17_M29() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M17_M29(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M17_M29(const Message8_M2_M5_M13_M17_M29& from) : Message8_M2_M5_M13_M17_M29(nullptr, from) {}
  inline Message8_M2_M5_M13_M17_M29(Message8_M2_M5_M13_M17_M29&& from) noexcept
      : Message8_M2_M5_M13_M17_M29(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M17_M29& operator=(const Message8_M2_M5_M13_M17_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M17_M29& operator=(Message8_M2_M5_M13_M17_M29&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M17_M29& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M17_M29* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M17_M29*>(
        &_Message8_M2_M5_M13_M17_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 61;
  friend void swap(Message8_M2_M5_M13_M17_M29& a, Message8_M2_M5_M13_M17_M29& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M17_M29* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M17_M29* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M17_M29* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M17_M29>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M17_M29& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M17_M29& from) { Message8_M2_M5_M13_M17_M29::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M17_M29* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M17.M29"; }

 protected:
  explicit Message8_M2_M5_M13_M17_M29(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M17_M29(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M17_M29& from);
  Message8_M2_M5_M13_M17_M29(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M17_M29&& from) noexcept
      : Message8_M2_M5_M13_M17_M29(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M50 = Message8_M2_M5_M13_M17_M29_M50;
  using M61 = Message8_M2_M5_M13_M17_M29_M61;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 5,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* release_f_2();
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* value);
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* release_f_3();
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* value);
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M17.M29)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M17_M29_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* f_2_;
    ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* f_3_;
    ::int64_t f_0_;
    ::int64_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M94 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94;
  using E35 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35;
  static constexpr E35 E35_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_UNSPECIFIED;
  static constexpr E35 E35_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_1;
  static constexpr E35 E35_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_2;
  static constexpr E35 E35_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_3;
  static constexpr E35 E35_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_4;
  static constexpr E35 E35_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_CONST_5;
  static inline bool E35_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_IsValid(value);
  }
  static constexpr E35 E35_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_MIN;
  static constexpr E35 E35_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_MAX;
  static constexpr int E35_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_E35_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E35_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_descriptor();
  }
  template <typename T>
  static inline const std::string& E35_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_Name(value);
  }
  static inline bool E35_Parse(absl::string_view name, E35* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_Parse(name, value);
  }
  using E36 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36;
  static constexpr E36 E36_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_UNSPECIFIED;
  static constexpr E36 E36_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_1;
  static constexpr E36 E36_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_2;
  static constexpr E36 E36_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_3;
  static constexpr E36 E36_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_4;
  static constexpr E36 E36_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_CONST_5;
  static inline bool E36_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_IsValid(value);
  }
  static constexpr E36 E36_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_MIN;
  static constexpr E36 E36_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_MAX;
  static constexpr int E36_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_E36_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E36_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_descriptor();
  }
  template <typename T>
  static inline const std::string& E36_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_Name(value);
  }
  static inline bool E36_Parse(absl::string_view name, E36* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_Parse(name, value);
  }
  using E37 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37;
  static constexpr E37 E37_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_UNSPECIFIED;
  static constexpr E37 E37_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_1;
  static constexpr E37 E37_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_2;
  static constexpr E37 E37_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_3;
  static constexpr E37 E37_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_4;
  static constexpr E37 E37_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_CONST_5;
  static inline bool E37_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_IsValid(value);
  }
  static constexpr E37 E37_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_MIN;
  static constexpr E37 E37_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_MAX;
  static constexpr int E37_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_E37_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E37_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_descriptor();
  }
  template <typename T>
  static inline const std::string& E37_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_Name(value);
  }
  static inline bool E37_Parse(absl::string_view name, E37* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_Parse(name, value);
  }
  using E38 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38;
  static constexpr E38 E38_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_UNSPECIFIED;
  static constexpr E38 E38_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_1;
  static constexpr E38 E38_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_2;
  static constexpr E38 E38_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_3;
  static constexpr E38 E38_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_4;
  static constexpr E38 E38_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_CONST_5;
  static inline bool E38_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_IsValid(value);
  }
  static constexpr E38 E38_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_MIN;
  static constexpr E38 E38_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_MAX;
  static constexpr int E38_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_E38_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E38_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_descriptor();
  }
  template <typename T>
  static inline const std::string& E38_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_Name(value);
  }
  static inline bool E38_Parse(absl::string_view name, E38* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_Parse(name, value);
  }
  using E39 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39;
  static constexpr E39 E39_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_UNSPECIFIED;
  static constexpr E39 E39_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_1;
  static constexpr E39 E39_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_2;
  static constexpr E39 E39_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_3;
  static constexpr E39 E39_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_4;
  static constexpr E39 E39_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_CONST_5;
  static inline bool E39_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_IsValid(value);
  }
  static constexpr E39 E39_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_MIN;
  static constexpr E39 E39_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_MAX;
  static constexpr int E39_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_E39_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E39_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_descriptor();
  }
  template <typename T>
  static inline const std::string& E39_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_Name(value);
  }
  static inline bool E39_Parse(absl::string_view name, E39* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_Parse(name, value);
  }
  using E40 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40;
  static constexpr E40 E40_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_UNSPECIFIED;
  static constexpr E40 E40_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_1;
  static constexpr E40 E40_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_2;
  static constexpr E40 E40_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_3;
  static constexpr E40 E40_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_4;
  static constexpr E40 E40_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_CONST_5;
  static inline bool E40_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_IsValid(value);
  }
  static constexpr E40 E40_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_MIN;
  static constexpr E40 E40_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_MAX;
  static constexpr int E40_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_E40_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E40_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_descriptor();
  }
  template <typename T>
  static inline const std::string& E40_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_Name(value);
  }
  static inline bool E40_Parse(absl::string_view name, E40* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_Parse(name, value);
  }
  using E41 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41;
  static constexpr E41 E41_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_UNSPECIFIED;
  static constexpr E41 E41_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_1;
  static constexpr E41 E41_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_2;
  static constexpr E41 E41_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_3;
  static constexpr E41 E41_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_4;
  static constexpr E41 E41_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_CONST_5;
  static inline bool E41_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_IsValid(value);
  }
  static constexpr E41 E41_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_MIN;
  static constexpr E41 E41_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_MAX;
  static constexpr int E41_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_E41_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E41_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_descriptor();
  }
  template <typename T>
  static inline const std::string& E41_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_Name(value);
  }
  static inline bool E41_Parse(absl::string_view name, E41* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_Parse(name, value);
  }
  using E42 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42;
  static constexpr E42 E42_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_UNSPECIFIED;
  static constexpr E42 E42_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_1;
  static constexpr E42 E42_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_2;
  static constexpr E42 E42_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_3;
  static constexpr E42 E42_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_4;
  static constexpr E42 E42_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_CONST_5;
  static inline bool E42_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_IsValid(value);
  }
  static constexpr E42 E42_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_MIN;
  static constexpr E42 E42_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_MAX;
  static constexpr int E42_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_E42_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E42_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_descriptor();
  }
  template <typename T>
  static inline const std::string& E42_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_Name(value);
  }
  static inline bool E42_Parse(absl::string_view name, E42* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_Parse(name, value);
  }
  using E43 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43;
  static constexpr E43 E43_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_UNSPECIFIED;
  static constexpr E43 E43_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_1;
  static constexpr E43 E43_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_2;
  static constexpr E43 E43_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_3;
  static constexpr E43 E43_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_4;
  static constexpr E43 E43_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_CONST_5;
  static inline bool E43_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_IsValid(value);
  }
  static constexpr E43 E43_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_MIN;
  static constexpr E43 E43_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_MAX;
  static constexpr int E43_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_E43_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E43_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_descriptor();
  }
  template <typename T>
  static inline const std::string& E43_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_Name(value);
  }
  static inline bool E43_Parse(absl::string_view name, E43* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_Parse(name, value);
  }
  using E44 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44;
  static constexpr E44 E44_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_UNSPECIFIED;
  static constexpr E44 E44_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_1;
  static constexpr E44 E44_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_2;
  static constexpr E44 E44_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_3;
  static constexpr E44 E44_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_4;
  static constexpr E44 E44_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_CONST_5;
  static inline bool E44_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_IsValid(value);
  }
  static constexpr E44 E44_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_MIN;
  static constexpr E44 E44_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_MAX;
  static constexpr int E44_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_E44_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E44_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_descriptor();
  }
  template <typename T>
  static inline const std::string& E44_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_Name(value);
  }
  static inline bool E44_Parse(absl::string_view name, E44* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_Parse(name, value);
  }
  using E45 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45;
  static constexpr E45 E45_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_UNSPECIFIED;
  static constexpr E45 E45_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_1;
  static constexpr E45 E45_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_2;
  static constexpr E45 E45_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_3;
  static constexpr E45 E45_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_4;
  static constexpr E45 E45_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_CONST_5;
  static inline bool E45_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_IsValid(value);
  }
  static constexpr E45 E45_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_MIN;
  static constexpr E45 E45_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_MAX;
  static constexpr int E45_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_E45_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E45_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_descriptor();
  }
  template <typename T>
  static inline const std::string& E45_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_Name(value);
  }
  static inline bool E45_Parse(absl::string_view name, E45* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_Parse(name, value);
  }
  using E46 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46;
  static constexpr E46 E46_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_UNSPECIFIED;
  static constexpr E46 E46_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_1;
  static constexpr E46 E46_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_2;
  static constexpr E46 E46_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_3;
  static constexpr E46 E46_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_4;
  static constexpr E46 E46_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_CONST_5;
  static inline bool E46_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_IsValid(value);
  }
  static constexpr E46 E46_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_MIN;
  static constexpr E46 E46_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_MAX;
  static constexpr int E46_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_E46_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E46_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_descriptor();
  }
  template <typename T>
  static inline const std::string& E46_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_Name(value);
  }
  static inline bool E46_Parse(absl::string_view name, E46* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_Parse(name, value);
  }
  using E47 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47;
  static constexpr E47 E47_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_UNSPECIFIED;
  static constexpr E47 E47_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_1;
  static constexpr E47 E47_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_2;
  static constexpr E47 E47_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_3;
  static constexpr E47 E47_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_4;
  static constexpr E47 E47_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_CONST_5;
  static inline bool E47_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_IsValid(value);
  }
  static constexpr E47 E47_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_MIN;
  static constexpr E47 E47_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_MAX;
  static constexpr int E47_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_E47_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E47_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_descriptor();
  }
  template <typename T>
  static inline const std::string& E47_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_Name(value);
  }
  static inline bool E47_Parse(absl::string_view name, E47* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_Parse(name, value);
  }
  using E48 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48;
  static constexpr E48 E48_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_UNSPECIFIED;
  static constexpr E48 E48_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_1;
  static constexpr E48 E48_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_2;
  static constexpr E48 E48_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_3;
  static constexpr E48 E48_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_4;
  static constexpr E48 E48_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_CONST_5;
  static inline bool E48_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_IsValid(value);
  }
  static constexpr E48 E48_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_MIN;
  static constexpr E48 E48_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_MAX;
  static constexpr int E48_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_E48_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E48_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_descriptor();
  }
  template <typename T>
  static inline const std::string& E48_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_Name(value);
  }
  static inline bool E48_Parse(absl::string_view name, E48* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_Parse(name, value);
  }
  using E49 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49;
  static constexpr E49 E49_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_UNSPECIFIED;
  static constexpr E49 E49_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_1;
  static constexpr E49 E49_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_2;
  static constexpr E49 E49_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_3;
  static constexpr E49 E49_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_4;
  static constexpr E49 E49_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_CONST_5;
  static inline bool E49_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_IsValid(value);
  }
  static constexpr E49 E49_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_MIN;
  static constexpr E49 E49_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_MAX;
  static constexpr int E49_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_E49_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E49_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_descriptor();
  }
  template <typename T>
  static inline const std::string& E49_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_Name(value);
  }
  static inline bool E49_Parse(absl::string_view name, E49* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_Parse(name, value);
  }
  using E50 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50;
  static constexpr E50 E50_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_UNSPECIFIED;
  static constexpr E50 E50_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_1;
  static constexpr E50 E50_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_2;
  static constexpr E50 E50_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_3;
  static constexpr E50 E50_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_4;
  static constexpr E50 E50_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_CONST_5;
  static inline bool E50_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_IsValid(value);
  }
  static constexpr E50 E50_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_MIN;
  static constexpr E50 E50_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_MAX;
  static constexpr int E50_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_E50_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E50_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_descriptor();
  }
  template <typename T>
  static inline const std::string& E50_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_Name(value);
  }
  static inline bool E50_Parse(absl::string_view name, E50* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_Parse(name, value);
  }
  using E51 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51;
  static constexpr E51 E51_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_UNSPECIFIED;
  static constexpr E51 E51_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_1;
  static constexpr E51 E51_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_2;
  static constexpr E51 E51_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_3;
  static constexpr E51 E51_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_4;
  static constexpr E51 E51_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_CONST_5;
  static inline bool E51_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_IsValid(value);
  }
  static constexpr E51 E51_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_MIN;
  static constexpr E51 E51_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_MAX;
  static constexpr int E51_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_E51_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E51_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_descriptor();
  }
  template <typename T>
  static inline const std::string& E51_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_Name(value);
  }
  static inline bool E51_Parse(absl::string_view name, E51* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_Parse(name, value);
  }
  using E52 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52;
  static constexpr E52 E52_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_UNSPECIFIED;
  static constexpr E52 E52_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_1;
  static constexpr E52 E52_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_2;
  static constexpr E52 E52_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_3;
  static constexpr E52 E52_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_4;
  static constexpr E52 E52_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_CONST_5;
  static inline bool E52_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_IsValid(value);
  }
  static constexpr E52 E52_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_MIN;
  static constexpr E52 E52_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_MAX;
  static constexpr int E52_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_E52_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E52_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_descriptor();
  }
  template <typename T>
  static inline const std::string& E52_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_Name(value);
  }
  static inline bool E52_Parse(absl::string_view name, E52* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_Parse(name, value);
  }
  using E53 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53;
  static constexpr E53 E53_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_UNSPECIFIED;
  static constexpr E53 E53_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_1;
  static constexpr E53 E53_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_2;
  static constexpr E53 E53_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_3;
  static constexpr E53 E53_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_4;
  static constexpr E53 E53_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_CONST_5;
  static inline bool E53_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_IsValid(value);
  }
  static constexpr E53 E53_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_MIN;
  static constexpr E53 E53_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_MAX;
  static constexpr int E53_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_E53_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E53_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_descriptor();
  }
  template <typename T>
  static inline const std::string& E53_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_Name(value);
  }
  static inline bool E53_Parse(absl::string_view name, E53* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_Parse(name, value);
  }
  using E54 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54;
  static constexpr E54 E54_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_UNSPECIFIED;
  static constexpr E54 E54_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_1;
  static constexpr E54 E54_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_2;
  static constexpr E54 E54_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_3;
  static constexpr E54 E54_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_4;
  static constexpr E54 E54_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_CONST_5;
  static inline bool E54_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_IsValid(value);
  }
  static constexpr E54 E54_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_MIN;
  static constexpr E54 E54_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_MAX;
  static constexpr int E54_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_E54_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E54_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_descriptor();
  }
  template <typename T>
  static inline const std::string& E54_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_Name(value);
  }
  static inline bool E54_Parse(absl::string_view name, E54* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_Parse(name, value);
  }
  using E55 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55;
  static constexpr E55 E55_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_UNSPECIFIED;
  static constexpr E55 E55_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_1;
  static constexpr E55 E55_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_2;
  static constexpr E55 E55_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_3;
  static constexpr E55 E55_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_4;
  static constexpr E55 E55_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_CONST_5;
  static inline bool E55_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_IsValid(value);
  }
  static constexpr E55 E55_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_MIN;
  static constexpr E55 E55_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_MAX;
  static constexpr int E55_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_E55_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E55_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_descriptor();
  }
  template <typename T>
  static inline const std::string& E55_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_Name(value);
  }
  static inline bool E55_Parse(absl::string_view name, E55* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_Parse(name, value);
  }
  using E56 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56;
  static constexpr E56 E56_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_UNSPECIFIED;
  static constexpr E56 E56_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_1;
  static constexpr E56 E56_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_2;
  static constexpr E56 E56_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_3;
  static constexpr E56 E56_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_4;
  static constexpr E56 E56_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_CONST_5;
  static inline bool E56_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_IsValid(value);
  }
  static constexpr E56 E56_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_MIN;
  static constexpr E56 E56_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_MAX;
  static constexpr int E56_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_E56_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E56_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_descriptor();
  }
  template <typename T>
  static inline const std::string& E56_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_Name(value);
  }
  static inline bool E56_Parse(absl::string_view name, E56* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_Parse(name, value);
  }
  using E57 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57;
  static constexpr E57 E57_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_UNSPECIFIED;
  static constexpr E57 E57_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_1;
  static constexpr E57 E57_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_2;
  static constexpr E57 E57_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_3;
  static constexpr E57 E57_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_4;
  static constexpr E57 E57_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_CONST_5;
  static inline bool E57_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_IsValid(value);
  }
  static constexpr E57 E57_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_MIN;
  static constexpr E57 E57_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_MAX;
  static constexpr int E57_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_E57_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E57_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_descriptor();
  }
  template <typename T>
  static inline const std::string& E57_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_Name(value);
  }
  static inline bool E57_Parse(absl::string_view name, E57* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_Parse(name, value);
  }
  using E58 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58;
  static constexpr E58 E58_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_UNSPECIFIED;
  static constexpr E58 E58_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_1;
  static constexpr E58 E58_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_2;
  static constexpr E58 E58_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_3;
  static constexpr E58 E58_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_4;
  static constexpr E58 E58_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_CONST_5;
  static inline bool E58_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_IsValid(value);
  }
  static constexpr E58 E58_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_MIN;
  static constexpr E58 E58_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_MAX;
  static constexpr int E58_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_E58_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E58_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_descriptor();
  }
  template <typename T>
  static inline const std::string& E58_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_Name(value);
  }
  static inline bool E58_Parse(absl::string_view name, E58* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_Parse(name, value);
  }
  using E59 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59;
  static constexpr E59 E59_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_UNSPECIFIED;
  static constexpr E59 E59_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_1;
  static constexpr E59 E59_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_2;
  static constexpr E59 E59_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_3;
  static constexpr E59 E59_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_4;
  static constexpr E59 E59_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_CONST_5;
  static inline bool E59_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_IsValid(value);
  }
  static constexpr E59 E59_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_MIN;
  static constexpr E59 E59_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_MAX;
  static constexpr int E59_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_E59_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E59_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_descriptor();
  }
  template <typename T>
  static inline const std::string& E59_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_Name(value);
  }
  static inline bool E59_Parse(absl::string_view name, E59* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_190_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_190())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_76().data())), f_76().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_82().data())), f_82().size() * sizeof(float)));
      for (int i = 0; i < f_114_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114(i).data())), f_114(i).size()));
      }
      for (int i = 0; i < f_174_size(); ++i) {
        schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_174(i).data())), f_174(i).size()));
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())), f_12().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())), f_19().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())), f_23().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())), f_24().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())), f_29().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())), f_32().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())), f_40().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())), f_46().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())), f_53().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_57().c_str())), f_57().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_58().c_str())), f_58().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_60().c_str())), f_60().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())), f_61().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_74().c_str())), f_74().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())), f_84().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_87().c_str())), f_87().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())), f_95().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_96().c_str())), f_96().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_103().c_str())), f_103().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_104().c_str())), f_104().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())), f_106().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_108().c_str())), f_108().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())), f_113().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_115().c_str())), f_115().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_120().c_str())), f_120().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_123().c_str())), f_123().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_128().c_str())), f_128().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_129().c_str())), f_129().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_136().c_str())), f_136().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_150().c_str())), f_150().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())), f_153().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())), f_157().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_162().c_str())), f_162().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_164().c_str())), f_164().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_180().c_str())), f_180().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_181().c_str())), f_181().size()));
      mutable_f_289()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_190_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_190()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_49().data())));
      sizes_list.push_back(f_49().size() * sizeof(int));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_76().data())));
      sizes_list.push_back(f_76().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_82().data())));
      sizes_list.push_back(f_82().size() * sizeof(float));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_114().size());
      for (int i = 0; i < f_114_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114(i).c_str())));
        sizes_list.push_back(f_114(i).size());
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_174().size());
      for (int i = 0; i < f_174_size(); ++i) {
        ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_174(i).c_str())));
        sizes_list.push_back(f_174(i).size());
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      sizes_list.push_back(f_12().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())));
      sizes_list.push_back(f_19().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      sizes_list.push_back(f_23().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      sizes_list.push_back(f_24().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      sizes_list.push_back(f_29().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())));
      sizes_list.push_back(f_32().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      sizes_list.push_back(f_40().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      sizes_list.push_back(f_46().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      sizes_list.push_back(f_53().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_57().c_str())));
      sizes_list.push_back(f_57().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_58().c_str())));
      sizes_list.push_back(f_58().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_60().c_str())));
      sizes_list.push_back(f_60().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())));
      sizes_list.push_back(f_61().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_74().c_str())));
      sizes_list.push_back(f_74().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())));
      sizes_list.push_back(f_84().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_87().c_str())));
      sizes_list.push_back(f_87().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())));
      sizes_list.push_back(f_95().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_96().c_str())));
      sizes_list.push_back(f_96().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_103().c_str())));
      sizes_list.push_back(f_103().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_104().c_str())));
      sizes_list.push_back(f_104().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())));
      sizes_list.push_back(f_106().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_108().c_str())));
      sizes_list.push_back(f_108().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())));
      sizes_list.push_back(f_113().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_115().c_str())));
      sizes_list.push_back(f_115().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_120().c_str())));
      sizes_list.push_back(f_120().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_123().c_str())));
      sizes_list.push_back(f_123().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_128().c_str())));
      sizes_list.push_back(f_128().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_129().c_str())));
      sizes_list.push_back(f_129().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_136().c_str())));
      sizes_list.push_back(f_136().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_150().c_str())));
      sizes_list.push_back(f_150().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())));
      sizes_list.push_back(f_153().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())));
      sizes_list.push_back(f_157().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_162().c_str())));
      sizes_list.push_back(f_162().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_164().c_str())));
      sizes_list.push_back(f_164().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_180().c_str())));
      sizes_list.push_back(f_180().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_181().c_str())));
      sizes_list.push_back(f_181().size());
      mutable_f_289()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_190_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_49().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_76().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_82().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_114_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114(i).c_str())));
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_174_size(); ++i) {
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_174(i).c_str())));
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_57().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_58().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_60().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_74().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_87().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_96().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_103().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_104().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_108().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_115().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_120().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_123().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_128().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_129().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_136().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_150().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_162().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_164().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_180().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_181().c_str())));
      mutable_f_289()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_190_);
      sizes.push_back(end_addr - start_addr + sizeof(f_190()));
      sizes.push_back(f_49().size() * sizeof(int));
      sizes.push_back(f_76().size() * sizeof(::int32_t));
      sizes.push_back(f_82().size() * sizeof(float));
      sizes.push_back(f_114().size());
      for (int i = 0; i < f_114_size(); ++i) {
        sizes.push_back(f_114(i).size());
      }
      sizes.push_back(f_174().size());
      for (int i = 0; i < f_174_size(); ++i) {
        sizes.push_back(f_174(i).size());
      }
      sizes.push_back(f_12().size());
      sizes.push_back(f_16().size());
      sizes.push_back(f_19().size());
      sizes.push_back(f_23().size());
      sizes.push_back(f_24().size());
      sizes.push_back(f_29().size());
      sizes.push_back(f_32().size());
      sizes.push_back(f_40().size());
      sizes.push_back(f_46().size());
      sizes.push_back(f_53().size());
      sizes.push_back(f_57().size());
      sizes.push_back(f_58().size());
      sizes.push_back(f_60().size());
      sizes.push_back(f_61().size());
      sizes.push_back(f_74().size());
      sizes.push_back(f_84().size());
      sizes.push_back(f_87().size());
      sizes.push_back(f_95().size());
      sizes.push_back(f_96().size());
      sizes.push_back(f_103().size());
      sizes.push_back(f_104().size());
      sizes.push_back(f_106().size());
      sizes.push_back(f_108().size());
      sizes.push_back(f_113().size());
      sizes.push_back(f_115().size());
      sizes.push_back(f_120().size());
      sizes.push_back(f_123().size());
      sizes.push_back(f_128().size());
      sizes.push_back(f_129().size());
      sizes.push_back(f_136().size());
      sizes.push_back(f_150().size());
      sizes.push_back(f_153().size());
      sizes.push_back(f_157().size());
      sizes.push_back(f_162().size());
      sizes.push_back(f_164().size());
      sizes.push_back(f_180().size());
      sizes.push_back(f_181().size());
      mutable_f_289()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_190_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_49()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_49().data())));
      mutable_f_76()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_76().data())));
      mutable_f_82()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_82().data())));
      size_t num_f_114_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_114_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_114(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_114(i).c_str())));
      }
      size_t num_f_174_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_174_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_174(std::move(tmp_str));
          ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_174(i).c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_12().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_19(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_19().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_23(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_23().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_24().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_29().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_32(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_32().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_40(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_40().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_46().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_53(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_53().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_57(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_57().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_58(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_58().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_60(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_60().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_61(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_61().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_74(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_74().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_84(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_84().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_87(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_87().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_95(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_95().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_96(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_96().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_103(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_103().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_104(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_104().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_106(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_106().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_108(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_108().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_113(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_113().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_115(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_115().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_120(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_120().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_123(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_123().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_128(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_128().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_129(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_129().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_136(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_136().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_150(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_150().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_153(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_153().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_157(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_157().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_162(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_162().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_164(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_164().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_180(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_180().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_181(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_181().c_str())));
      }
      idx = mutable_f_289()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_49()->Resize(sizes[idx++] / sizeof(int), 0);
      mutable_f_76()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_82()->Resize(sizes[idx++] / sizeof(float), 0);
      size_t num_f_114_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_114_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_114(std::move(tmp_str));
      }
      size_t num_f_174_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_174_entries; ++i) {
          std::string tmp_str(sizes[idx++], 'x');  // Preallocate needed size
          add_f_174(std::move(tmp_str));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_12(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_19(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_23(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_24(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_29(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_32(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_40(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_46(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_53(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_57(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_58(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_60(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_61(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_74(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_84(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_87(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_95(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_96(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_103(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_104(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_106(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_108(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_113(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_115(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_120(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_123(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_128(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_129(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_136(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_150(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_153(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_157(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_162(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_164(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_180(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_181(std::move(tmp_str));
        }
      }
      idx = mutable_f_289()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF49FieldNumber = 77,
    kF76FieldNumber = 117,
    kF82FieldNumber = 125,
    kF114FieldNumber = 175,
    kF174FieldNumber = 265,
    kF12FieldNumber = 20,
    kF16FieldNumber = 26,
    kF19FieldNumber = 31,
    kF23FieldNumber = 39,
    kF24FieldNumber = 40,
    kF29FieldNumber = 49,
    kF32FieldNumber = 53,
    kF40FieldNumber = 65,
    kF46FieldNumber = 73,
    kF53FieldNumber = 83,
    kF57FieldNumber = 89,
    kF58FieldNumber = 91,
    kF60FieldNumber = 95,
    kF61FieldNumber = 96,
    kF74FieldNumber = 115,
    kF84FieldNumber = 128,
    kF87FieldNumber = 134,
    kF95FieldNumber = 146,
    kF96FieldNumber = 147,
    kF103FieldNumber = 157,
    kF104FieldNumber = 158,
    kF106FieldNumber = 161,
    kF108FieldNumber = 166,
    kF113FieldNumber = 174,
    kF115FieldNumber = 178,
    kF120FieldNumber = 186,
    kF123FieldNumber = 191,
    kF128FieldNumber = 197,
    kF129FieldNumber = 198,
    kF136FieldNumber = 210,
    kF150FieldNumber = 231,
    kF153FieldNumber = 236,
    kF157FieldNumber = 240,
    kF162FieldNumber = 248,
    kF164FieldNumber = 252,
    kF180FieldNumber = 272,
    kF181FieldNumber = 273,
    kF289FieldNumber = 290,
    kF1FieldNumber = 3,
    kF3FieldNumber = 6,
    kF2FieldNumber = 4,
    kF5FieldNumber = 8,
    kF4FieldNumber = 7,
    kF6FieldNumber = 10,
    kF7FieldNumber = 11,
    kF10FieldNumber = 16,
    kF8FieldNumber = 14,
    kF9FieldNumber = 15,
    kF11FieldNumber = 18,
    kF13FieldNumber = 21,
    kF15FieldNumber = 25,
    kF14FieldNumber = 22,
    kF17FieldNumber = 28,
    kF18FieldNumber = 29,
    kF20FieldNumber = 32,
    kF21FieldNumber = 33,
    kF22FieldNumber = 38,
    kF25FieldNumber = 42,
    kF26FieldNumber = 43,
    kF27FieldNumber = 45,
    kF28FieldNumber = 47,
    kF30FieldNumber = 50,
    kF31FieldNumber = 52,
    kF34FieldNumber = 55,
    kF33FieldNumber = 54,
    kF35FieldNumber = 56,
    kF36FieldNumber = 57,
    kF37FieldNumber = 59,
    kF39FieldNumber = 63,
    kF38FieldNumber = 62,
    kF41FieldNumber = 67,
    kF42FieldNumber = 68,
    kF43FieldNumber = 69,
    kF44FieldNumber = 70,
    kF45FieldNumber = 71,
    kF50FieldNumber = 78,
    kF51FieldNumber = 79,
    kF48FieldNumber = 76,
    kF0FieldNumber = 2,
    kF47FieldNumber = 75,
    kF62FieldNumber = 97,
    kF100FieldNumber = 153,
    kF52FieldNumber = 82,
    kF55FieldNumber = 85,
    kF54FieldNumber = 84,
    kF56FieldNumber = 88,
    kF59FieldNumber = 93,
    kF63FieldNumber = 99,
    kF64FieldNumber = 100,
    kF65FieldNumber = 102,
    kF67FieldNumber = 105,
    kF68FieldNumber = 107,
    kF66FieldNumber = 104,
    kF69FieldNumber = 110,
    kF70FieldNumber = 111,
    kF71FieldNumber = 112,
    kF72FieldNumber = 113,
    kF75FieldNumber = 116,
    kF73FieldNumber = 114,
    kF80FieldNumber = 122,
    kF77FieldNumber = 119,
    kF78FieldNumber = 120,
    kF79FieldNumber = 121,
    kF83FieldNumber = 127,
    kF81FieldNumber = 123,
    kF86FieldNumber = 132,
    kF85FieldNumber = 130,
    kF89FieldNumber = 137,
    kF88FieldNumber = 136,
    kF90FieldNumber = 140,
    kF92FieldNumber = 143,
    kF91FieldNumber = 142,
    kF93FieldNumber = 144,
    kF94FieldNumber = 145,
    kF98FieldNumber = 150,
    kF97FieldNumber = 148,
    kF99FieldNumber = 152,
    kF101FieldNumber = 154,
    kF102FieldNumber = 156,
    kF105FieldNumber = 159,
    kF107FieldNumber = 164,
    kF109FieldNumber = 167,
    kF110FieldNumber = 169,
    kF112FieldNumber = 172,
    kF111FieldNumber = 171,
    kF116FieldNumber = 179,
    kF117FieldNumber = 180,
    kF119FieldNumber = 183,
    kF118FieldNumber = 182,
    kF124FieldNumber = 193,
    kF121FieldNumber = 189,
    kF122FieldNumber = 190,
    kF125FieldNumber = 194,
    kF126FieldNumber = 195,
    kF127FieldNumber = 196,
    kF130FieldNumber = 199,
    kF132FieldNumber = 202,
    kF131FieldNumber = 200,
    kF134FieldNumber = 205,
    kF133FieldNumber = 203,
    kF135FieldNumber = 208,
    kF138FieldNumber = 212,
    kF137FieldNumber = 211,
    kF139FieldNumber = 213,
    kF140FieldNumber = 214,
    kF141FieldNumber = 215,
    kF142FieldNumber = 218,
    kF144FieldNumber = 221,
    kF145FieldNumber = 225,
    kF147FieldNumber = 227,
    kF148FieldNumber = 229,
    kF149FieldNumber = 230,
    kF143FieldNumber = 219,
    kF146FieldNumber = 226,
    kF152FieldNumber = 235,
    kF161FieldNumber = 247,
    kF151FieldNumber = 234,
    kF154FieldNumber = 237,
    kF155FieldNumber = 238,
    kF156FieldNumber = 239,
    kF158FieldNumber = 241,
    kF160FieldNumber = 246,
    kF159FieldNumber = 244,
    kF165FieldNumber = 254,
    kF166FieldNumber = 255,
    kF163FieldNumber = 251,
    kF168FieldNumber = 259,
    kF167FieldNumber = 257,
    kF169FieldNumber = 260,
    kF170FieldNumber = 261,
    kF171FieldNumber = 262,
    kF173FieldNumber = 264,
    kF172FieldNumber = 263,
    kF175FieldNumber = 266,
    kF176FieldNumber = 268,
    kF177FieldNumber = 269,
    kF178FieldNumber = 270,
    kF179FieldNumber = 271,
    kF182FieldNumber = 275,
    kF183FieldNumber = 276,
    kF185FieldNumber = 279,
    kF184FieldNumber = 277,
    kF186FieldNumber = 281,
    kF188FieldNumber = 283,
    kF187FieldNumber = 282,
    kF189FieldNumber = 285,
    kF191FieldNumber = 289,
    kF190FieldNumber = 286,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E45 f_49 = 77 [packed = true];
  int f_49_size() const;
  private:
  int _internal_f_49_size() const;

  public:
  void clear_f_49() ;
  public:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 f_49(int index) const;
  void set_f_49(int index, ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 value);
  void add_f_49(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 value);
  const ::google::protobuf::RepeatedField<int>& f_49() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_49();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_49() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_49();

  public:
  // repeated int32 f_76 = 117 [packed = true];
  int f_76_size() const;
  private:
  int _internal_f_76_size() const;

  public:
  void clear_f_76() ;
  ::int32_t f_76(int index) const;
  void set_f_76(int index, ::int32_t value);
  void add_f_76(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_76() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_76();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_76() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_76();

  public:
  // repeated float f_82 = 125 [packed = true];
  int f_82_size() const;
  private:
  int _internal_f_82_size() const;

  public:
  void clear_f_82() ;
  float f_82(int index) const;
  void set_f_82(int index, float value);
  void add_f_82(float value);
  const ::google::protobuf::RepeatedField<float>& f_82() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_82();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_82() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_82();

  public:
  // repeated bytes f_114 = 175;
  int f_114_size() const;
  private:
  int _internal_f_114_size() const;

  public:
  void clear_f_114() ;
  const std::string& f_114(int index) const;
  std::string* mutable_f_114(int index);
  void set_f_114(int index, const std::string& value);
  void set_f_114(int index, std::string&& value);
  void set_f_114(int index, const char* value);
  void set_f_114(int index, const void* value, std::size_t size);
  void set_f_114(int index, absl::string_view value);
  std::string* add_f_114();
  void add_f_114(const std::string& value);
  void add_f_114(std::string&& value);
  void add_f_114(const char* value);
  void add_f_114(const void* value, std::size_t size);
  void add_f_114(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_114() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_114();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_114() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_114();

  public:
  // repeated string f_174 = 265;
  int f_174_size() const;
  private:
  int _internal_f_174_size() const;

  public:
  void clear_f_174() ;
  const std::string& f_174(int index) const;
  std::string* mutable_f_174(int index);
  void set_f_174(int index, const std::string& value);
  void set_f_174(int index, std::string&& value);
  void set_f_174(int index, const char* value);
  void set_f_174(int index, const char* value, std::size_t size);
  void set_f_174(int index, absl::string_view value);
  std::string* add_f_174();
  void add_f_174(const std::string& value);
  void add_f_174(std::string&& value);
  void add_f_174(const char* value);
  void add_f_174(const char* value, std::size_t size);
  void add_f_174(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& f_174() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_f_174();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_f_174() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_f_174();

  public:
  // optional string f_12 = 20;
  bool has_f_12() const;
  void clear_f_12() ;
  const std::string& f_12() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_12(Arg_&& arg, Args_... args);
  std::string* mutable_f_12();
  PROTOBUF_NODISCARD std::string* release_f_12();
  void set_allocated_f_12(std::string* value);

  private:
  const std::string& _internal_f_12() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_12(
      const std::string& value);
  std::string* _internal_mutable_f_12();

  public:
  // optional string f_16 = 26;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional string f_19 = 31;
  bool has_f_19() const;
  void clear_f_19() ;
  const std::string& f_19() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_19(Arg_&& arg, Args_... args);
  std::string* mutable_f_19();
  PROTOBUF_NODISCARD std::string* release_f_19();
  void set_allocated_f_19(std::string* value);

  private:
  const std::string& _internal_f_19() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_19(
      const std::string& value);
  std::string* _internal_mutable_f_19();

  public:
  // optional string f_23 = 39;
  bool has_f_23() const;
  void clear_f_23() ;
  const std::string& f_23() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_23(Arg_&& arg, Args_... args);
  std::string* mutable_f_23();
  PROTOBUF_NODISCARD std::string* release_f_23();
  void set_allocated_f_23(std::string* value);

  private:
  const std::string& _internal_f_23() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_23(
      const std::string& value);
  std::string* _internal_mutable_f_23();

  public:
  // optional string f_24 = 40;
  bool has_f_24() const;
  void clear_f_24() ;
  const std::string& f_24() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_24(Arg_&& arg, Args_... args);
  std::string* mutable_f_24();
  PROTOBUF_NODISCARD std::string* release_f_24();
  void set_allocated_f_24(std::string* value);

  private:
  const std::string& _internal_f_24() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_24(
      const std::string& value);
  std::string* _internal_mutable_f_24();

  public:
  // optional string f_29 = 49;
  bool has_f_29() const;
  void clear_f_29() ;
  const std::string& f_29() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_29(Arg_&& arg, Args_... args);
  std::string* mutable_f_29();
  PROTOBUF_NODISCARD std::string* release_f_29();
  void set_allocated_f_29(std::string* value);

  private:
  const std::string& _internal_f_29() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_29(
      const std::string& value);
  std::string* _internal_mutable_f_29();

  public:
  // optional string f_32 = 53;
  bool has_f_32() const;
  void clear_f_32() ;
  const std::string& f_32() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_32(Arg_&& arg, Args_... args);
  std::string* mutable_f_32();
  PROTOBUF_NODISCARD std::string* release_f_32();
  void set_allocated_f_32(std::string* value);

  private:
  const std::string& _internal_f_32() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_32(
      const std::string& value);
  std::string* _internal_mutable_f_32();

  public:
  // optional bytes f_40 = 65;
  bool has_f_40() const;
  void clear_f_40() ;
  const std::string& f_40() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_40(Arg_&& arg, Args_... args);
  std::string* mutable_f_40();
  PROTOBUF_NODISCARD std::string* release_f_40();
  void set_allocated_f_40(std::string* value);

  private:
  const std::string& _internal_f_40() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_40(
      const std::string& value);
  std::string* _internal_mutable_f_40();

  public:
  // optional string f_46 = 73;
  bool has_f_46() const;
  void clear_f_46() ;
  const std::string& f_46() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_46(Arg_&& arg, Args_... args);
  std::string* mutable_f_46();
  PROTOBUF_NODISCARD std::string* release_f_46();
  void set_allocated_f_46(std::string* value);

  private:
  const std::string& _internal_f_46() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_46(
      const std::string& value);
  std::string* _internal_mutable_f_46();

  public:
  // optional string f_53 = 83;
  bool has_f_53() const;
  void clear_f_53() ;
  const std::string& f_53() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_53(Arg_&& arg, Args_... args);
  std::string* mutable_f_53();
  PROTOBUF_NODISCARD std::string* release_f_53();
  void set_allocated_f_53(std::string* value);

  private:
  const std::string& _internal_f_53() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_53(
      const std::string& value);
  std::string* _internal_mutable_f_53();

  public:
  // optional string f_57 = 89;
  bool has_f_57() const;
  void clear_f_57() ;
  const std::string& f_57() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_57(Arg_&& arg, Args_... args);
  std::string* mutable_f_57();
  PROTOBUF_NODISCARD std::string* release_f_57();
  void set_allocated_f_57(std::string* value);

  private:
  const std::string& _internal_f_57() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_57(
      const std::string& value);
  std::string* _internal_mutable_f_57();

  public:
  // optional string f_58 = 91;
  bool has_f_58() const;
  void clear_f_58() ;
  const std::string& f_58() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_58(Arg_&& arg, Args_... args);
  std::string* mutable_f_58();
  PROTOBUF_NODISCARD std::string* release_f_58();
  void set_allocated_f_58(std::string* value);

  private:
  const std::string& _internal_f_58() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_58(
      const std::string& value);
  std::string* _internal_mutable_f_58();

  public:
  // optional bytes f_60 = 95;
  bool has_f_60() const;
  void clear_f_60() ;
  const std::string& f_60() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_60(Arg_&& arg, Args_... args);
  std::string* mutable_f_60();
  PROTOBUF_NODISCARD std::string* release_f_60();
  void set_allocated_f_60(std::string* value);

  private:
  const std::string& _internal_f_60() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_60(
      const std::string& value);
  std::string* _internal_mutable_f_60();

  public:
  // optional string f_61 = 96;
  bool has_f_61() const;
  void clear_f_61() ;
  const std::string& f_61() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_61(Arg_&& arg, Args_... args);
  std::string* mutable_f_61();
  PROTOBUF_NODISCARD std::string* release_f_61();
  void set_allocated_f_61(std::string* value);

  private:
  const std::string& _internal_f_61() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_61(
      const std::string& value);
  std::string* _internal_mutable_f_61();

  public:
  // optional string f_74 = 115;
  bool has_f_74() const;
  void clear_f_74() ;
  const std::string& f_74() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_74(Arg_&& arg, Args_... args);
  std::string* mutable_f_74();
  PROTOBUF_NODISCARD std::string* release_f_74();
  void set_allocated_f_74(std::string* value);

  private:
  const std::string& _internal_f_74() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_74(
      const std::string& value);
  std::string* _internal_mutable_f_74();

  public:
  // optional string f_84 = 128;
  bool has_f_84() const;
  void clear_f_84() ;
  const std::string& f_84() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_84(Arg_&& arg, Args_... args);
  std::string* mutable_f_84();
  PROTOBUF_NODISCARD std::string* release_f_84();
  void set_allocated_f_84(std::string* value);

  private:
  const std::string& _internal_f_84() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_84(
      const std::string& value);
  std::string* _internal_mutable_f_84();

  public:
  // optional string f_87 = 134;
  bool has_f_87() const;
  void clear_f_87() ;
  const std::string& f_87() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_87(Arg_&& arg, Args_... args);
  std::string* mutable_f_87();
  PROTOBUF_NODISCARD std::string* release_f_87();
  void set_allocated_f_87(std::string* value);

  private:
  const std::string& _internal_f_87() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_87(
      const std::string& value);
  std::string* _internal_mutable_f_87();

  public:
  // optional string f_95 = 146;
  bool has_f_95() const;
  void clear_f_95() ;
  const std::string& f_95() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_95(Arg_&& arg, Args_... args);
  std::string* mutable_f_95();
  PROTOBUF_NODISCARD std::string* release_f_95();
  void set_allocated_f_95(std::string* value);

  private:
  const std::string& _internal_f_95() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_95(
      const std::string& value);
  std::string* _internal_mutable_f_95();

  public:
  // optional string f_96 = 147;
  bool has_f_96() const;
  void clear_f_96() ;
  const std::string& f_96() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_96(Arg_&& arg, Args_... args);
  std::string* mutable_f_96();
  PROTOBUF_NODISCARD std::string* release_f_96();
  void set_allocated_f_96(std::string* value);

  private:
  const std::string& _internal_f_96() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_96(
      const std::string& value);
  std::string* _internal_mutable_f_96();

  public:
  // optional string f_103 = 157;
  bool has_f_103() const;
  void clear_f_103() ;
  const std::string& f_103() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_103(Arg_&& arg, Args_... args);
  std::string* mutable_f_103();
  PROTOBUF_NODISCARD std::string* release_f_103();
  void set_allocated_f_103(std::string* value);

  private:
  const std::string& _internal_f_103() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_103(
      const std::string& value);
  std::string* _internal_mutable_f_103();

  public:
  // optional string f_104 = 158;
  bool has_f_104() const;
  void clear_f_104() ;
  const std::string& f_104() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_104(Arg_&& arg, Args_... args);
  std::string* mutable_f_104();
  PROTOBUF_NODISCARD std::string* release_f_104();
  void set_allocated_f_104(std::string* value);

  private:
  const std::string& _internal_f_104() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_104(
      const std::string& value);
  std::string* _internal_mutable_f_104();

  public:
  // optional string f_106 = 161;
  bool has_f_106() const;
  void clear_f_106() ;
  const std::string& f_106() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_106(Arg_&& arg, Args_... args);
  std::string* mutable_f_106();
  PROTOBUF_NODISCARD std::string* release_f_106();
  void set_allocated_f_106(std::string* value);

  private:
  const std::string& _internal_f_106() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_106(
      const std::string& value);
  std::string* _internal_mutable_f_106();

  public:
  // optional string f_108 = 166;
  bool has_f_108() const;
  void clear_f_108() ;
  const std::string& f_108() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_108(Arg_&& arg, Args_... args);
  std::string* mutable_f_108();
  PROTOBUF_NODISCARD std::string* release_f_108();
  void set_allocated_f_108(std::string* value);

  private:
  const std::string& _internal_f_108() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_108(
      const std::string& value);
  std::string* _internal_mutable_f_108();

  public:
  // optional string f_113 = 174;
  bool has_f_113() const;
  void clear_f_113() ;
  const std::string& f_113() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_113(Arg_&& arg, Args_... args);
  std::string* mutable_f_113();
  PROTOBUF_NODISCARD std::string* release_f_113();
  void set_allocated_f_113(std::string* value);

  private:
  const std::string& _internal_f_113() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_113(
      const std::string& value);
  std::string* _internal_mutable_f_113();

  public:
  // optional string f_115 = 178;
  bool has_f_115() const;
  void clear_f_115() ;
  const std::string& f_115() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_115(Arg_&& arg, Args_... args);
  std::string* mutable_f_115();
  PROTOBUF_NODISCARD std::string* release_f_115();
  void set_allocated_f_115(std::string* value);

  private:
  const std::string& _internal_f_115() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_115(
      const std::string& value);
  std::string* _internal_mutable_f_115();

  public:
  // optional bytes f_120 = 186;
  bool has_f_120() const;
  void clear_f_120() ;
  const std::string& f_120() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_120(Arg_&& arg, Args_... args);
  std::string* mutable_f_120();
  PROTOBUF_NODISCARD std::string* release_f_120();
  void set_allocated_f_120(std::string* value);

  private:
  const std::string& _internal_f_120() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_120(
      const std::string& value);
  std::string* _internal_mutable_f_120();

  public:
  // optional string f_123 = 191;
  bool has_f_123() const;
  void clear_f_123() ;
  const std::string& f_123() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_123(Arg_&& arg, Args_... args);
  std::string* mutable_f_123();
  PROTOBUF_NODISCARD std::string* release_f_123();
  void set_allocated_f_123(std::string* value);

  private:
  const std::string& _internal_f_123() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_123(
      const std::string& value);
  std::string* _internal_mutable_f_123();

  public:
  // optional string f_128 = 197;
  bool has_f_128() const;
  void clear_f_128() ;
  const std::string& f_128() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_128(Arg_&& arg, Args_... args);
  std::string* mutable_f_128();
  PROTOBUF_NODISCARD std::string* release_f_128();
  void set_allocated_f_128(std::string* value);

  private:
  const std::string& _internal_f_128() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_128(
      const std::string& value);
  std::string* _internal_mutable_f_128();

  public:
  // optional string f_129 = 198;
  bool has_f_129() const;
  void clear_f_129() ;
  const std::string& f_129() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_129(Arg_&& arg, Args_... args);
  std::string* mutable_f_129();
  PROTOBUF_NODISCARD std::string* release_f_129();
  void set_allocated_f_129(std::string* value);

  private:
  const std::string& _internal_f_129() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_129(
      const std::string& value);
  std::string* _internal_mutable_f_129();

  public:
  // optional string f_136 = 210;
  bool has_f_136() const;
  void clear_f_136() ;
  const std::string& f_136() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_136(Arg_&& arg, Args_... args);
  std::string* mutable_f_136();
  PROTOBUF_NODISCARD std::string* release_f_136();
  void set_allocated_f_136(std::string* value);

  private:
  const std::string& _internal_f_136() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_136(
      const std::string& value);
  std::string* _internal_mutable_f_136();

  public:
  // optional string f_150 = 231;
  bool has_f_150() const;
  void clear_f_150() ;
  const std::string& f_150() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_150(Arg_&& arg, Args_... args);
  std::string* mutable_f_150();
  PROTOBUF_NODISCARD std::string* release_f_150();
  void set_allocated_f_150(std::string* value);

  private:
  const std::string& _internal_f_150() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_150(
      const std::string& value);
  std::string* _internal_mutable_f_150();

  public:
  // optional string f_153 = 236;
  bool has_f_153() const;
  void clear_f_153() ;
  const std::string& f_153() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_153(Arg_&& arg, Args_... args);
  std::string* mutable_f_153();
  PROTOBUF_NODISCARD std::string* release_f_153();
  void set_allocated_f_153(std::string* value);

  private:
  const std::string& _internal_f_153() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_153(
      const std::string& value);
  std::string* _internal_mutable_f_153();

  public:
  // optional bytes f_157 = 240;
  bool has_f_157() const;
  void clear_f_157() ;
  const std::string& f_157() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_157(Arg_&& arg, Args_... args);
  std::string* mutable_f_157();
  PROTOBUF_NODISCARD std::string* release_f_157();
  void set_allocated_f_157(std::string* value);

  private:
  const std::string& _internal_f_157() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_157(
      const std::string& value);
  std::string* _internal_mutable_f_157();

  public:
  // optional string f_162 = 248;
  bool has_f_162() const;
  void clear_f_162() ;
  const std::string& f_162() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_162(Arg_&& arg, Args_... args);
  std::string* mutable_f_162();
  PROTOBUF_NODISCARD std::string* release_f_162();
  void set_allocated_f_162(std::string* value);

  private:
  const std::string& _internal_f_162() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_162(
      const std::string& value);
  std::string* _internal_mutable_f_162();

  public:
  // optional string f_164 = 252;
  bool has_f_164() const;
  void clear_f_164() ;
  const std::string& f_164() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_164(Arg_&& arg, Args_... args);
  std::string* mutable_f_164();
  PROTOBUF_NODISCARD std::string* release_f_164();
  void set_allocated_f_164(std::string* value);

  private:
  const std::string& _internal_f_164() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_164(
      const std::string& value);
  std::string* _internal_mutable_f_164();

  public:
  // optional string f_180 = 272;
  bool has_f_180() const;
  void clear_f_180() ;
  const std::string& f_180() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_180(Arg_&& arg, Args_... args);
  std::string* mutable_f_180();
  PROTOBUF_NODISCARD std::string* release_f_180();
  void set_allocated_f_180(std::string* value);

  private:
  const std::string& _internal_f_180() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_180(
      const std::string& value);
  std::string* _internal_mutable_f_180();

  public:
  // optional string f_181 = 273;
  bool has_f_181() const;
  void clear_f_181() ;
  const std::string& f_181() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_181(Arg_&& arg, Args_... args);
  std::string* mutable_f_181();
  PROTOBUF_NODISCARD std::string* release_f_181();
  void set_allocated_f_181(std::string* value);

  private:
  const std::string& _internal_f_181() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_181(
      const std::string& value);
  std::string* _internal_mutable_f_181();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94 f_289 = 290;
  bool has_f_289() const;
  void clear_f_289() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& f_289() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* release_f_289();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* mutable_f_289();
  void set_allocated_f_289(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* value);
  void unsafe_arena_set_allocated_f_289(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* unsafe_arena_release_f_289();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& _internal_f_289() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* _internal_mutable_f_289();

  public:
  // optional uint64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint64_t f_1() const;
  void set_f_1(::uint64_t value);

  private:
  ::uint64_t _internal_f_1() const;
  void _internal_set_f_1(::uint64_t value);

  public:
  // optional double f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  double f_3() const;
  void set_f_3(double value);

  private:
  double _internal_f_3() const;
  void _internal_set_f_3(double value);

  public:
  // optional int32 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional int32 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional fixed64 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::uint64_t f_4() const;
  void set_f_4(::uint64_t value);

  private:
  ::uint64_t _internal_f_4() const;
  void _internal_set_f_4(::uint64_t value);

  public:
  // optional int64 f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E35 f_7 = 11;
  bool has_f_7() const;
  void clear_f_7() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 f_7() const;
  void set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 _internal_f_7() const;
  void _internal_set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 value);

  public:
  // optional int32 f_10 = 16;
  bool has_f_10() const;
  void clear_f_10() ;
  ::int32_t f_10() const;
  void set_f_10(::int32_t value);

  private:
  ::int32_t _internal_f_10() const;
  void _internal_set_f_10(::int32_t value);

  public:
  // optional fixed64 f_8 = 14;
  bool has_f_8() const;
  void clear_f_8() ;
  ::uint64_t f_8() const;
  void set_f_8(::uint64_t value);

  private:
  ::uint64_t _internal_f_8() const;
  void _internal_set_f_8(::uint64_t value);

  public:
  // optional uint64 f_9 = 15;
  bool has_f_9() const;
  void clear_f_9() ;
  ::uint64_t f_9() const;
  void set_f_9(::uint64_t value);

  private:
  ::uint64_t _internal_f_9() const;
  void _internal_set_f_9(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E36 f_11 = 18;
  bool has_f_11() const;
  void clear_f_11() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 f_11() const;
  void set_f_11(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 _internal_f_11() const;
  void _internal_set_f_11(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 value);

  public:
  // optional float f_13 = 21;
  bool has_f_13() const;
  void clear_f_13() ;
  float f_13() const;
  void set_f_13(float value);

  private:
  float _internal_f_13() const;
  void _internal_set_f_13(float value);

  public:
  // optional int64 f_15 = 25;
  bool has_f_15() const;
  void clear_f_15() ;
  ::int64_t f_15() const;
  void set_f_15(::int64_t value);

  private:
  ::int64_t _internal_f_15() const;
  void _internal_set_f_15(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E37 f_14 = 22;
  bool has_f_14() const;
  void clear_f_14() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 f_14() const;
  void set_f_14(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 _internal_f_14() const;
  void _internal_set_f_14(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E38 f_17 = 28;
  bool has_f_17() const;
  void clear_f_17() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 f_17() const;
  void set_f_17(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 _internal_f_17() const;
  void _internal_set_f_17(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E39 f_18 = 29;
  bool has_f_18() const;
  void clear_f_18() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 f_18() const;
  void set_f_18(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 _internal_f_18() const;
  void _internal_set_f_18(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 value);

  public:
  // optional int32 f_20 = 32;
  bool has_f_20() const;
  void clear_f_20() ;
  ::int32_t f_20() const;
  void set_f_20(::int32_t value);

  private:
  ::int32_t _internal_f_20() const;
  void _internal_set_f_20(::int32_t value);

  public:
  // optional uint64 f_21 = 33;
  bool has_f_21() const;
  void clear_f_21() ;
  ::uint64_t f_21() const;
  void set_f_21(::uint64_t value);

  private:
  ::uint64_t _internal_f_21() const;
  void _internal_set_f_21(::uint64_t value);

  public:
  // optional int32 f_22 = 38;
  bool has_f_22() const;
  void clear_f_22() ;
  ::int32_t f_22() const;
  void set_f_22(::int32_t value);

  private:
  ::int32_t _internal_f_22() const;
  void _internal_set_f_22(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E40 f_25 = 42;
  bool has_f_25() const;
  void clear_f_25() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 f_25() const;
  void set_f_25(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 _internal_f_25() const;
  void _internal_set_f_25(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 value);

  public:
  // optional float f_26 = 43;
  bool has_f_26() const;
  void clear_f_26() ;
  float f_26() const;
  void set_f_26(float value);

  private:
  float _internal_f_26() const;
  void _internal_set_f_26(float value);

  public:
  // optional float f_27 = 45;
  bool has_f_27() const;
  void clear_f_27() ;
  float f_27() const;
  void set_f_27(float value);

  private:
  float _internal_f_27() const;
  void _internal_set_f_27(float value);

  public:
  // optional float f_28 = 47;
  bool has_f_28() const;
  void clear_f_28() ;
  float f_28() const;
  void set_f_28(float value);

  private:
  float _internal_f_28() const;
  void _internal_set_f_28(float value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E41 f_30 = 50;
  bool has_f_30() const;
  void clear_f_30() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 f_30() const;
  void set_f_30(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 _internal_f_30() const;
  void _internal_set_f_30(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 value);

  public:
  // optional int64 f_31 = 52;
  bool has_f_31() const;
  void clear_f_31() ;
  ::int64_t f_31() const;
  void set_f_31(::int64_t value);

  private:
  ::int64_t _internal_f_31() const;
  void _internal_set_f_31(::int64_t value);

  public:
  // optional uint64 f_34 = 55;
  bool has_f_34() const;
  void clear_f_34() ;
  ::uint64_t f_34() const;
  void set_f_34(::uint64_t value);

  private:
  ::uint64_t _internal_f_34() const;
  void _internal_set_f_34(::uint64_t value);

  public:
  // optional float f_33 = 54;
  bool has_f_33() const;
  void clear_f_33() ;
  float f_33() const;
  void set_f_33(float value);

  private:
  float _internal_f_33() const;
  void _internal_set_f_33(float value);

  public:
  // optional float f_35 = 56;
  bool has_f_35() const;
  void clear_f_35() ;
  float f_35() const;
  void set_f_35(float value);

  private:
  float _internal_f_35() const;
  void _internal_set_f_35(float value);

  public:
  // optional float f_36 = 57;
  bool has_f_36() const;
  void clear_f_36() ;
  float f_36() const;
  void set_f_36(float value);

  private:
  float _internal_f_36() const;
  void _internal_set_f_36(float value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E42 f_37 = 59;
  bool has_f_37() const;
  void clear_f_37() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 f_37() const;
  void set_f_37(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 _internal_f_37() const;
  void _internal_set_f_37(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 value);

  public:
  // optional int64 f_39 = 63;
  bool has_f_39() const;
  void clear_f_39() ;
  ::int64_t f_39() const;
  void set_f_39(::int64_t value);

  private:
  ::int64_t _internal_f_39() const;
  void _internal_set_f_39(::int64_t value);

  public:
  // optional int32 f_38 = 62;
  bool has_f_38() const;
  void clear_f_38() ;
  ::int32_t f_38() const;
  void set_f_38(::int32_t value);

  private:
  ::int32_t _internal_f_38() const;
  void _internal_set_f_38(::int32_t value);

  public:
  // optional uint32 f_41 = 67;
  bool has_f_41() const;
  void clear_f_41() ;
  ::uint32_t f_41() const;
  void set_f_41(::uint32_t value);

  private:
  ::uint32_t _internal_f_41() const;
  void _internal_set_f_41(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E43 f_42 = 68;
  bool has_f_42() const;
  void clear_f_42() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 f_42() const;
  void set_f_42(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 _internal_f_42() const;
  void _internal_set_f_42(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E44 f_43 = 69;
  bool has_f_43() const;
  void clear_f_43() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 f_43() const;
  void set_f_43(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 _internal_f_43() const;
  void _internal_set_f_43(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 value);

  public:
  // optional sfixed32 f_44 = 70;
  bool has_f_44() const;
  void clear_f_44() ;
  ::int32_t f_44() const;
  void set_f_44(::int32_t value);

  private:
  ::int32_t _internal_f_44() const;
  void _internal_set_f_44(::int32_t value);

  public:
  // optional int32 f_45 = 71;
  bool has_f_45() const;
  void clear_f_45() ;
  ::int32_t f_45() const;
  void set_f_45(::int32_t value);

  private:
  ::int32_t _internal_f_45() const;
  void _internal_set_f_45(::int32_t value);

  public:
  // optional int64 f_50 = 78;
  bool has_f_50() const;
  void clear_f_50() ;
  ::int64_t f_50() const;
  void set_f_50(::int64_t value);

  private:
  ::int64_t _internal_f_50() const;
  void _internal_set_f_50(::int64_t value);

  public:
  // optional double f_51 = 79;
  bool has_f_51() const;
  void clear_f_51() ;
  double f_51() const;
  void set_f_51(double value);

  private:
  double _internal_f_51() const;
  void _internal_set_f_51(double value);

  public:
  // optional fixed32 f_48 = 76;
  bool has_f_48() const;
  void clear_f_48() ;
  ::uint32_t f_48() const;
  void set_f_48(::uint32_t value);

  private:
  ::uint32_t _internal_f_48() const;
  void _internal_set_f_48(::uint32_t value);

  public:
  // optional bool f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // optional bool f_47 = 75;
  bool has_f_47() const;
  void clear_f_47() ;
  bool f_47() const;
  void set_f_47(bool value);

  private:
  bool _internal_f_47() const;
  void _internal_set_f_47(bool value);

  public:
  // optional bool f_62 = 97;
  bool has_f_62() const;
  void clear_f_62() ;
  bool f_62() const;
  void set_f_62(bool value);

  private:
  bool _internal_f_62() const;
  void _internal_set_f_62(bool value);

  public:
  // optional bool f_100 = 153;
  bool has_f_100() const;
  void clear_f_100() ;
  bool f_100() const;
  void set_f_100(bool value);

  private:
  bool _internal_f_100() const;
  void _internal_set_f_100(bool value);

  public:
  // optional int64 f_52 = 82;
  bool has_f_52() const;
  void clear_f_52() ;
  ::int64_t f_52() const;
  void set_f_52(::int64_t value);

  private:
  ::int64_t _internal_f_52() const;
  void _internal_set_f_52(::int64_t value);

  public:
  // optional int64 f_55 = 85;
  bool has_f_55() const;
  void clear_f_55() ;
  ::int64_t f_55() const;
  void set_f_55(::int64_t value);

  private:
  ::int64_t _internal_f_55() const;
  void _internal_set_f_55(::int64_t value);

  public:
  // optional int32 f_54 = 84;
  bool has_f_54() const;
  void clear_f_54() ;
  ::int32_t f_54() const;
  void set_f_54(::int32_t value);

  private:
  ::int32_t _internal_f_54() const;
  void _internal_set_f_54(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E46 f_56 = 88;
  bool has_f_56() const;
  void clear_f_56() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 f_56() const;
  void set_f_56(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 _internal_f_56() const;
  void _internal_set_f_56(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 value);

  public:
  // optional uint64 f_59 = 93;
  bool has_f_59() const;
  void clear_f_59() ;
  ::uint64_t f_59() const;
  void set_f_59(::uint64_t value);

  private:
  ::uint64_t _internal_f_59() const;
  void _internal_set_f_59(::uint64_t value);

  public:
  // optional int64 f_63 = 99;
  bool has_f_63() const;
  void clear_f_63() ;
  ::int64_t f_63() const;
  void set_f_63(::int64_t value);

  private:
  ::int64_t _internal_f_63() const;
  void _internal_set_f_63(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E47 f_64 = 100;
  bool has_f_64() const;
  void clear_f_64() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 f_64() const;
  void set_f_64(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 _internal_f_64() const;
  void _internal_set_f_64(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E48 f_65 = 102;
  bool has_f_65() const;
  void clear_f_65() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 f_65() const;
  void set_f_65(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 _internal_f_65() const;
  void _internal_set_f_65(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 value);

  public:
  // optional int64 f_67 = 105;
  bool has_f_67() const;
  void clear_f_67() ;
  ::int64_t f_67() const;
  void set_f_67(::int64_t value);

  private:
  ::int64_t _internal_f_67() const;
  void _internal_set_f_67(::int64_t value);

  public:
  // optional uint64 f_68 = 107;
  bool has_f_68() const;
  void clear_f_68() ;
  ::uint64_t f_68() const;
  void set_f_68(::uint64_t value);

  private:
  ::uint64_t _internal_f_68() const;
  void _internal_set_f_68(::uint64_t value);

  public:
  // optional fixed32 f_66 = 104;
  bool has_f_66() const;
  void clear_f_66() ;
  ::uint32_t f_66() const;
  void set_f_66(::uint32_t value);

  private:
  ::uint32_t _internal_f_66() const;
  void _internal_set_f_66(::uint32_t value);

  public:
  // optional fixed32 f_69 = 110;
  bool has_f_69() const;
  void clear_f_69() ;
  ::uint32_t f_69() const;
  void set_f_69(::uint32_t value);

  private:
  ::uint32_t _internal_f_69() const;
  void _internal_set_f_69(::uint32_t value);

  public:
  // optional int64 f_70 = 111;
  bool has_f_70() const;
  void clear_f_70() ;
  ::int64_t f_70() const;
  void set_f_70(::int64_t value);

  private:
  ::int64_t _internal_f_70() const;
  void _internal_set_f_70(::int64_t value);

  public:
  // optional int32 f_71 = 112;
  bool has_f_71() const;
  void clear_f_71() ;
  ::int32_t f_71() const;
  void set_f_71(::int32_t value);

  private:
  ::int32_t _internal_f_71() const;
  void _internal_set_f_71(::int32_t value);

  public:
  // optional fixed32 f_72 = 113;
  bool has_f_72() const;
  void clear_f_72() ;
  ::uint32_t f_72() const;
  void set_f_72(::uint32_t value);

  private:
  ::uint32_t _internal_f_72() const;
  void _internal_set_f_72(::uint32_t value);

  public:
  // optional int64 f_75 = 116;
  bool has_f_75() const;
  void clear_f_75() ;
  ::int64_t f_75() const;
  void set_f_75(::int64_t value);

  private:
  ::int64_t _internal_f_75() const;
  void _internal_set_f_75(::int64_t value);

  public:
  // optional float f_73 = 114;
  bool has_f_73() const;
  void clear_f_73() ;
  float f_73() const;
  void set_f_73(float value);

  private:
  float _internal_f_73() const;
  void _internal_set_f_73(float value);

  public:
  // optional int32 f_80 = 122;
  bool has_f_80() const;
  void clear_f_80() ;
  ::int32_t f_80() const;
  void set_f_80(::int32_t value);

  private:
  ::int32_t _internal_f_80() const;
  void _internal_set_f_80(::int32_t value);

  public:
  // optional int64 f_77 = 119;
  bool has_f_77() const;
  void clear_f_77() ;
  ::int64_t f_77() const;
  void set_f_77(::int64_t value);

  private:
  ::int64_t _internal_f_77() const;
  void _internal_set_f_77(::int64_t value);

  public:
  // optional int64 f_78 = 120;
  bool has_f_78() const;
  void clear_f_78() ;
  ::int64_t f_78() const;
  void set_f_78(::int64_t value);

  private:
  ::int64_t _internal_f_78() const;
  void _internal_set_f_78(::int64_t value);

  public:
  // optional int64 f_79 = 121;
  bool has_f_79() const;
  void clear_f_79() ;
  ::int64_t f_79() const;
  void set_f_79(::int64_t value);

  private:
  ::int64_t _internal_f_79() const;
  void _internal_set_f_79(::int64_t value);

  public:
  // optional int64 f_83 = 127;
  bool has_f_83() const;
  void clear_f_83() ;
  ::int64_t f_83() const;
  void set_f_83(::int64_t value);

  private:
  ::int64_t _internal_f_83() const;
  void _internal_set_f_83(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E49 f_81 = 123;
  bool has_f_81() const;
  void clear_f_81() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 f_81() const;
  void set_f_81(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 _internal_f_81() const;
  void _internal_set_f_81(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E50 f_86 = 132;
  bool has_f_86() const;
  void clear_f_86() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 f_86() const;
  void set_f_86(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 _internal_f_86() const;
  void _internal_set_f_86(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 value);

  public:
  // optional uint64 f_85 = 130;
  bool has_f_85() const;
  void clear_f_85() ;
  ::uint64_t f_85() const;
  void set_f_85(::uint64_t value);

  private:
  ::uint64_t _internal_f_85() const;
  void _internal_set_f_85(::uint64_t value);

  public:
  // optional int64 f_89 = 137;
  bool has_f_89() const;
  void clear_f_89() ;
  ::int64_t f_89() const;
  void set_f_89(::int64_t value);

  private:
  ::int64_t _internal_f_89() const;
  void _internal_set_f_89(::int64_t value);

  public:
  // optional int32 f_88 = 136;
  bool has_f_88() const;
  void clear_f_88() ;
  ::int32_t f_88() const;
  void set_f_88(::int32_t value);

  private:
  ::int32_t _internal_f_88() const;
  void _internal_set_f_88(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E51 f_90 = 140;
  bool has_f_90() const;
  void clear_f_90() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 f_90() const;
  void set_f_90(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 _internal_f_90() const;
  void _internal_set_f_90(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 value);

  public:
  // optional int64 f_92 = 143;
  bool has_f_92() const;
  void clear_f_92() ;
  ::int64_t f_92() const;
  void set_f_92(::int64_t value);

  private:
  ::int64_t _internal_f_92() const;
  void _internal_set_f_92(::int64_t value);

  public:
  // optional int32 f_91 = 142;
  bool has_f_91() const;
  void clear_f_91() ;
  ::int32_t f_91() const;
  void set_f_91(::int32_t value);

  private:
  ::int32_t _internal_f_91() const;
  void _internal_set_f_91(::int32_t value);

  public:
  // optional int32 f_93 = 144;
  bool has_f_93() const;
  void clear_f_93() ;
  ::int32_t f_93() const;
  void set_f_93(::int32_t value);

  private:
  ::int32_t _internal_f_93() const;
  void _internal_set_f_93(::int32_t value);

  public:
  // optional float f_94 = 145;
  bool has_f_94() const;
  void clear_f_94() ;
  float f_94() const;
  void set_f_94(float value);

  private:
  float _internal_f_94() const;
  void _internal_set_f_94(float value);

  public:
  // optional int32 f_98 = 150;
  bool has_f_98() const;
  void clear_f_98() ;
  ::int32_t f_98() const;
  void set_f_98(::int32_t value);

  private:
  ::int32_t _internal_f_98() const;
  void _internal_set_f_98(::int32_t value);

  public:
  // optional int64 f_97 = 148;
  bool has_f_97() const;
  void clear_f_97() ;
  ::int64_t f_97() const;
  void set_f_97(::int64_t value);

  private:
  ::int64_t _internal_f_97() const;
  void _internal_set_f_97(::int64_t value);

  public:
  // optional int32 f_99 = 152;
  bool has_f_99() const;
  void clear_f_99() ;
  ::int32_t f_99() const;
  void set_f_99(::int32_t value);

  private:
  ::int32_t _internal_f_99() const;
  void _internal_set_f_99(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E52 f_101 = 154;
  bool has_f_101() const;
  void clear_f_101() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 f_101() const;
  void set_f_101(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 _internal_f_101() const;
  void _internal_set_f_101(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 value);

  public:
  // optional float f_102 = 156;
  bool has_f_102() const;
  void clear_f_102() ;
  float f_102() const;
  void set_f_102(float value);

  private:
  float _internal_f_102() const;
  void _internal_set_f_102(float value);

  public:
  // optional int32 f_105 = 159;
  bool has_f_105() const;
  void clear_f_105() ;
  ::int32_t f_105() const;
  void set_f_105(::int32_t value);

  private:
  ::int32_t _internal_f_105() const;
  void _internal_set_f_105(::int32_t value);

  public:
  // optional double f_107 = 164;
  bool has_f_107() const;
  void clear_f_107() ;
  double f_107() const;
  void set_f_107(double value);

  private:
  double _internal_f_107() const;
  void _internal_set_f_107(double value);

  public:
  // optional uint64 f_109 = 167;
  bool has_f_109() const;
  void clear_f_109() ;
  ::uint64_t f_109() const;
  void set_f_109(::uint64_t value);

  private:
  ::uint64_t _internal_f_109() const;
  void _internal_set_f_109(::uint64_t value);

  public:
  // optional uint64 f_110 = 169;
  bool has_f_110() const;
  void clear_f_110() ;
  ::uint64_t f_110() const;
  void set_f_110(::uint64_t value);

  private:
  ::uint64_t _internal_f_110() const;
  void _internal_set_f_110(::uint64_t value);

  public:
  // optional int64 f_112 = 172;
  bool has_f_112() const;
  void clear_f_112() ;
  ::int64_t f_112() const;
  void set_f_112(::int64_t value);

  private:
  ::int64_t _internal_f_112() const;
  void _internal_set_f_112(::int64_t value);

  public:
  // optional fixed32 f_111 = 171;
  bool has_f_111() const;
  void clear_f_111() ;
  ::uint32_t f_111() const;
  void set_f_111(::uint32_t value);

  private:
  ::uint32_t _internal_f_111() const;
  void _internal_set_f_111(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E53 f_116 = 179;
  bool has_f_116() const;
  void clear_f_116() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 f_116() const;
  void set_f_116(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 _internal_f_116() const;
  void _internal_set_f_116(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 value);

  public:
  // optional int64 f_117 = 180;
  bool has_f_117() const;
  void clear_f_117() ;
  ::int64_t f_117() const;
  void set_f_117(::int64_t value);

  private:
  ::int64_t _internal_f_117() const;
  void _internal_set_f_117(::int64_t value);

  public:
  // optional int64 f_119 = 183;
  bool has_f_119() const;
  void clear_f_119() ;
  ::int64_t f_119() const;
  void set_f_119(::int64_t value);

  private:
  ::int64_t _internal_f_119() const;
  void _internal_set_f_119(::int64_t value);

  public:
  // optional int32 f_118 = 182;
  bool has_f_118() const;
  void clear_f_118() ;
  ::int32_t f_118() const;
  void set_f_118(::int32_t value);

  private:
  ::int32_t _internal_f_118() const;
  void _internal_set_f_118(::int32_t value);

  public:
  // optional float f_124 = 193;
  bool has_f_124() const;
  void clear_f_124() ;
  float f_124() const;
  void set_f_124(float value);

  private:
  float _internal_f_124() const;
  void _internal_set_f_124(float value);

  public:
  // optional int64 f_121 = 189;
  bool has_f_121() const;
  void clear_f_121() ;
  ::int64_t f_121() const;
  void set_f_121(::int64_t value);

  private:
  ::int64_t _internal_f_121() const;
  void _internal_set_f_121(::int64_t value);

  public:
  // optional int64 f_122 = 190;
  bool has_f_122() const;
  void clear_f_122() ;
  ::int64_t f_122() const;
  void set_f_122(::int64_t value);

  private:
  ::int64_t _internal_f_122() const;
  void _internal_set_f_122(::int64_t value);

  public:
  // optional sint32 f_125 = 194;
  bool has_f_125() const;
  void clear_f_125() ;
  ::int32_t f_125() const;
  void set_f_125(::int32_t value);

  private:
  ::int32_t _internal_f_125() const;
  void _internal_set_f_125(::int32_t value);

  public:
  // optional int32 f_126 = 195;
  bool has_f_126() const;
  void clear_f_126() ;
  ::int32_t f_126() const;
  void set_f_126(::int32_t value);

  private:
  ::int32_t _internal_f_126() const;
  void _internal_set_f_126(::int32_t value);

  public:
  // optional int64 f_127 = 196;
  bool has_f_127() const;
  void clear_f_127() ;
  ::int64_t f_127() const;
  void set_f_127(::int64_t value);

  private:
  ::int64_t _internal_f_127() const;
  void _internal_set_f_127(::int64_t value);

  public:
  // optional int64 f_130 = 199;
  bool has_f_130() const;
  void clear_f_130() ;
  ::int64_t f_130() const;
  void set_f_130(::int64_t value);

  private:
  ::int64_t _internal_f_130() const;
  void _internal_set_f_130(::int64_t value);

  public:
  // optional int64 f_132 = 202;
  bool has_f_132() const;
  void clear_f_132() ;
  ::int64_t f_132() const;
  void set_f_132(::int64_t value);

  private:
  ::int64_t _internal_f_132() const;
  void _internal_set_f_132(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E54 f_131 = 200;
  bool has_f_131() const;
  void clear_f_131() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 f_131() const;
  void set_f_131(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 _internal_f_131() const;
  void _internal_set_f_131(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 value);

  public:
  // optional float f_134 = 205;
  bool has_f_134() const;
  void clear_f_134() ;
  float f_134() const;
  void set_f_134(float value);

  private:
  float _internal_f_134() const;
  void _internal_set_f_134(float value);

  public:
  // optional int64 f_133 = 203;
  bool has_f_133() const;
  void clear_f_133() ;
  ::int64_t f_133() const;
  void set_f_133(::int64_t value);

  private:
  ::int64_t _internal_f_133() const;
  void _internal_set_f_133(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E55 f_135 = 208;
  bool has_f_135() const;
  void clear_f_135() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 f_135() const;
  void set_f_135(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 _internal_f_135() const;
  void _internal_set_f_135(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 value);

  public:
  // optional int32 f_138 = 212;
  bool has_f_138() const;
  void clear_f_138() ;
  ::int32_t f_138() const;
  void set_f_138(::int32_t value);

  private:
  ::int32_t _internal_f_138() const;
  void _internal_set_f_138(::int32_t value);

  public:
  // optional int64 f_137 = 211;
  bool has_f_137() const;
  void clear_f_137() ;
  ::int64_t f_137() const;
  void set_f_137(::int64_t value);

  private:
  ::int64_t _internal_f_137() const;
  void _internal_set_f_137(::int64_t value);

  public:
  // optional int64 f_139 = 213;
  bool has_f_139() const;
  void clear_f_139() ;
  ::int64_t f_139() const;
  void set_f_139(::int64_t value);

  private:
  ::int64_t _internal_f_139() const;
  void _internal_set_f_139(::int64_t value);

  public:
  // optional uint64 f_140 = 214;
  bool has_f_140() const;
  void clear_f_140() ;
  ::uint64_t f_140() const;
  void set_f_140(::uint64_t value);

  private:
  ::uint64_t _internal_f_140() const;
  void _internal_set_f_140(::uint64_t value);

  public:
  // optional int64 f_141 = 215;
  bool has_f_141() const;
  void clear_f_141() ;
  ::int64_t f_141() const;
  void set_f_141(::int64_t value);

  private:
  ::int64_t _internal_f_141() const;
  void _internal_set_f_141(::int64_t value);

  public:
  // optional int64 f_142 = 218;
  bool has_f_142() const;
  void clear_f_142() ;
  ::int64_t f_142() const;
  void set_f_142(::int64_t value);

  private:
  ::int64_t _internal_f_142() const;
  void _internal_set_f_142(::int64_t value);

  public:
  // optional int32 f_144 = 221;
  bool has_f_144() const;
  void clear_f_144() ;
  ::int32_t f_144() const;
  void set_f_144(::int32_t value);

  private:
  ::int32_t _internal_f_144() const;
  void _internal_set_f_144(::int32_t value);

  public:
  // optional float f_145 = 225;
  bool has_f_145() const;
  void clear_f_145() ;
  float f_145() const;
  void set_f_145(float value);

  private:
  float _internal_f_145() const;
  void _internal_set_f_145(float value);

  public:
  // optional double f_147 = 227;
  bool has_f_147() const;
  void clear_f_147() ;
  double f_147() const;
  void set_f_147(double value);

  private:
  double _internal_f_147() const;
  void _internal_set_f_147(double value);

  public:
  // optional int64 f_148 = 229;
  bool has_f_148() const;
  void clear_f_148() ;
  ::int64_t f_148() const;
  void set_f_148(::int64_t value);

  private:
  ::int64_t _internal_f_148() const;
  void _internal_set_f_148(::int64_t value);

  public:
  // optional int32 f_149 = 230;
  bool has_f_149() const;
  void clear_f_149() ;
  ::int32_t f_149() const;
  void set_f_149(::int32_t value);

  private:
  ::int32_t _internal_f_149() const;
  void _internal_set_f_149(::int32_t value);

  public:
  // optional bool f_143 = 219;
  bool has_f_143() const;
  void clear_f_143() ;
  bool f_143() const;
  void set_f_143(bool value);

  private:
  bool _internal_f_143() const;
  void _internal_set_f_143(bool value);

  public:
  // optional bool f_146 = 226;
  bool has_f_146() const;
  void clear_f_146() ;
  bool f_146() const;
  void set_f_146(bool value);

  private:
  bool _internal_f_146() const;
  void _internal_set_f_146(bool value);

  public:
  // optional bool f_152 = 235;
  bool has_f_152() const;
  void clear_f_152() ;
  bool f_152() const;
  void set_f_152(bool value);

  private:
  bool _internal_f_152() const;
  void _internal_set_f_152(bool value);

  public:
  // optional bool f_161 = 247;
  bool has_f_161() const;
  void clear_f_161() ;
  bool f_161() const;
  void set_f_161(bool value);

  private:
  bool _internal_f_161() const;
  void _internal_set_f_161(bool value);

  public:
  // optional int32 f_151 = 234;
  bool has_f_151() const;
  void clear_f_151() ;
  ::int32_t f_151() const;
  void set_f_151(::int32_t value);

  private:
  ::int32_t _internal_f_151() const;
  void _internal_set_f_151(::int32_t value);

  public:
  // optional fixed32 f_154 = 237;
  bool has_f_154() const;
  void clear_f_154() ;
  ::uint32_t f_154() const;
  void set_f_154(::uint32_t value);

  private:
  ::uint32_t _internal_f_154() const;
  void _internal_set_f_154(::uint32_t value);

  public:
  // optional double f_155 = 238;
  bool has_f_155() const;
  void clear_f_155() ;
  double f_155() const;
  void set_f_155(double value);

  private:
  double _internal_f_155() const;
  void _internal_set_f_155(double value);

  public:
  // optional int64 f_156 = 239;
  bool has_f_156() const;
  void clear_f_156() ;
  ::int64_t f_156() const;
  void set_f_156(::int64_t value);

  private:
  ::int64_t _internal_f_156() const;
  void _internal_set_f_156(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E56 f_158 = 241;
  bool has_f_158() const;
  void clear_f_158() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 f_158() const;
  void set_f_158(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 _internal_f_158() const;
  void _internal_set_f_158(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 value);

  public:
  // optional int32 f_160 = 246;
  bool has_f_160() const;
  void clear_f_160() ;
  ::int32_t f_160() const;
  void set_f_160(::int32_t value);

  private:
  ::int32_t _internal_f_160() const;
  void _internal_set_f_160(::int32_t value);

  public:
  // optional int64 f_159 = 244;
  bool has_f_159() const;
  void clear_f_159() ;
  ::int64_t f_159() const;
  void set_f_159(::int64_t value);

  private:
  ::int64_t _internal_f_159() const;
  void _internal_set_f_159(::int64_t value);

  public:
  // optional int64 f_165 = 254;
  bool has_f_165() const;
  void clear_f_165() ;
  ::int64_t f_165() const;
  void set_f_165(::int64_t value);

  private:
  ::int64_t _internal_f_165() const;
  void _internal_set_f_165(::int64_t value);

  public:
  // optional int64 f_166 = 255;
  bool has_f_166() const;
  void clear_f_166() ;
  ::int64_t f_166() const;
  void set_f_166(::int64_t value);

  private:
  ::int64_t _internal_f_166() const;
  void _internal_set_f_166(::int64_t value);

  public:
  // optional uint32 f_163 = 251;
  bool has_f_163() const;
  void clear_f_163() ;
  ::uint32_t f_163() const;
  void set_f_163(::uint32_t value);

  private:
  ::uint32_t _internal_f_163() const;
  void _internal_set_f_163(::uint32_t value);

  public:
  // optional float f_168 = 259;
  bool has_f_168() const;
  void clear_f_168() ;
  float f_168() const;
  void set_f_168(float value);

  private:
  float _internal_f_168() const;
  void _internal_set_f_168(float value);

  public:
  // optional int64 f_167 = 257;
  bool has_f_167() const;
  void clear_f_167() ;
  ::int64_t f_167() const;
  void set_f_167(::int64_t value);

  private:
  ::int64_t _internal_f_167() const;
  void _internal_set_f_167(::int64_t value);

  public:
  // optional float f_169 = 260;
  bool has_f_169() const;
  void clear_f_169() ;
  float f_169() const;
  void set_f_169(float value);

  private:
  float _internal_f_169() const;
  void _internal_set_f_169(float value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E57 f_170 = 261;
  bool has_f_170() const;
  void clear_f_170() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 f_170() const;
  void set_f_170(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 _internal_f_170() const;
  void _internal_set_f_170(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 value);

  public:
  // optional int64 f_171 = 262;
  bool has_f_171() const;
  void clear_f_171() ;
  ::int64_t f_171() const;
  void set_f_171(::int64_t value);

  private:
  ::int64_t _internal_f_171() const;
  void _internal_set_f_171(::int64_t value);

  public:
  // optional int64 f_173 = 264;
  bool has_f_173() const;
  void clear_f_173() ;
  ::int64_t f_173() const;
  void set_f_173(::int64_t value);

  private:
  ::int64_t _internal_f_173() const;
  void _internal_set_f_173(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E58 f_172 = 263;
  bool has_f_172() const;
  void clear_f_172() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 f_172() const;
  void set_f_172(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 _internal_f_172() const;
  void _internal_set_f_172(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 value);

  public:
  // optional uint32 f_175 = 266;
  bool has_f_175() const;
  void clear_f_175() ;
  ::uint32_t f_175() const;
  void set_f_175(::uint32_t value);

  private:
  ::uint32_t _internal_f_175() const;
  void _internal_set_f_175(::uint32_t value);

  public:
  // optional int64 f_176 = 268;
  bool has_f_176() const;
  void clear_f_176() ;
  ::int64_t f_176() const;
  void set_f_176(::int64_t value);

  private:
  ::int64_t _internal_f_176() const;
  void _internal_set_f_176(::int64_t value);

  public:
  // optional int32 f_177 = 269;
  bool has_f_177() const;
  void clear_f_177() ;
  ::int32_t f_177() const;
  void set_f_177(::int32_t value);

  private:
  ::int32_t _internal_f_177() const;
  void _internal_set_f_177(::int32_t value);

  public:
  // optional int32 f_178 = 270;
  bool has_f_178() const;
  void clear_f_178() ;
  ::int32_t f_178() const;
  void set_f_178(::int32_t value);

  private:
  ::int32_t _internal_f_178() const;
  void _internal_set_f_178(::int32_t value);

  public:
  // optional float f_179 = 271;
  bool has_f_179() const;
  void clear_f_179() ;
  float f_179() const;
  void set_f_179(float value);

  private:
  float _internal_f_179() const;
  void _internal_set_f_179(float value);

  public:
  // optional int32 f_182 = 275;
  bool has_f_182() const;
  void clear_f_182() ;
  ::int32_t f_182() const;
  void set_f_182(::int32_t value);

  private:
  ::int32_t _internal_f_182() const;
  void _internal_set_f_182(::int32_t value);

  public:
  // optional int64 f_183 = 276;
  bool has_f_183() const;
  void clear_f_183() ;
  ::int64_t f_183() const;
  void set_f_183(::int64_t value);

  private:
  ::int64_t _internal_f_183() const;
  void _internal_set_f_183(::int64_t value);

  public:
  // optional int64 f_185 = 279;
  bool has_f_185() const;
  void clear_f_185() ;
  ::int64_t f_185() const;
  void set_f_185(::int64_t value);

  private:
  ::int64_t _internal_f_185() const;
  void _internal_set_f_185(::int64_t value);

  public:
  // optional int32 f_184 = 277;
  bool has_f_184() const;
  void clear_f_184() ;
  ::int32_t f_184() const;
  void set_f_184(::int32_t value);

  private:
  ::int32_t _internal_f_184() const;
  void _internal_set_f_184(::int32_t value);

  public:
  // optional bool f_186 = 281;
  bool has_f_186() const;
  void clear_f_186() ;
  bool f_186() const;
  void set_f_186(bool value);

  private:
  bool _internal_f_186() const;
  void _internal_set_f_186(bool value);

  public:
  // optional int64 f_188 = 283;
  bool has_f_188() const;
  void clear_f_188() ;
  ::int64_t f_188() const;
  void set_f_188(::int64_t value);

  private:
  ::int64_t _internal_f_188() const;
  void _internal_set_f_188(::int64_t value);

  public:
  // optional int32 f_187 = 282;
  bool has_f_187() const;
  void clear_f_187() ;
  ::int32_t f_187() const;
  void set_f_187(::int32_t value);

  private:
  ::int32_t _internal_f_187() const;
  void _internal_set_f_187(::int32_t value);

  public:
  // optional fixed32 f_189 = 285;
  bool has_f_189() const;
  void clear_f_189() ;
  ::uint32_t f_189() const;
  void set_f_189(::uint32_t value);

  private:
  ::uint32_t _internal_f_189() const;
  void _internal_set_f_189(::uint32_t value);

  public:
  // optional int64 f_191 = 289;
  bool has_f_191() const;
  void clear_f_191() ;
  ::int64_t f_191() const;
  void set_f_191(::int64_t value);

  private:
  ::int64_t _internal_f_191() const;
  void _internal_set_f_191(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E59 f_190 = 286;
  bool has_f_190() const;
  void clear_f_190() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 f_190() const;
  void set_f_190(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 _internal_f_190() const;
  void _internal_set_f_190(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 193, 26,
      437, 39>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<6> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_49_;
    mutable ::google::protobuf::internal::CachedSize _f_49_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_76_;
    mutable ::google::protobuf::internal::CachedSize _f_76_cached_byte_size_;
    ::google::protobuf::RepeatedField<float> f_82_;
    ::google::protobuf::RepeatedPtrField<std::string> f_114_;
    ::google::protobuf::RepeatedPtrField<std::string> f_174_;
    ::google::protobuf::internal::ArenaStringPtr f_12_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::google::protobuf::internal::ArenaStringPtr f_19_;
    ::google::protobuf::internal::ArenaStringPtr f_23_;
    ::google::protobuf::internal::ArenaStringPtr f_24_;
    ::google::protobuf::internal::ArenaStringPtr f_29_;
    ::google::protobuf::internal::ArenaStringPtr f_32_;
    ::google::protobuf::internal::ArenaStringPtr f_40_;
    ::google::protobuf::internal::ArenaStringPtr f_46_;
    ::google::protobuf::internal::ArenaStringPtr f_53_;
    ::google::protobuf::internal::ArenaStringPtr f_57_;
    ::google::protobuf::internal::ArenaStringPtr f_58_;
    ::google::protobuf::internal::ArenaStringPtr f_60_;
    ::google::protobuf::internal::ArenaStringPtr f_61_;
    ::google::protobuf::internal::ArenaStringPtr f_74_;
    ::google::protobuf::internal::ArenaStringPtr f_84_;
    ::google::protobuf::internal::ArenaStringPtr f_87_;
    ::google::protobuf::internal::ArenaStringPtr f_95_;
    ::google::protobuf::internal::ArenaStringPtr f_96_;
    ::google::protobuf::internal::ArenaStringPtr f_103_;
    ::google::protobuf::internal::ArenaStringPtr f_104_;
    ::google::protobuf::internal::ArenaStringPtr f_106_;
    ::google::protobuf::internal::ArenaStringPtr f_108_;
    ::google::protobuf::internal::ArenaStringPtr f_113_;
    ::google::protobuf::internal::ArenaStringPtr f_115_;
    ::google::protobuf::internal::ArenaStringPtr f_120_;
    ::google::protobuf::internal::ArenaStringPtr f_123_;
    ::google::protobuf::internal::ArenaStringPtr f_128_;
    ::google::protobuf::internal::ArenaStringPtr f_129_;
    ::google::protobuf::internal::ArenaStringPtr f_136_;
    ::google::protobuf::internal::ArenaStringPtr f_150_;
    ::google::protobuf::internal::ArenaStringPtr f_153_;
    ::google::protobuf::internal::ArenaStringPtr f_157_;
    ::google::protobuf::internal::ArenaStringPtr f_162_;
    ::google::protobuf::internal::ArenaStringPtr f_164_;
    ::google::protobuf::internal::ArenaStringPtr f_180_;
    ::google::protobuf::internal::ArenaStringPtr f_181_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* f_289_;
    ::uint64_t f_1_;
    double f_3_;
    ::int32_t f_2_;
    ::int32_t f_5_;
    ::uint64_t f_4_;
    ::int64_t f_6_;
    int f_7_;
    ::int32_t f_10_;
    ::uint64_t f_8_;
    ::uint64_t f_9_;
    int f_11_;
    float f_13_;
    ::int64_t f_15_;
    int f_14_;
    int f_17_;
    int f_18_;
    ::int32_t f_20_;
    ::uint64_t f_21_;
    ::int32_t f_22_;
    int f_25_;
    float f_26_;
    float f_27_;
    float f_28_;
    int f_30_;
    ::int64_t f_31_;
    ::uint64_t f_34_;
    float f_33_;
    float f_35_;
    float f_36_;
    int f_37_;
    ::int64_t f_39_;
    ::int32_t f_38_;
    ::uint32_t f_41_;
    int f_42_;
    int f_43_;
    ::int32_t f_44_;
    ::int32_t f_45_;
    ::int64_t f_50_;
    double f_51_;
    ::uint32_t f_48_;
    bool f_0_;
    bool f_47_;
    bool f_62_;
    bool f_100_;
    ::int64_t f_52_;
    ::int64_t f_55_;
    ::int32_t f_54_;
    int f_56_;
    ::uint64_t f_59_;
    ::int64_t f_63_;
    int f_64_;
    int f_65_;
    ::int64_t f_67_;
    ::uint64_t f_68_;
    ::uint32_t f_66_;
    ::uint32_t f_69_;
    ::int64_t f_70_;
    ::int32_t f_71_;
    ::uint32_t f_72_;
    ::int64_t f_75_;
    float f_73_;
    ::int32_t f_80_;
    ::int64_t f_77_;
    ::int64_t f_78_;
    ::int64_t f_79_;
    ::int64_t f_83_;
    int f_81_;
    int f_86_;
    ::uint64_t f_85_;
    ::int64_t f_89_;
    ::int32_t f_88_;
    int f_90_;
    ::int64_t f_92_;
    ::int32_t f_91_;
    ::int32_t f_93_;
    float f_94_;
    ::int32_t f_98_;
    ::int64_t f_97_;
    ::int32_t f_99_;
    int f_101_;
    float f_102_;
    ::int32_t f_105_;
    double f_107_;
    ::uint64_t f_109_;
    ::uint64_t f_110_;
    ::int64_t f_112_;
    ::uint32_t f_111_;
    int f_116_;
    ::int64_t f_117_;
    ::int64_t f_119_;
    ::int32_t f_118_;
    float f_124_;
    ::int64_t f_121_;
    ::int64_t f_122_;
    ::int32_t f_125_;
    ::int32_t f_126_;
    ::int64_t f_127_;
    ::int64_t f_130_;
    ::int64_t f_132_;
    int f_131_;
    float f_134_;
    ::int64_t f_133_;
    int f_135_;
    ::int32_t f_138_;
    ::int64_t f_137_;
    ::int64_t f_139_;
    ::uint64_t f_140_;
    ::int64_t f_141_;
    ::int64_t f_142_;
    ::int32_t f_144_;
    float f_145_;
    double f_147_;
    ::int64_t f_148_;
    ::int32_t f_149_;
    bool f_143_;
    bool f_146_;
    bool f_152_;
    bool f_161_;
    ::int32_t f_151_;
    ::uint32_t f_154_;
    double f_155_;
    ::int64_t f_156_;
    int f_158_;
    ::int32_t f_160_;
    ::int64_t f_159_;
    ::int64_t f_165_;
    ::int64_t f_166_;
    ::uint32_t f_163_;
    float f_168_;
    ::int64_t f_167_;
    float f_169_;
    int f_170_;
    ::int64_t f_171_;
    ::int64_t f_173_;
    int f_172_;
    ::uint32_t f_175_;
    ::int64_t f_176_;
    ::int32_t f_177_;
    ::int32_t f_178_;
    float f_179_;
    ::int32_t f_182_;
    ::int64_t f_183_;
    ::int64_t f_185_;
    ::int32_t f_184_;
    bool f_186_;
    ::int64_t f_188_;
    ::int32_t f_187_;
    ::uint32_t f_189_;
    ::int64_t f_191_;
    int f_190_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16_M33 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16.M33) */ {
 public:
  inline Message8_M1_M4_M15_M16_M33() : Message8_M1_M4_M15_M16_M33(nullptr) {}
  ~Message8_M1_M4_M15_M16_M33() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16_M33(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16_M33(const Message8_M1_M4_M15_M16_M33& from) : Message8_M1_M4_M15_M16_M33(nullptr, from) {}
  inline Message8_M1_M4_M15_M16_M33(Message8_M1_M4_M15_M16_M33&& from) noexcept
      : Message8_M1_M4_M15_M16_M33(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16_M33& operator=(const Message8_M1_M4_M15_M16_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16_M33& operator=(Message8_M1_M4_M15_M16_M33&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16_M33& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16_M33* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16_M33*>(
        &_Message8_M1_M4_M15_M16_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message8_M1_M4_M15_M16_M33& a, Message8_M1_M4_M15_M16_M33& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16_M33* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16_M33* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16_M33* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16_M33>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16_M33& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16_M33& from) { Message8_M1_M4_M15_M16_M33::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16_M33* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16.M33"; }

 protected:
  explicit Message8_M1_M4_M15_M16_M33(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16_M33(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16_M33& from);
  Message8_M1_M4_M15_M16_M33(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16_M33&& from) noexcept
      : Message8_M1_M4_M15_M16_M33(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M53 = Message8_M1_M4_M15_M16_M33_M53;
  using M60 = Message8_M1_M4_M15_M16_M33_M60;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53& f_2(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>& f_2() const;
  // optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* release_f_3();
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60& _internal_f_3() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* _internal_mutable_f_3();

  public:
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16.M33)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_M33_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53 > f_2_;
    ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11_M14 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11.M14) */ {
 public:
  inline Message8_M1_M11_M14() : Message8_M1_M11_M14(nullptr) {}
  ~Message8_M1_M11_M14() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11_M14(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11_M14(const Message8_M1_M11_M14& from) : Message8_M1_M11_M14(nullptr, from) {}
  inline Message8_M1_M11_M14(Message8_M1_M11_M14&& from) noexcept
      : Message8_M1_M11_M14(nullptr, std::move(from)) {}
  inline Message8_M1_M11_M14& operator=(const Message8_M1_M11_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11_M14& operator=(Message8_M1_M11_M14&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11_M14& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11_M14* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11_M14*>(
        &_Message8_M1_M11_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 53;
  friend void swap(Message8_M1_M11_M14& a, Message8_M1_M11_M14& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11_M14* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11_M14* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11_M14* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11_M14>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11_M14& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11_M14& from) { Message8_M1_M11_M14::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11_M14* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11.M14"; }

 protected:
  explicit Message8_M1_M11_M14(::google::protobuf::Arena* arena);
  Message8_M1_M11_M14(::google::protobuf::Arena* arena, const Message8_M1_M11_M14& from);
  Message8_M1_M11_M14(::google::protobuf::Arena* arena, Message8_M1_M11_M14&& from) noexcept
      : Message8_M1_M11_M14(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M18 = Message8_M1_M11_M14_M18;
  using M19 = Message8_M1_M11_M14_M19;
  using M27 = Message8_M1_M11_M14_M27;
  using E4 = Message8_M1_M11_M14_E4;
  static constexpr E4 E4_UNSPECIFIED = Message8_M1_M11_M14_E4_E4_UNSPECIFIED;
  static constexpr E4 E4_CONST_1 = Message8_M1_M11_M14_E4_E4_CONST_1;
  static constexpr E4 E4_CONST_2 = Message8_M1_M11_M14_E4_E4_CONST_2;
  static constexpr E4 E4_CONST_3 = Message8_M1_M11_M14_E4_E4_CONST_3;
  static constexpr E4 E4_CONST_4 = Message8_M1_M11_M14_E4_E4_CONST_4;
  static constexpr E4 E4_CONST_5 = Message8_M1_M11_M14_E4_E4_CONST_5;
  static inline bool E4_IsValid(int value) {
    return Message8_M1_M11_M14_E4_IsValid(value);
  }
  static constexpr E4 E4_MIN = Message8_M1_M11_M14_E4_E4_MIN;
  static constexpr E4 E4_MAX = Message8_M1_M11_M14_E4_E4_MAX;
  static constexpr int E4_ARRAYSIZE = Message8_M1_M11_M14_E4_E4_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E4_descriptor() {
    return Message8_M1_M11_M14_E4_descriptor();
  }
  template <typename T>
  static inline const std::string& E4_Name(T value) {
    return Message8_M1_M11_M14_E4_Name(value);
  }
  static inline bool E4_Parse(absl::string_view name, E4* value) {
    return Message8_M1_M11_M14_E4_Parse(name, value);
  }
  using E5 = Message8_M1_M11_M14_E5;
  static constexpr E5 E5_UNSPECIFIED = Message8_M1_M11_M14_E5_E5_UNSPECIFIED;
  static constexpr E5 E5_CONST_1 = Message8_M1_M11_M14_E5_E5_CONST_1;
  static constexpr E5 E5_CONST_2 = Message8_M1_M11_M14_E5_E5_CONST_2;
  static constexpr E5 E5_CONST_3 = Message8_M1_M11_M14_E5_E5_CONST_3;
  static constexpr E5 E5_CONST_4 = Message8_M1_M11_M14_E5_E5_CONST_4;
  static constexpr E5 E5_CONST_5 = Message8_M1_M11_M14_E5_E5_CONST_5;
  static inline bool E5_IsValid(int value) {
    return Message8_M1_M11_M14_E5_IsValid(value);
  }
  static constexpr E5 E5_MIN = Message8_M1_M11_M14_E5_E5_MIN;
  static constexpr E5 E5_MAX = Message8_M1_M11_M14_E5_E5_MAX;
  static constexpr int E5_ARRAYSIZE = Message8_M1_M11_M14_E5_E5_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E5_descriptor() {
    return Message8_M1_M11_M14_E5_descriptor();
  }
  template <typename T>
  static inline const std::string& E5_Name(T value) {
    return Message8_M1_M11_M14_E5_Name(value);
  }
  static inline bool E5_Parse(absl::string_view name, E5* value) {
    return Message8_M1_M11_M14_E5_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_15_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_15())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())), f_1().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_9().data())), f_9().size() * sizeof(::uint32_t)));
      for (int i = 0; i < f_33_size(); ++i) {
        mutable_f_33(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())), f_6().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())), f_13().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())), f_16().size()));
      mutable_f_31()->generate_schema(schema);
      mutable_f_34()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_15_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_15()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_9().data())));
      sizes_list.push_back(f_9().size() * sizeof(::uint32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_33().size());
      for (int i = 0; i < f_33_size(); ++i) {
        mutable_f_33(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      sizes_list.push_back(f_6().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      sizes_list.push_back(f_13().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      sizes_list.push_back(f_16().size());
      mutable_f_31()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_34()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_15_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_9().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_33_size(); ++i) {
        mutable_f_33(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      mutable_f_31()->generate_scatter_ptrs(ptrs);
      mutable_f_34()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_15_);
      sizes.push_back(end_addr - start_addr + sizeof(f_15()));
      sizes.push_back(f_1().size() * sizeof(::int32_t));
      sizes.push_back(f_9().size() * sizeof(::uint32_t));
      sizes.push_back(f_33().size());
      for (int i = 0; i < f_33_size(); ++i) {
        mutable_f_33(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
      sizes.push_back(f_6().size());
      sizes.push_back(f_7().size());
      sizes.push_back(f_10().size());
      sizes.push_back(f_13().size());
      sizes.push_back(f_16().size());
      mutable_f_31()->generate_scatter_sizes(sizes);
      mutable_f_34()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_15_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      mutable_f_9()->Resize(sizes[idx++] / sizeof(::uint32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_9().data())));
      size_t num_f_33_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_33_entries; ++i) {
        auto* new_msg = add_f_33();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_33(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_13(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_13().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_16().c_str())));
      }
      idx = mutable_f_31()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_34()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_9()->Resize(sizes[idx++] / sizeof(::uint32_t), 0);
      size_t num_f_33_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_33_entries; ++i) {
        auto* new_msg = add_f_33();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_33(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_13(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_16(std::move(tmp_str));
        }
      }
      idx = mutable_f_31()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_34()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF9FieldNumber = 20,
    kF33FieldNumber = 34,
    kF2FieldNumber = 4,
    kF6FieldNumber = 13,
    kF7FieldNumber = 14,
    kF10FieldNumber = 21,
    kF13FieldNumber = 28,
    kF16FieldNumber = 31,
    kF31FieldNumber = 33,
    kF34FieldNumber = 36,
    kF0FieldNumber = 1,
    kF4FieldNumber = 8,
    kF5FieldNumber = 10,
    kF3FieldNumber = 6,
    kF12FieldNumber = 27,
    kF8FieldNumber = 17,
    kF11FieldNumber = 24,
    kF14FieldNumber = 29,
    kF15FieldNumber = 30,
  };
  // repeated int32 f_1 = 2 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::int32_t f_1(int index) const;
  void set_f_1(int index, ::int32_t value);
  void add_f_1(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_1();

  public:
  // repeated uint32 f_9 = 20 [packed = true];
  int f_9_size() const;
  private:
  int _internal_f_9_size() const;

  public:
  void clear_f_9() ;
  ::uint32_t f_9(int index) const;
  void set_f_9(int index, ::uint32_t value);
  void add_f_9(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& f_9() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_f_9();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_f_9() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_f_9();

  public:
  // repeated .fleetbench.proto.Message8.M1.M11.M14.M19 f_33 = 34;
  int f_33_size() const;
  private:
  int _internal_f_33_size() const;

  public:
  void clear_f_33() ;
  ::fleetbench::proto::Message8_M1_M11_M14_M19* mutable_f_33(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>* mutable_f_33();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>& _internal_f_33() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>* _internal_mutable_f_33();
  public:
  const ::fleetbench::proto::Message8_M1_M11_M14_M19& f_33(int index) const;
  ::fleetbench::proto::Message8_M1_M11_M14_M19* add_f_33();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>& f_33() const;
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_6 = 13;
  bool has_f_6() const;
  void clear_f_6() ;
  const std::string& f_6() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_6(Arg_&& arg, Args_... args);
  std::string* mutable_f_6();
  PROTOBUF_NODISCARD std::string* release_f_6();
  void set_allocated_f_6(std::string* value);

  private:
  const std::string& _internal_f_6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_6(
      const std::string& value);
  std::string* _internal_mutable_f_6();

  public:
  // optional string f_7 = 14;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional string f_10 = 21;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional string f_13 = 28;
  bool has_f_13() const;
  void clear_f_13() ;
  const std::string& f_13() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_13(Arg_&& arg, Args_... args);
  std::string* mutable_f_13();
  PROTOBUF_NODISCARD std::string* release_f_13();
  void set_allocated_f_13(std::string* value);

  private:
  const std::string& _internal_f_13() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_13(
      const std::string& value);
  std::string* _internal_mutable_f_13();

  public:
  // optional string f_16 = 31;
  bool has_f_16() const;
  void clear_f_16() ;
  const std::string& f_16() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_16(Arg_&& arg, Args_... args);
  std::string* mutable_f_16();
  PROTOBUF_NODISCARD std::string* release_f_16();
  void set_allocated_f_16(std::string* value);

  private:
  const std::string& _internal_f_16() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_16(
      const std::string& value);
  std::string* _internal_mutable_f_16();

  public:
  // optional .fleetbench.proto.Message8.M1.M11.M14.M18 f_31 = 33;
  bool has_f_31() const;
  void clear_f_31() ;
  const ::fleetbench::proto::Message8_M1_M11_M14_M18& f_31() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M11_M14_M18* release_f_31();
  ::fleetbench::proto::Message8_M1_M11_M14_M18* mutable_f_31();
  void set_allocated_f_31(::fleetbench::proto::Message8_M1_M11_M14_M18* value);
  void unsafe_arena_set_allocated_f_31(::fleetbench::proto::Message8_M1_M11_M14_M18* value);
  ::fleetbench::proto::Message8_M1_M11_M14_M18* unsafe_arena_release_f_31();

  private:
  const ::fleetbench::proto::Message8_M1_M11_M14_M18& _internal_f_31() const;
  ::fleetbench::proto::Message8_M1_M11_M14_M18* _internal_mutable_f_31();

  public:
  // optional .fleetbench.proto.Message8.M1.M11.M14.M27 f_34 = 36;
  bool has_f_34() const;
  void clear_f_34() ;
  const ::fleetbench::proto::Message8_M1_M11_M14_M27& f_34() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M11_M14_M27* release_f_34();
  ::fleetbench::proto::Message8_M1_M11_M14_M27* mutable_f_34();
  void set_allocated_f_34(::fleetbench::proto::Message8_M1_M11_M14_M27* value);
  void unsafe_arena_set_allocated_f_34(::fleetbench::proto::Message8_M1_M11_M14_M27* value);
  ::fleetbench::proto::Message8_M1_M11_M14_M27* unsafe_arena_release_f_34();

  private:
  const ::fleetbench::proto::Message8_M1_M11_M14_M27& _internal_f_34() const;
  ::fleetbench::proto::Message8_M1_M11_M14_M27* _internal_mutable_f_34();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional int64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int64 f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional bool f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // optional bool f_12 = 27;
  bool has_f_12() const;
  void clear_f_12() ;
  bool f_12() const;
  void set_f_12(bool value);

  private:
  bool _internal_f_12() const;
  void _internal_set_f_12(bool value);

  public:
  // optional .fleetbench.proto.Message8.M1.M11.M14.E4 f_8 = 17;
  bool has_f_8() const;
  void clear_f_8() ;
  ::fleetbench::proto::Message8_M1_M11_M14_E4 f_8() const;
  void set_f_8(::fleetbench::proto::Message8_M1_M11_M14_E4 value);

  private:
  ::fleetbench::proto::Message8_M1_M11_M14_E4 _internal_f_8() const;
  void _internal_set_f_8(::fleetbench::proto::Message8_M1_M11_M14_E4 value);

  public:
  // optional float f_11 = 24;
  bool has_f_11() const;
  void clear_f_11() ;
  float f_11() const;
  void set_f_11(float value);

  private:
  float _internal_f_11() const;
  void _internal_set_f_11(float value);

  public:
  // optional int32 f_14 = 29;
  bool has_f_14() const;
  void clear_f_14() ;
  ::int32_t f_14() const;
  void set_f_14(::int32_t value);

  private:
  ::int32_t _internal_f_14() const;
  void _internal_set_f_14(::int32_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M11.M14.E5 f_15 = 30;
  bool has_f_15() const;
  void clear_f_15() ;
  ::fleetbench::proto::Message8_M1_M11_M14_E5 f_15() const;
  void set_f_15(::fleetbench::proto::Message8_M1_M11_M14_E5 value);

  private:
  ::fleetbench::proto::Message8_M1_M11_M14_E5 _internal_f_15() const;
  void _internal_set_f_15(::fleetbench::proto::Message8_M1_M11_M14_E5 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11.M14)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 20, 5,
      82, 7>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_M14_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    ::google::protobuf::RepeatedField<::uint32_t> f_9_;
    mutable ::google::protobuf::internal::CachedSize _f_9_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M11_M14_M19 > f_33_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_6_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::google::protobuf::internal::ArenaStringPtr f_13_;
    ::google::protobuf::internal::ArenaStringPtr f_16_;
    ::fleetbench::proto::Message8_M1_M11_M14_M18* f_31_;
    ::fleetbench::proto::Message8_M1_M11_M14_M27* f_34_;
    ::int64_t f_0_;
    ::int64_t f_4_;
    ::int64_t f_5_;
    bool f_3_;
    bool f_12_;
    int f_8_;
    float f_11_;
    ::int32_t f_14_;
    int f_15_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12_M24 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12.M24) */ {
 public:
  inline Message8_M2_M6_M12_M24() : Message8_M2_M6_M12_M24(nullptr) {}
  ~Message8_M2_M6_M12_M24() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12_M24(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12_M24(const Message8_M2_M6_M12_M24& from) : Message8_M2_M6_M12_M24(nullptr, from) {}
  inline Message8_M2_M6_M12_M24(Message8_M2_M6_M12_M24&& from) noexcept
      : Message8_M2_M6_M12_M24(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12_M24& operator=(const Message8_M2_M6_M12_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12_M24& operator=(Message8_M2_M6_M12_M24&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12_M24& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12_M24* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12_M24*>(
        &_Message8_M2_M6_M12_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 90;
  friend void swap(Message8_M2_M6_M12_M24& a, Message8_M2_M6_M12_M24& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12_M24* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12_M24* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12_M24* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12_M24>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12_M24& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12_M24& from) { Message8_M2_M6_M12_M24::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12_M24* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12.M24"; }

 protected:
  explicit Message8_M2_M6_M12_M24(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12_M24(::google::protobuf::Arena* arena, const Message8_M2_M6_M12_M24& from);
  Message8_M2_M6_M12_M24(::google::protobuf::Arena* arena, Message8_M2_M6_M12_M24&& from) noexcept
      : Message8_M2_M6_M12_M24(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M35 = Message8_M2_M6_M12_M24_M35;
  using M43 = Message8_M2_M6_M12_M24_M43;
  using E7 = Message8_M2_M6_M12_M24_E7;
  static constexpr E7 E7_UNSPECIFIED = Message8_M2_M6_M12_M24_E7_E7_UNSPECIFIED;
  static constexpr E7 E7_CONST_1 = Message8_M2_M6_M12_M24_E7_E7_CONST_1;
  static constexpr E7 E7_CONST_2 = Message8_M2_M6_M12_M24_E7_E7_CONST_2;
  static constexpr E7 E7_CONST_3 = Message8_M2_M6_M12_M24_E7_E7_CONST_3;
  static constexpr E7 E7_CONST_4 = Message8_M2_M6_M12_M24_E7_E7_CONST_4;
  static constexpr E7 E7_CONST_5 = Message8_M2_M6_M12_M24_E7_E7_CONST_5;
  static inline bool E7_IsValid(int value) {
    return Message8_M2_M6_M12_M24_E7_IsValid(value);
  }
  static constexpr E7 E7_MIN = Message8_M2_M6_M12_M24_E7_E7_MIN;
  static constexpr E7 E7_MAX = Message8_M2_M6_M12_M24_E7_E7_MAX;
  static constexpr int E7_ARRAYSIZE = Message8_M2_M6_M12_M24_E7_E7_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E7_descriptor() {
    return Message8_M2_M6_M12_M24_E7_descriptor();
  }
  template <typename T>
  static inline const std::string& E7_Name(T value) {
    return Message8_M2_M6_M12_M24_E7_Name(value);
  }
  static inline bool E7_Parse(absl::string_view name, E7* value) {
    return Message8_M2_M6_M12_M24_E7_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())), f_6().size() * sizeof(::int64_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      mutable_f_14()->generate_schema(schema);
      mutable_f_15()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())));
      sizes_list.push_back(f_6().size() * sizeof(::int64_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      mutable_f_14()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_15()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      mutable_f_14()->generate_scatter_ptrs(ptrs);
      mutable_f_15()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_6().size() * sizeof(::int64_t));
      sizes.push_back(f_2().size());
      sizes.push_back(f_3().size());
      sizes.push_back(f_4().size());
      mutable_f_14()->generate_scatter_sizes(sizes);
      mutable_f_15()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_6()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_6().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      idx = mutable_f_14()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_15()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_6()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      idx = mutable_f_14()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_15()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF6FieldNumber = 14,
    kF2FieldNumber = 6,
    kF3FieldNumber = 7,
    kF4FieldNumber = 10,
    kF14FieldNumber = 15,
    kF15FieldNumber = 16,
    kF0FieldNumber = 2,
    kF1FieldNumber = 4,
    kF5FieldNumber = 12,
  };
  // repeated int64 f_6 = 14 [packed = true];
  int f_6_size() const;
  private:
  int _internal_f_6_size() const;

  public:
  void clear_f_6() ;
  ::int64_t f_6(int index) const;
  void set_f_6(int index, ::int64_t value);
  void add_f_6(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_6() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_6();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_6() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_6();

  public:
  // optional string f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional string f_4 = 10;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35 f_14 = 15;
  bool has_f_14() const;
  void clear_f_14() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35& f_14() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* release_f_14();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* mutable_f_14();
  void set_allocated_f_14(::fleetbench::proto::Message8_M2_M6_M12_M24_M35* value);
  void unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message8_M2_M6_M12_M24_M35* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* unsafe_arena_release_f_14();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35& _internal_f_14() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* _internal_mutable_f_14();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43 f_15 = 16;
  bool has_f_15() const;
  void clear_f_15() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43& f_15() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* release_f_15();
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* mutable_f_15();
  void set_allocated_f_15(::fleetbench::proto::Message8_M2_M6_M12_M24_M43* value);
  void unsafe_arena_set_allocated_f_15(::fleetbench::proto::Message8_M2_M6_M12_M24_M43* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* unsafe_arena_release_f_15();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43& _internal_f_15() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* _internal_mutable_f_15();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24.E7 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_E7 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_E7 value);

  private:
  ::fleetbench::proto::Message8_M2_M6_M12_M24_E7 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_E7 value);

  public:
  // optional bool f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional int64 f_5 = 12;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12.M24)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      65, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_M24_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_6_;
    mutable ::google::protobuf::internal::CachedSize _f_6_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* f_14_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* f_15_;
    int f_0_;
    bool f_1_;
    ::int64_t f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13_M17 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13.M17) */ {
 public:
  inline Message8_M2_M5_M13_M17() : Message8_M2_M5_M13_M17(nullptr) {}
  ~Message8_M2_M5_M13_M17() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13_M17(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13_M17(const Message8_M2_M5_M13_M17& from) : Message8_M2_M5_M13_M17(nullptr, from) {}
  inline Message8_M2_M5_M13_M17(Message8_M2_M5_M13_M17&& from) noexcept
      : Message8_M2_M5_M13_M17(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13_M17& operator=(const Message8_M2_M5_M13_M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13_M17& operator=(Message8_M2_M5_M13_M17&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13_M17& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13_M17* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13_M17*>(
        &_Message8_M2_M5_M13_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 62;
  friend void swap(Message8_M2_M5_M13_M17& a, Message8_M2_M5_M13_M17& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13_M17* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13_M17* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13_M17* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13_M17>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13_M17& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13_M17& from) { Message8_M2_M5_M13_M17::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13_M17* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13.M17"; }

 protected:
  explicit Message8_M2_M5_M13_M17(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13_M17(::google::protobuf::Arena* arena, const Message8_M2_M5_M13_M17& from);
  Message8_M2_M5_M13_M17(::google::protobuf::Arena* arena, Message8_M2_M5_M13_M17&& from) noexcept
      : Message8_M2_M5_M13_M17(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M29 = Message8_M2_M5_M13_M17_M29;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* release_f_2();
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29* value);
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29& _internal_f_2() const;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* _internal_mutable_f_2();

  public:
  // optional uint64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13.M17)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_M17_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* f_2_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M93 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M16 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M16) */ {
 public:
  inline Message8_M1_M4_M15_M16() : Message8_M1_M4_M15_M16(nullptr) {}
  ~Message8_M1_M4_M15_M16() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M16(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M16(const Message8_M1_M4_M15_M16& from) : Message8_M1_M4_M15_M16(nullptr, from) {}
  inline Message8_M1_M4_M15_M16(Message8_M1_M4_M15_M16&& from) noexcept
      : Message8_M1_M4_M15_M16(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M16& operator=(const Message8_M1_M4_M15_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M16& operator=(Message8_M1_M4_M15_M16&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M16& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M16* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M16*>(
        &_Message8_M1_M4_M15_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Message8_M1_M4_M15_M16& a, Message8_M1_M4_M15_M16& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M16* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M16* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M16* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M16>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M16& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M16& from) { Message8_M1_M4_M15_M16::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M16* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M16"; }

 protected:
  explicit Message8_M1_M4_M15_M16(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M16(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M16& from);
  Message8_M1_M4_M15_M16(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M16&& from) noexcept
      : Message8_M1_M4_M15_M16(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M33 = Message8_M1_M4_M15_M16_M33;
  using M44 = Message8_M1_M4_M15_M16_M44;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF4FieldNumber = 6,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M16.M44 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M44& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* release_f_4();
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M16_M44* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M16_M44* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M44& _internal_f_4() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* _internal_mutable_f_4();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M16)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M16_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* f_1_;
    ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* f_4_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M11 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M11) */ {
 public:
  inline Message8_M1_M11() : Message8_M1_M11(nullptr) {}
  ~Message8_M1_M11() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M11(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M11(const Message8_M1_M11& from) : Message8_M1_M11(nullptr, from) {}
  inline Message8_M1_M11(Message8_M1_M11&& from) noexcept
      : Message8_M1_M11(nullptr, std::move(from)) {}
  inline Message8_M1_M11& operator=(const Message8_M1_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M11& operator=(Message8_M1_M11&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M11& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M11* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M11*>(
        &_Message8_M1_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 54;
  friend void swap(Message8_M1_M11& a, Message8_M1_M11& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M11* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M11* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M11* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M11>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M11& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M11& from) { Message8_M1_M11::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M11* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M11"; }

 protected:
  explicit Message8_M1_M11(::google::protobuf::Arena* arena);
  Message8_M1_M11(::google::protobuf::Arena* arena, const Message8_M1_M11& from);
  Message8_M1_M11(::google::protobuf::Arena* arena, Message8_M1_M11&& from) noexcept
      : Message8_M1_M11(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M14 = Message8_M1_M11_M14;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_0().size());
      sizes.push_back(f_2().size());
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF2FieldNumber = 6,
    kF6FieldNumber = 8,
    kF1FieldNumber = 3,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M1.M11.M14 f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message8_M1_M11_M14& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M11_M14* release_f_6();
  ::fleetbench::proto::Message8_M1_M11_M14* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message8_M1_M11_M14* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message8_M1_M11_M14* value);
  ::fleetbench::proto::Message8_M1_M11_M14* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message8_M1_M11_M14& _internal_f_6() const;
  ::fleetbench::proto::Message8_M1_M11_M14* _internal_mutable_f_6();

  public:
  // optional float f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M11)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M11_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::fleetbench::proto::Message8_M1_M11_M14* f_6_;
    float f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6_M12 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6.M12) */ {
 public:
  inline Message8_M2_M6_M12() : Message8_M2_M6_M12(nullptr) {}
  ~Message8_M2_M6_M12() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6_M12(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6_M12(const Message8_M2_M6_M12& from) : Message8_M2_M6_M12(nullptr, from) {}
  inline Message8_M2_M6_M12(Message8_M2_M6_M12&& from) noexcept
      : Message8_M2_M6_M12(nullptr, std::move(from)) {}
  inline Message8_M2_M6_M12& operator=(const Message8_M2_M6_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6_M12& operator=(Message8_M2_M6_M12&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6_M12& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6_M12* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6_M12*>(
        &_Message8_M2_M6_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 91;
  friend void swap(Message8_M2_M6_M12& a, Message8_M2_M6_M12& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6_M12* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6_M12* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6_M12* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6_M12>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6_M12& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6_M12& from) { Message8_M2_M6_M12::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6_M12* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6.M12"; }

 protected:
  explicit Message8_M2_M6_M12(::google::protobuf::Arena* arena);
  Message8_M2_M6_M12(::google::protobuf::Arena* arena, const Message8_M2_M6_M12& from);
  Message8_M2_M6_M12(::google::protobuf::Arena* arena, Message8_M2_M6_M12&& from) noexcept
      : Message8_M2_M6_M12(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M21 = Message8_M2_M6_M12_M21;
  using M22 = Message8_M2_M6_M12_M22;
  using M24 = Message8_M2_M6_M12_M24;
  using E3 = Message8_M2_M6_M12_E3;
  static constexpr E3 E3_UNSPECIFIED = Message8_M2_M6_M12_E3_E3_UNSPECIFIED;
  static constexpr E3 E3_CONST_1 = Message8_M2_M6_M12_E3_E3_CONST_1;
  static constexpr E3 E3_CONST_2 = Message8_M2_M6_M12_E3_E3_CONST_2;
  static constexpr E3 E3_CONST_3 = Message8_M2_M6_M12_E3_E3_CONST_3;
  static constexpr E3 E3_CONST_4 = Message8_M2_M6_M12_E3_E3_CONST_4;
  static constexpr E3 E3_CONST_5 = Message8_M2_M6_M12_E3_E3_CONST_5;
  static inline bool E3_IsValid(int value) {
    return Message8_M2_M6_M12_E3_IsValid(value);
  }
  static constexpr E3 E3_MIN = Message8_M2_M6_M12_E3_E3_MIN;
  static constexpr E3 E3_MAX = Message8_M2_M6_M12_E3_E3_MAX;
  static constexpr int E3_ARRAYSIZE = Message8_M2_M6_M12_E3_E3_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E3_descriptor() {
    return Message8_M2_M6_M12_E3_descriptor();
  }
  template <typename T>
  static inline const std::string& E3_Name(T value) {
    return Message8_M2_M6_M12_E3_Name(value);
  }
  static inline bool E3_Parse(absl::string_view name, E3* value) {
    return Message8_M2_M6_M12_E3_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      mutable_f_3()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(int));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_2().data())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_2().size() * sizeof(int));
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_2()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_2().data())));
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_2()->Resize(sizes[idx++] / sizeof(int), 0);
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
    kF5FieldNumber = 8,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message8.M2.M6.M12.E3 f_2 = 3 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  public:
  ::fleetbench::proto::Message8_M2_M6_M12_E3 f_2(int index) const;
  void set_f_2(int index, ::fleetbench::proto::Message8_M2_M6_M12_E3 value);
  void add_f_2(::fleetbench::proto::Message8_M2_M6_M12_E3 value);
  const ::google::protobuf::RepeatedField<int>& f_2() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M21 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M21& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M21* release_f_3();
  ::fleetbench::proto::Message8_M2_M6_M12_M21* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M21* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M21& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M21* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M22 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M22& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M22* release_f_4();
  ::fleetbench::proto::Message8_M2_M6_M12_M22* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message8_M2_M6_M12_M22* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M2_M6_M12_M22* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M22* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M22& _internal_f_4() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M22* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message8.M2.M6.M12.M24 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message8_M2_M6_M12_M24& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6_M12_M24* release_f_5();
  ::fleetbench::proto::Message8_M2_M6_M12_M24* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message8_M2_M6_M12_M24* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message8_M2_M6_M12_M24* value);
  ::fleetbench::proto::Message8_M2_M6_M12_M24* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message8_M2_M6_M12_M24& _internal_f_5() const;
  ::fleetbench::proto::Message8_M2_M6_M12_M24* _internal_mutable_f_5();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6.M12)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_M12_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<int> f_2_;
    mutable ::google::protobuf::internal::CachedSize _f_2_cached_byte_size_;
    ::fleetbench::proto::Message8_M2_M6_M12_M21* f_3_;
    ::fleetbench::proto::Message8_M2_M6_M12_M22* f_4_;
    ::fleetbench::proto::Message8_M2_M6_M12_M24* f_5_;
    bool f_0_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5_M13 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5.M13) */ {
 public:
  inline Message8_M2_M5_M13() : Message8_M2_M5_M13(nullptr) {}
  ~Message8_M2_M5_M13() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5_M13(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5_M13(const Message8_M2_M5_M13& from) : Message8_M2_M5_M13(nullptr, from) {}
  inline Message8_M2_M5_M13(Message8_M2_M5_M13&& from) noexcept
      : Message8_M2_M5_M13(nullptr, std::move(from)) {}
  inline Message8_M2_M5_M13& operator=(const Message8_M2_M5_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5_M13& operator=(Message8_M2_M5_M13&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5_M13& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5_M13* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5_M13*>(
        &_Message8_M2_M5_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 66;
  friend void swap(Message8_M2_M5_M13& a, Message8_M2_M5_M13& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5_M13* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5_M13* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5_M13* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5_M13>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5_M13& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5_M13& from) { Message8_M2_M5_M13::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5_M13* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5.M13"; }

 protected:
  explicit Message8_M2_M5_M13(::google::protobuf::Arena* arena);
  Message8_M2_M5_M13(::google::protobuf::Arena* arena, const Message8_M2_M5_M13& from);
  Message8_M2_M5_M13(::google::protobuf::Arena* arena, Message8_M2_M5_M13&& from) noexcept
      : Message8_M2_M5_M13(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M17 = Message8_M2_M5_M13_M17;
  using M26 = Message8_M2_M5_M13_M26;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M2.M5.M13.M17 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M2_M5_M13_M17* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message8_M2_M5_M13_M17& f_1(int index) const;
  ::fleetbench::proto::Message8_M2_M5_M13_M17* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>& f_1() const;
  // repeated .fleetbench.proto.Message8.M2.M5.M13.M26 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message8_M2_M5_M13_M26* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message8_M2_M5_M13_M26& f_2(int index) const;
  ::fleetbench::proto::Message8_M2_M5_M13_M26* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>& f_2() const;
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5.M13)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_M13_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M5_M13_M17 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M5_M13_M26 > f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M92 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& f_1(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>& f_1() const;
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92 > f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M6 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M6) */ {
 public:
  inline Message8_M2_M6() : Message8_M2_M6(nullptr) {}
  ~Message8_M2_M6() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M6(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M6(const Message8_M2_M6& from) : Message8_M2_M6(nullptr, from) {}
  inline Message8_M2_M6(Message8_M2_M6&& from) noexcept
      : Message8_M2_M6(nullptr, std::move(from)) {}
  inline Message8_M2_M6& operator=(const Message8_M2_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M6& operator=(Message8_M2_M6&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M6& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M6* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M6*>(
        &_Message8_M2_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 92;
  friend void swap(Message8_M2_M6& a, Message8_M2_M6& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M6* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M6* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M6* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M6>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M6& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M6& from) { Message8_M2_M6::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M6* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M6"; }

 protected:
  explicit Message8_M2_M6(::google::protobuf::Arena* arena);
  Message8_M2_M6(::google::protobuf::Arena* arena, const Message8_M2_M6& from);
  Message8_M2_M6(::google::protobuf::Arena* arena, Message8_M2_M6&& from) noexcept
      : Message8_M2_M6(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M12 = Message8_M2_M6_M12;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 5,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message8.M2.M6.M12 f_2 = 5;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message8_M2_M6_M12* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message8_M2_M6_M12& f_2(int index) const;
  ::fleetbench::proto::Message8_M2_M6_M12* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>& f_2() const;
  // optional uint32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M6)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M6_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M6_M12 > f_2_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2_M5 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2.M5) */ {
 public:
  inline Message8_M2_M5() : Message8_M2_M5(nullptr) {}
  ~Message8_M2_M5() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2_M5(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2_M5(const Message8_M2_M5& from) : Message8_M2_M5(nullptr, from) {}
  inline Message8_M2_M5(Message8_M2_M5&& from) noexcept
      : Message8_M2_M5(nullptr, std::move(from)) {}
  inline Message8_M2_M5& operator=(const Message8_M2_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2_M5& operator=(Message8_M2_M5&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2_M5& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2_M5* internal_default_instance() {
    return reinterpret_cast<const Message8_M2_M5*>(
        &_Message8_M2_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 67;
  friend void swap(Message8_M2_M5& a, Message8_M2_M5& b) { a.Swap(&b); }
  inline void Swap(Message8_M2_M5* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2_M5* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2_M5* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2_M5>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2_M5& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2_M5& from) { Message8_M2_M5::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2_M5* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2.M5"; }

 protected:
  explicit Message8_M2_M5(::google::protobuf::Arena* arena);
  Message8_M2_M5(::google::protobuf::Arena* arena, const Message8_M2_M5& from);
  Message8_M2_M5(::google::protobuf::Arena* arena, Message8_M2_M5&& from) noexcept
      : Message8_M2_M5(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M13 = Message8_M2_M5_M13;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M2.M5.M13 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M2_M5_M13& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M5_M13* release_f_1();
  ::fleetbench::proto::Message8_M2_M5_M13* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M2_M5_M13* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M5_M13* value);
  ::fleetbench::proto::Message8_M2_M5_M13* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M2_M5_M13& _internal_f_1() const;
  ::fleetbench::proto::Message8_M2_M5_M13* _internal_mutable_f_1();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2.M5)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_M5_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M2_M5_M13* f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M91 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& f_1(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>& f_1() const;
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91 > f_1_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M2) */ {
 public:
  inline Message8_M2() : Message8_M2(nullptr) {}
  ~Message8_M2() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M2(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M2(const Message8_M2& from) : Message8_M2(nullptr, from) {}
  inline Message8_M2(Message8_M2&& from) noexcept
      : Message8_M2(nullptr, std::move(from)) {}
  inline Message8_M2& operator=(const Message8_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M2& operator=(Message8_M2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M2* internal_default_instance() {
    return reinterpret_cast<const Message8_M2*>(
        &_Message8_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 96;
  friend void swap(Message8_M2& a, Message8_M2& b) { a.Swap(&b); }
  inline void Swap(Message8_M2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M2& from) { Message8_M2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M2"; }

 protected:
  explicit Message8_M2(::google::protobuf::Arena* arena);
  Message8_M2(::google::protobuf::Arena* arena, const Message8_M2& from);
  Message8_M2(::google::protobuf::Arena* arena, Message8_M2&& from) noexcept
      : Message8_M2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M3 = Message8_M2_M3;
  using M5 = Message8_M2_M5;
  using M6 = Message8_M2_M6;
  using M7 = Message8_M2_M7;
  using M8 = Message8_M2_M8;
  using M10 = Message8_M2_M10;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())), f_1().size() * sizeof(::int64_t)));
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
      mutable_f_6()->generate_schema(schema);
      mutable_f_7()->generate_schema(schema);
      mutable_f_8()->generate_schema(schema);
      mutable_f_9()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(::int64_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_9()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
      mutable_f_7()->generate_scatter_ptrs(ptrs);
      mutable_f_8()->generate_scatter_ptrs(ptrs);
      mutable_f_9()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      sizes.push_back(f_1().size() * sizeof(::int64_t));
      sizes.push_back(f_5().size());
      for (int i = 0; i < f_5_size(); ++i) {
        mutable_f_5(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_6()->generate_scatter_sizes(sizes);
      mutable_f_7()->generate_scatter_sizes(sizes);
      mutable_f_8()->generate_scatter_sizes(sizes);
      mutable_f_9()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_1().data())));
      size_t num_f_5_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_9()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      size_t num_f_5_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_5_entries; ++i) {
        auto* new_msg = add_f_5();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_5(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_9()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF5FieldNumber = 6,
    kF0FieldNumber = 1,
    kF3FieldNumber = 5,
    kF6FieldNumber = 7,
    kF7FieldNumber = 8,
    kF8FieldNumber = 9,
    kF9FieldNumber = 10,
    kF2FieldNumber = 3,
  };
  // repeated int64 f_1 = 2 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::int64_t f_1(int index) const;
  void set_f_1(int index, ::int64_t value);
  void add_f_1(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_1() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_1();

  public:
  // repeated .fleetbench.proto.Message8.M2.M5 f_5 = 6;
  int f_5_size() const;
  private:
  int _internal_f_5_size() const;

  public:
  void clear_f_5() ;
  ::fleetbench::proto::Message8_M2_M5* mutable_f_5(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>* mutable_f_5();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>& _internal_f_5() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>* _internal_mutable_f_5();
  public:
  const ::fleetbench::proto::Message8_M2_M5& f_5(int index) const;
  ::fleetbench::proto::Message8_M2_M5* add_f_5();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>& f_5() const;
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message8.M2.M3 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M2_M3& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M3* release_f_3();
  ::fleetbench::proto::Message8_M2_M3* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M2_M3* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M3* value);
  ::fleetbench::proto::Message8_M2_M3* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M2_M3& _internal_f_3() const;
  ::fleetbench::proto::Message8_M2_M3* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message8.M2.M6 f_6 = 7;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message8_M2_M6& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M6* release_f_6();
  ::fleetbench::proto::Message8_M2_M6* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message8_M2_M6* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message8_M2_M6* value);
  ::fleetbench::proto::Message8_M2_M6* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message8_M2_M6& _internal_f_6() const;
  ::fleetbench::proto::Message8_M2_M6* _internal_mutable_f_6();

  public:
  // optional .fleetbench.proto.Message8.M2.M7 f_7 = 8;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message8_M2_M7& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M7* release_f_7();
  ::fleetbench::proto::Message8_M2_M7* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message8_M2_M7* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message8_M2_M7* value);
  ::fleetbench::proto::Message8_M2_M7* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message8_M2_M7& _internal_f_7() const;
  ::fleetbench::proto::Message8_M2_M7* _internal_mutable_f_7();

  public:
  // optional .fleetbench.proto.Message8.M2.M8 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message8_M2_M8& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M8* release_f_8();
  ::fleetbench::proto::Message8_M2_M8* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message8_M2_M8* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message8_M2_M8* value);
  ::fleetbench::proto::Message8_M2_M8* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message8_M2_M8& _internal_f_8() const;
  ::fleetbench::proto::Message8_M2_M8* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message8.M2.M10 f_9 = 10;
  bool has_f_9() const;
  void clear_f_9() ;
  const ::fleetbench::proto::Message8_M2_M10& f_9() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2_M10* release_f_9();
  ::fleetbench::proto::Message8_M2_M10* mutable_f_9();
  void set_allocated_f_9(::fleetbench::proto::Message8_M2_M10* value);
  void unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message8_M2_M10* value);
  ::fleetbench::proto::Message8_M2_M10* unsafe_arena_release_f_9();

  private:
  const ::fleetbench::proto::Message8_M2_M10& _internal_f_9() const;
  ::fleetbench::proto::Message8_M2_M10* _internal_mutable_f_9();

  public:
  // optional int64 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 6,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M2_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M2_M5 > f_5_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message8_M2_M3* f_3_;
    ::fleetbench::proto::Message8_M2_M6* f_6_;
    ::fleetbench::proto::Message8_M2_M7* f_7_;
    ::fleetbench::proto::Message8_M2_M8* f_8_;
    ::fleetbench::proto::Message8_M2_M10* f_9_;
    ::int64_t f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M89 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89;
  using M90 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* release_f_2();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& _internal_f_2() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* release_f_4();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& _internal_f_4() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* _internal_mutable_f_4();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* f_2_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* f_4_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M88 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())), f_0().size() * sizeof(::int64_t)));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(::int64_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(0);
      sizes.push_back(0);
      sizes.push_back(f_0().size() * sizeof(::int64_t));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int64_t*>(f_0().data())));
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(::int64_t), 0);
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
    kF3FieldNumber = 4,
  };
  // repeated int64 f_0 = 3 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  ::int64_t f_0(int index) const;
  void set_f_0(int index, ::int64_t value);
  void add_f_0(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_f_0();

  public:
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& f_3(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>& f_3() const;
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> f_0_;
    mutable ::google::protobuf::internal::CachedSize _f_0_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88 > f_3_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81() : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M83 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83;
  using M84 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84;
  using M86 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86;
  using E30 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30;
  static constexpr E30 E30_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_UNSPECIFIED;
  static constexpr E30 E30_CONST_1 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_1;
  static constexpr E30 E30_CONST_2 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_2;
  static constexpr E30 E30_CONST_3 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_3;
  static constexpr E30 E30_CONST_4 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_4;
  static constexpr E30 E30_CONST_5 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_CONST_5;
  static inline bool E30_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_IsValid(value);
  }
  static constexpr E30 E30_MIN = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_MIN;
  static constexpr E30 E30_MAX = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_MAX;
  static constexpr int E30_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_E30_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E30_descriptor() {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_descriptor();
  }
  template <typename T>
  static inline const std::string& E30_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_Name(value);
  }
  static inline bool E30_Parse(absl::string_view name, E30* value) {
    return Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
      mutable_f_8()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_8()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_8()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 8,
    kF3FieldNumber = 4,
    kF8FieldNumber = 9,
    kF0FieldNumber = 1,
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M84 f_4 = 8;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& f_4(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>& f_4() const;
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* release_f_3();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& _internal_f_3() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* release_f_8();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& _internal_f_8() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* _internal_mutable_f_8();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional int64 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.E30 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 f_1() const;
  void set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84 > f_4_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* f_3_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* f_8_;
    ::int64_t f_0_;
    ::int64_t f_2_;
    int f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73_M75 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75() : Message8_M1_M4_M15_M23_M40_M48_M73_M75(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73_M75() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73_M75(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75(const Message8_M1_M4_M15_M23_M40_M48_M73_M75& from) : Message8_M1_M4_M15_M23_M40_M48_M73_M75(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75(Message8_M1_M4_M15_M23_M40_M48_M73_M75&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73_M75& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73_M75& operator=(Message8_M1_M4_M15_M23_M40_M48_M73_M75&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73_M75& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73_M75* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73_M75*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75& a, Message8_M1_M4_M15_M23_M40_M48_M73_M75& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73_M75* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73_M75* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73_M75>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73_M75& from) { Message8_M1_M4_M15_M23_M40_M48_M73_M75::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73_M75* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73_M75(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73_M75& from);
  Message8_M1_M4_M15_M23_M40_M48_M73_M75(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73_M75&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73_M75(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M81 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81;
  using M82 = Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* release_f_3();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& _internal_f_3() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* _internal_mutable_f_3();

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_M75_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* f_1_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* f_3_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48_M73 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48_M73() : Message8_M1_M4_M15_M23_M40_M48_M73(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48_M73() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48_M73(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48_M73(const Message8_M1_M4_M15_M23_M40_M48_M73& from) : Message8_M1_M4_M15_M23_M40_M48_M73(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73(Message8_M1_M4_M15_M23_M40_M48_M73&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48_M73& operator=(const Message8_M1_M4_M15_M23_M40_M48_M73& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48_M73& operator=(Message8_M1_M4_M15_M23_M40_M48_M73&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48_M73& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48_M73* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48_M73*>(
        &_Message8_M1_M4_M15_M23_M40_M48_M73_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48_M73& a, Message8_M1_M4_M15_M23_M40_M48_M73& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48_M73* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48_M73* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48_M73* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48_M73>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48_M73& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48_M73& from) { Message8_M1_M4_M15_M23_M40_M48_M73::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48_M73* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48_M73(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48_M73(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48_M73& from);
  Message8_M1_M4_M15_M23_M40_M48_M73(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48_M73&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48_M73(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M75 = Message8_M1_M4_M15_M23_M40_M48_M73_M75;
  using M79 = Message8_M1_M4_M15_M23_M40_M48_M73_M79;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF4FieldNumber = 6,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75& f_3(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>& f_3() const;
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* release_f_4();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79& _internal_f_4() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* _internal_mutable_f_4();

  public:
  // optional int64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_M73_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75 > f_3_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* f_4_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40_M48 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40_M48() : Message8_M1_M4_M15_M23_M40_M48(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40_M48() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40_M48(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40_M48(const Message8_M1_M4_M15_M23_M40_M48& from) : Message8_M1_M4_M15_M23_M40_M48(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40_M48(Message8_M1_M4_M15_M23_M40_M48&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40_M48& operator=(const Message8_M1_M4_M15_M23_M40_M48& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40_M48& operator=(Message8_M1_M4_M15_M23_M40_M48&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40_M48& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40_M48* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40_M48*>(
        &_Message8_M1_M4_M15_M23_M40_M48_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(Message8_M1_M4_M15_M23_M40_M48& a, Message8_M1_M4_M15_M23_M40_M48& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40_M48* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40_M48* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40_M48* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40_M48>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40_M48& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40_M48& from) { Message8_M1_M4_M15_M23_M40_M48::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40_M48* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40_M48(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40_M48(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40_M48& from);
  Message8_M1_M4_M15_M23_M40_M48(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40_M48&& from) noexcept
      : Message8_M1_M4_M15_M23_M40_M48(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M73 = Message8_M1_M4_M15_M23_M40_M48_M73;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_M48_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23_M40 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23.M40) */ {
 public:
  inline Message8_M1_M4_M15_M23_M40() : Message8_M1_M4_M15_M23_M40(nullptr) {}
  ~Message8_M1_M4_M15_M23_M40() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23_M40(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23_M40(const Message8_M1_M4_M15_M23_M40& from) : Message8_M1_M4_M15_M23_M40(nullptr, from) {}
  inline Message8_M1_M4_M15_M23_M40(Message8_M1_M4_M15_M23_M40&& from) noexcept
      : Message8_M1_M4_M15_M23_M40(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23_M40& operator=(const Message8_M1_M4_M15_M23_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23_M40& operator=(Message8_M1_M4_M15_M23_M40&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23_M40& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23_M40* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23_M40*>(
        &_Message8_M1_M4_M15_M23_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(Message8_M1_M4_M15_M23_M40& a, Message8_M1_M4_M15_M23_M40& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23_M40* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23_M40* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23_M40* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23_M40>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23_M40& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23_M40& from) { Message8_M1_M4_M15_M23_M40::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23_M40* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23.M40"; }

 protected:
  explicit Message8_M1_M4_M15_M23_M40(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23_M40(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23_M40& from);
  Message8_M1_M4_M15_M23_M40(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23_M40&& from) noexcept
      : Message8_M1_M4_M15_M23_M40(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M48 = Message8_M1_M4_M15_M23_M40_M48;
  using E9 = Message8_M1_M4_M15_M23_M40_E9;
  static constexpr E9 E9_UNSPECIFIED = Message8_M1_M4_M15_M23_M40_E9_E9_UNSPECIFIED;
  static constexpr E9 E9_CONST_1 = Message8_M1_M4_M15_M23_M40_E9_E9_CONST_1;
  static constexpr E9 E9_CONST_2 = Message8_M1_M4_M15_M23_M40_E9_E9_CONST_2;
  static constexpr E9 E9_CONST_3 = Message8_M1_M4_M15_M23_M40_E9_E9_CONST_3;
  static constexpr E9 E9_CONST_4 = Message8_M1_M4_M15_M23_M40_E9_E9_CONST_4;
  static constexpr E9 E9_CONST_5 = Message8_M1_M4_M15_M23_M40_E9_E9_CONST_5;
  static inline bool E9_IsValid(int value) {
    return Message8_M1_M4_M15_M23_M40_E9_IsValid(value);
  }
  static constexpr E9 E9_MIN = Message8_M1_M4_M15_M23_M40_E9_E9_MIN;
  static constexpr E9 E9_MAX = Message8_M1_M4_M15_M23_M40_E9_E9_MAX;
  static constexpr int E9_ARRAYSIZE = Message8_M1_M4_M15_M23_M40_E9_E9_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E9_descriptor() {
    return Message8_M1_M4_M15_M23_M40_E9_descriptor();
  }
  template <typename T>
  static inline const std::string& E9_Name(T value) {
    return Message8_M1_M4_M15_M23_M40_E9_Name(value);
  }
  static inline bool E9_Parse(absl::string_view name, E9* value) {
    return Message8_M1_M4_M15_M23_M40_E9_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* release_f_2();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48& _internal_f_2() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.E9 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 f_0() const;
  void set_f_0(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 value);

  private:
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23.M40)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_M40_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15_M23 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15.M23) */ {
 public:
  inline Message8_M1_M4_M15_M23() : Message8_M1_M4_M15_M23(nullptr) {}
  ~Message8_M1_M4_M15_M23() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15_M23(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15_M23(const Message8_M1_M4_M15_M23& from) : Message8_M1_M4_M15_M23(nullptr, from) {}
  inline Message8_M1_M4_M15_M23(Message8_M1_M4_M15_M23&& from) noexcept
      : Message8_M1_M4_M15_M23(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15_M23& operator=(const Message8_M1_M4_M15_M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15_M23& operator=(Message8_M1_M4_M15_M23&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15_M23& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15_M23* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15_M23*>(
        &_Message8_M1_M4_M15_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(Message8_M1_M4_M15_M23& a, Message8_M1_M4_M15_M23& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15_M23* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15_M23* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15_M23* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15_M23>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15_M23& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15_M23& from) { Message8_M1_M4_M15_M23::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15_M23* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15.M23"; }

 protected:
  explicit Message8_M1_M4_M15_M23(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15_M23(::google::protobuf::Arena* arena, const Message8_M1_M4_M15_M23& from);
  Message8_M1_M4_M15_M23(::google::protobuf::Arena* arena, Message8_M1_M4_M15_M23&& from) noexcept
      : Message8_M1_M4_M15_M23(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M30 = Message8_M1_M4_M15_M23_M30;
  using M31 = Message8_M1_M4_M15_M23_M31;
  using M38 = Message8_M1_M4_M15_M23_M38;
  using M40 = Message8_M1_M4_M15_M23_M40;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_2()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
      mutable_f_7()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
      mutable_f_7()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
      mutable_f_7()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 5,
    kF5FieldNumber = 7,
    kF7FieldNumber = 8,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M30 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M30& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M30* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M30* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M30& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M31 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M31& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* release_f_2();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M31* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M31* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M31& _internal_f_2() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M38 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M38& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* release_f_5();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M38* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M38* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M38& _internal_f_5() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* _internal_mutable_f_5();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40 f_7 = 8;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* release_f_7();
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40& _internal_f_7() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* _internal_mutable_f_7();

  public:
  // optional uint64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15.M23)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_M23_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* f_1_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* f_2_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* f_5_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* f_7_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4_M15 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4.M15) */ {
 public:
  inline Message8_M1_M4_M15() : Message8_M1_M4_M15(nullptr) {}
  ~Message8_M1_M4_M15() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4_M15(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4_M15(const Message8_M1_M4_M15& from) : Message8_M1_M4_M15(nullptr, from) {}
  inline Message8_M1_M4_M15(Message8_M1_M4_M15&& from) noexcept
      : Message8_M1_M4_M15(nullptr, std::move(from)) {}
  inline Message8_M1_M4_M15& operator=(const Message8_M1_M4_M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4_M15& operator=(Message8_M1_M4_M15&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4_M15& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4_M15* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4_M15*>(
        &_Message8_M1_M4_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(Message8_M1_M4_M15& a, Message8_M1_M4_M15& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4_M15* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4_M15* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4_M15* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4_M15>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4_M15& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4_M15& from) { Message8_M1_M4_M15::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4_M15* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4.M15"; }

 protected:
  explicit Message8_M1_M4_M15(::google::protobuf::Arena* arena);
  Message8_M1_M4_M15(::google::protobuf::Arena* arena, const Message8_M1_M4_M15& from);
  Message8_M1_M4_M15(::google::protobuf::Arena* arena, Message8_M1_M4_M15&& from) noexcept
      : Message8_M1_M4_M15(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M16 = Message8_M1_M4_M15_M16;
  using M20 = Message8_M1_M4_M15_M20;
  using M23 = Message8_M1_M4_M15_M23;
  using M25 = Message8_M1_M4_M15_M25;
  using M28 = Message8_M1_M4_M15_M28;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_12())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_8().data())), f_8().size() * sizeof(::uint32_t)));
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())), f_10().size()));
      mutable_f_19()->generate_schema(schema);
      mutable_f_20()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_12()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_8().data())));
      sizes_list.push_back(f_8().size() * sizeof(::uint32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_18().size());
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_21().size());
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_22().size());
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      sizes_list.push_back(f_10().size());
      mutable_f_19()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_20()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_8().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      mutable_f_19()->generate_scatter_ptrs(ptrs);
      mutable_f_20()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      sizes.push_back(end_addr - start_addr + sizeof(f_12()));
      sizes.push_back(f_8().size() * sizeof(::uint32_t));
      sizes.push_back(f_18().size());
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_21().size());
      for (int i = 0; i < f_21_size(); ++i) {
        mutable_f_21(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_22().size());
      for (int i = 0; i < f_22_size(); ++i) {
        mutable_f_22(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_4().size());
      sizes.push_back(f_10().size());
      mutable_f_19()->generate_scatter_sizes(sizes);
      mutable_f_20()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_8()->Resize(sizes[idx++] / sizeof(::uint32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::uint32_t*>(f_8().data())));
      size_t num_f_18_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_18_entries; ++i) {
        auto* new_msg = add_f_18();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_18(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_21_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_21_entries; ++i) {
        auto* new_msg = add_f_21();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_21(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_22_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_22_entries; ++i) {
        auto* new_msg = add_f_22();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_22(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_10().c_str())));
      }
      idx = mutable_f_19()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_20()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_8()->Resize(sizes[idx++] / sizeof(::uint32_t), 0);
      size_t num_f_18_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_18_entries; ++i) {
        auto* new_msg = add_f_18();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_18(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_21_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_21_entries; ++i) {
        auto* new_msg = add_f_21();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_21(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_22_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_22_entries; ++i) {
        auto* new_msg = add_f_22();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_22(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_10(std::move(tmp_str));
        }
      }
      idx = mutable_f_19()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_20()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF8FieldNumber = 14,
    kF18FieldNumber = 19,
    kF21FieldNumber = 22,
    kF22FieldNumber = 24,
    kF4FieldNumber = 7,
    kF10FieldNumber = 16,
    kF19FieldNumber = 20,
    kF20FieldNumber = 21,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF5FieldNumber = 9,
    kF7FieldNumber = 11,
    kF6FieldNumber = 10,
    kF9FieldNumber = 15,
    kF11FieldNumber = 17,
    kF12FieldNumber = 18,
  };
  // repeated fixed32 f_8 = 14 [packed = true];
  int f_8_size() const;
  private:
  int _internal_f_8_size() const;

  public:
  void clear_f_8() ;
  ::uint32_t f_8(int index) const;
  void set_f_8(int index, ::uint32_t value);
  void add_f_8(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& f_8() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_f_8();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_f_8() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_f_8();

  public:
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M16 f_18 = 19;
  int f_18_size() const;
  private:
  int _internal_f_18_size() const;

  public:
  void clear_f_18() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M16* mutable_f_18(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>* mutable_f_18();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>& _internal_f_18() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>* _internal_mutable_f_18();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M16& f_18(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M16* add_f_18();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>& f_18() const;
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M25 f_21 = 22;
  int f_21_size() const;
  private:
  int _internal_f_21_size() const;

  public:
  void clear_f_21() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M25* mutable_f_21(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>* mutable_f_21();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>& _internal_f_21() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>* _internal_mutable_f_21();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M25& f_21(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M25* add_f_21();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>& f_21() const;
  // repeated .fleetbench.proto.Message8.M1.M4.M15.M28 f_22 = 24;
  int f_22_size() const;
  private:
  int _internal_f_22_size() const;

  public:
  void clear_f_22() ;
  ::fleetbench::proto::Message8_M1_M4_M15_M28* mutable_f_22(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>* mutable_f_22();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>& _internal_f_22() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>* _internal_mutable_f_22();
  public:
  const ::fleetbench::proto::Message8_M1_M4_M15_M28& f_22(int index) const;
  ::fleetbench::proto::Message8_M1_M4_M15_M28* add_f_22();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>& f_22() const;
  // optional string f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional string f_10 = 16;
  bool has_f_10() const;
  void clear_f_10() ;
  const std::string& f_10() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_10(Arg_&& arg, Args_... args);
  std::string* mutable_f_10();
  PROTOBUF_NODISCARD std::string* release_f_10();
  void set_allocated_f_10(std::string* value);

  private:
  const std::string& _internal_f_10() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_10(
      const std::string& value);
  std::string* _internal_mutable_f_10();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M20 f_19 = 20;
  bool has_f_19() const;
  void clear_f_19() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M20& f_19() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M20* release_f_19();
  ::fleetbench::proto::Message8_M1_M4_M15_M20* mutable_f_19();
  void set_allocated_f_19(::fleetbench::proto::Message8_M1_M4_M15_M20* value);
  void unsafe_arena_set_allocated_f_19(::fleetbench::proto::Message8_M1_M4_M15_M20* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M20* unsafe_arena_release_f_19();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M20& _internal_f_19() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M20* _internal_mutable_f_19();

  public:
  // optional .fleetbench.proto.Message8.M1.M4.M15.M23 f_20 = 21;
  bool has_f_20() const;
  void clear_f_20() ;
  const ::fleetbench::proto::Message8_M1_M4_M15_M23& f_20() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15_M23* release_f_20();
  ::fleetbench::proto::Message8_M1_M4_M15_M23* mutable_f_20();
  void set_allocated_f_20(::fleetbench::proto::Message8_M1_M4_M15_M23* value);
  void unsafe_arena_set_allocated_f_20(::fleetbench::proto::Message8_M1_M4_M15_M23* value);
  ::fleetbench::proto::Message8_M1_M4_M15_M23* unsafe_arena_release_f_20();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15_M23& _internal_f_20() const;
  ::fleetbench::proto::Message8_M1_M4_M15_M23* _internal_mutable_f_20();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional float f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional float f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  float f_2() const;
  void set_f_2(float value);

  private:
  float _internal_f_2() const;
  void _internal_set_f_2(float value);

  public:
  // optional float f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional int64 f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional float f_7 = 11;
  bool has_f_7() const;
  void clear_f_7() ;
  float f_7() const;
  void set_f_7(float value);

  private:
  float _internal_f_7() const;
  void _internal_set_f_7(float value);

  public:
  // optional bool f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  bool f_6() const;
  void set_f_6(bool value);

  private:
  bool _internal_f_6() const;
  void _internal_set_f_6(bool value);

  public:
  // optional bool f_9 = 15;
  bool has_f_9() const;
  void clear_f_9() ;
  bool f_9() const;
  void set_f_9(bool value);

  private:
  bool _internal_f_9() const;
  void _internal_set_f_9(bool value);

  public:
  // optional fixed64 f_11 = 17;
  bool has_f_11() const;
  void clear_f_11() ;
  ::uint64_t f_11() const;
  void set_f_11(::uint64_t value);

  private:
  ::uint64_t _internal_f_11() const;
  void _internal_set_f_11(::uint64_t value);

  public:
  // optional float f_12 = 18;
  bool has_f_12() const;
  void clear_f_12() ;
  float f_12() const;
  void set_f_12(float value);

  private:
  float _internal_f_12() const;
  void _internal_set_f_12(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4.M15)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 5,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_M15_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> f_8_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M16 > f_18_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M25 > f_21_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4_M15_M28 > f_22_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_10_;
    ::fleetbench::proto::Message8_M1_M4_M15_M20* f_19_;
    ::fleetbench::proto::Message8_M1_M4_M15_M23* f_20_;
    ::int32_t f_0_;
    float f_1_;
    float f_2_;
    float f_3_;
    ::int64_t f_5_;
    float f_7_;
    bool f_6_;
    bool f_9_;
    ::uint64_t f_11_;
    float f_12_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1_M4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1.M4) */ {
 public:
  inline Message8_M1_M4() : Message8_M1_M4(nullptr) {}
  ~Message8_M1_M4() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1_M4(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1_M4(const Message8_M1_M4& from) : Message8_M1_M4(nullptr, from) {}
  inline Message8_M1_M4(Message8_M1_M4&& from) noexcept
      : Message8_M1_M4(nullptr, std::move(from)) {}
  inline Message8_M1_M4& operator=(const Message8_M1_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1_M4& operator=(Message8_M1_M4&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1_M4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1_M4* internal_default_instance() {
    return reinterpret_cast<const Message8_M1_M4*>(
        &_Message8_M1_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(Message8_M1_M4& a, Message8_M1_M4& b) { a.Swap(&b); }
  inline void Swap(Message8_M1_M4* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1_M4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1_M4* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1_M4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1_M4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1_M4& from) { Message8_M1_M4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1_M4* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1.M4"; }

 protected:
  explicit Message8_M1_M4(::google::protobuf::Arena* arena);
  Message8_M1_M4(::google::protobuf::Arena* arena, const Message8_M1_M4& from);
  Message8_M1_M4(::google::protobuf::Arena* arena, Message8_M1_M4&& from) noexcept
      : Message8_M1_M4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M15 = Message8_M1_M4_M15;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message8.M1.M4.M15 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message8_M1_M4_M15& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M4_M15* release_f_1();
  ::fleetbench::proto::Message8_M1_M4_M15* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15* value);
  ::fleetbench::proto::Message8_M1_M4_M15* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message8_M1_M4_M15& _internal_f_1() const;
  ::fleetbench::proto::Message8_M1_M4_M15* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1.M4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_M4_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message8_M1_M4_M15* f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8_M1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8.M1) */ {
 public:
  inline Message8_M1() : Message8_M1(nullptr) {}
  ~Message8_M1() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8_M1(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8_M1(const Message8_M1& from) : Message8_M1(nullptr, from) {}
  inline Message8_M1(Message8_M1&& from) noexcept
      : Message8_M1(nullptr, std::move(from)) {}
  inline Message8_M1& operator=(const Message8_M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8_M1& operator=(Message8_M1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8_M1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8_M1* internal_default_instance() {
    return reinterpret_cast<const Message8_M1*>(
        &_Message8_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 55;
  friend void swap(Message8_M1& a, Message8_M1& b) { a.Swap(&b); }
  inline void Swap(Message8_M1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8_M1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8_M1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8_M1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8_M1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8_M1& from) { Message8_M1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8_M1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8.M1"; }

 protected:
  explicit Message8_M1(::google::protobuf::Arena* arena);
  Message8_M1(::google::protobuf::Arena* arena, const Message8_M1& from);
  Message8_M1(::google::protobuf::Arena* arena, Message8_M1&& from) noexcept
      : Message8_M1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M4 = Message8_M1_M4;
  using M9 = Message8_M1_M9;
  using M11 = Message8_M1_M11;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_12())));
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      mutable_f_17()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_12()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_16().size());
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_18().size());
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      mutable_f_17()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      mutable_f_17()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      sizes.push_back(end_addr - start_addr + sizeof(f_12()));
      sizes.push_back(f_16().size());
      for (int i = 0; i < f_16_size(); ++i) {
        mutable_f_16(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_18().size());
      for (int i = 0; i < f_18_size(); ++i) {
        mutable_f_18(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      sizes.push_back(f_2().size());
      sizes.push_back(f_4().size());
      mutable_f_17()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_12_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_16_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_16_entries; ++i) {
        auto* new_msg = add_f_16();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_16(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_18_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_18_entries; ++i) {
        auto* new_msg = add_f_18();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_18(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      idx = mutable_f_17()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_16_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_16_entries; ++i) {
        auto* new_msg = add_f_16();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_16(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_18_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_18_entries; ++i) {
        auto* new_msg = add_f_18();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_18(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      idx = mutable_f_17()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF16FieldNumber = 17,
    kF18FieldNumber = 19,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF4FieldNumber = 7,
    kF17FieldNumber = 18,
    kF1FieldNumber = 2,
    kF3FieldNumber = 6,
    kF6FieldNumber = 9,
    kF5FieldNumber = 8,
    kF7FieldNumber = 10,
    kF8FieldNumber = 11,
    kF9FieldNumber = 13,
    kF10FieldNumber = 14,
    kF11FieldNumber = 15,
    kF12FieldNumber = 16,
  };
  // repeated .fleetbench.proto.Message8.M1.M4 f_16 = 17;
  int f_16_size() const;
  private:
  int _internal_f_16_size() const;

  public:
  void clear_f_16() ;
  ::fleetbench::proto::Message8_M1_M4* mutable_f_16(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>* mutable_f_16();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>& _internal_f_16() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>* _internal_mutable_f_16();
  public:
  const ::fleetbench::proto::Message8_M1_M4& f_16(int index) const;
  ::fleetbench::proto::Message8_M1_M4* add_f_16();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>& f_16() const;
  // repeated .fleetbench.proto.Message8.M1.M11 f_18 = 19;
  int f_18_size() const;
  private:
  int _internal_f_18_size() const;

  public:
  void clear_f_18() ;
  ::fleetbench::proto::Message8_M1_M11* mutable_f_18(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>* mutable_f_18();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>& _internal_f_18() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>* _internal_mutable_f_18();
  public:
  const ::fleetbench::proto::Message8_M1_M11& f_18(int index) const;
  ::fleetbench::proto::Message8_M1_M11* add_f_18();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>& f_18() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional bytes f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message8.M1.M9 f_17 = 18;
  bool has_f_17() const;
  void clear_f_17() ;
  const ::fleetbench::proto::Message8_M1_M9& f_17() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M1_M9* release_f_17();
  ::fleetbench::proto::Message8_M1_M9* mutable_f_17();
  void set_allocated_f_17(::fleetbench::proto::Message8_M1_M9* value);
  void unsafe_arena_set_allocated_f_17(::fleetbench::proto::Message8_M1_M9* value);
  ::fleetbench::proto::Message8_M1_M9* unsafe_arena_release_f_17();

  private:
  const ::fleetbench::proto::Message8_M1_M9& _internal_f_17() const;
  ::fleetbench::proto::Message8_M1_M9* _internal_mutable_f_17();

  public:
  // optional uint64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint64_t f_1() const;
  void set_f_1(::uint64_t value);

  private:
  ::uint64_t _internal_f_1() const;
  void _internal_set_f_1(::uint64_t value);

  public:
  // optional fixed32 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // optional int32 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int32_t f_6() const;
  void set_f_6(::int32_t value);

  private:
  ::int32_t _internal_f_6() const;
  void _internal_set_f_6(::int32_t value);

  public:
  // optional uint64 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::uint64_t f_5() const;
  void set_f_5(::uint64_t value);

  private:
  ::uint64_t _internal_f_5() const;
  void _internal_set_f_5(::uint64_t value);

  public:
  // optional float f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  float f_7() const;
  void set_f_7(float value);

  private:
  float _internal_f_7() const;
  void _internal_set_f_7(float value);

  public:
  // optional int32 f_8 = 11;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int32_t f_8() const;
  void set_f_8(::int32_t value);

  private:
  ::int32_t _internal_f_8() const;
  void _internal_set_f_8(::int32_t value);

  public:
  // optional int32 f_9 = 13;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int32_t f_9() const;
  void set_f_9(::int32_t value);

  private:
  ::int32_t _internal_f_9() const;
  void _internal_set_f_9(::int32_t value);

  public:
  // optional uint32 f_10 = 14;
  bool has_f_10() const;
  void clear_f_10() ;
  ::uint32_t f_10() const;
  void set_f_10(::uint32_t value);

  private:
  ::uint32_t _internal_f_10() const;
  void _internal_set_f_10(::uint32_t value);

  public:
  // optional int64 f_11 = 15;
  bool has_f_11() const;
  void clear_f_11() ;
  ::int64_t f_11() const;
  void set_f_11(::int64_t value);

  private:
  ::int64_t _internal_f_11() const;
  void _internal_set_f_11(::int64_t value);

  public:
  // optional uint32 f_12 = 16;
  bool has_f_12() const;
  void clear_f_12() ;
  ::uint32_t f_12() const;
  void set_f_12(::uint32_t value);

  private:
  ::uint32_t _internal_f_12() const;
  void _internal_set_f_12(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8.M1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 16, 3,
      59, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_M1_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M4 > f_16_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1_M11 > f_18_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::fleetbench::proto::Message8_M1_M9* f_17_;
    ::uint64_t f_1_;
    ::uint32_t f_3_;
    ::int32_t f_6_;
    ::uint64_t f_5_;
    float f_7_;
    ::int32_t f_8_;
    ::int32_t f_9_;
    ::uint32_t f_10_;
    ::int64_t f_11_;
    ::uint32_t f_12_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};
// -------------------------------------------------------------------

class Message8 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message8) */ {
 public:
  inline Message8() : Message8(nullptr) {}
  ~Message8() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message8(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message8(const Message8& from) : Message8(nullptr, from) {}
  inline Message8(Message8&& from) noexcept
      : Message8(nullptr, std::move(from)) {}
  inline Message8& operator=(const Message8& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message8& operator=(Message8&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message8& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message8* internal_default_instance() {
    return reinterpret_cast<const Message8*>(
        &_Message8_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 97;
  friend void swap(Message8& a, Message8& b) { a.Swap(&b); }
  inline void Swap(Message8* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message8* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message8* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message8>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message8& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message8& from) { Message8::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message8* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message8"; }

 protected:
  explicit Message8(::google::protobuf::Arena* arena);
  Message8(::google::protobuf::Arena* arena, const Message8& from);
  Message8(::google::protobuf::Arena* arena, Message8&& from) noexcept
      : Message8(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M1 = Message8_M1;
  using M2 = Message8_M2;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_schema(schema);
      }
      mutable_f_11()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_10().size());
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_11()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_11()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_10().size());
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_11()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_10_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_10_entries; ++i) {
        auto* new_msg = add_f_10();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_10(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_11()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_10_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_10_entries; ++i) {
        auto* new_msg = add_f_10();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_10(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_11()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF10FieldNumber = 11,
    kF11FieldNumber = 12,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 6,
    kF3FieldNumber = 8,
    kF4FieldNumber = 9,
    kF5FieldNumber = 10,
  };
  // repeated .fleetbench.proto.Message8.M1 f_10 = 11;
  int f_10_size() const;
  private:
  int _internal_f_10_size() const;

  public:
  void clear_f_10() ;
  ::fleetbench::proto::Message8_M1* mutable_f_10(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>* mutable_f_10();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>& _internal_f_10() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>* _internal_mutable_f_10();
  public:
  const ::fleetbench::proto::Message8_M1& f_10(int index) const;
  ::fleetbench::proto::Message8_M1* add_f_10();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>& f_10() const;
  // optional .fleetbench.proto.Message8.M2 f_11 = 12;
  bool has_f_11() const;
  void clear_f_11() ;
  const ::fleetbench::proto::Message8_M2& f_11() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message8_M2* release_f_11();
  ::fleetbench::proto::Message8_M2* mutable_f_11();
  void set_allocated_f_11(::fleetbench::proto::Message8_M2* value);
  void unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message8_M2* value);
  ::fleetbench::proto::Message8_M2* unsafe_arena_release_f_11();

  private:
  const ::fleetbench::proto::Message8_M2& _internal_f_11() const;
  ::fleetbench::proto::Message8_M2* _internal_mutable_f_11();

  public:
  // optional uint64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional uint64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint64_t f_1() const;
  void set_f_1(::uint64_t value);

  private:
  ::uint64_t _internal_f_1() const;
  void _internal_set_f_1(::uint64_t value);

  public:
  // optional bool f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional int32 f_3 = 8;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // optional double f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  double f_4() const;
  void set_f_4(double value);

  private:
  double _internal_f_4() const;
  void _internal_set_f_4(double value);

  public:
  // optional int64 f_5 = 10;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message8)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message8_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message8_M1 > f_10_;
    ::fleetbench::proto::Message8_M2* f_11_;
    ::uint64_t f_0_;
    ::uint64_t f_1_;
    bool f_2_;
    ::int32_t f_3_;
    double f_4_;
    ::int64_t f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage8_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16_M33_M53_M69_M76

// optional string f_0 = 1;
inline bool Message8_M1_M4_M15_M16_M33_M53_M69_M76::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69_M76::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M53_M69_M76::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M16_M33_M53_M69_M76::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76.f_0)
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M69_M76::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M53_M69_M76::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69_M76::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M69_M76::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M69_M76::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69_M76::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16_M33_M53_M69

// optional string f_0 = 2;
inline bool Message8_M1_M4_M15_M16_M33_M53_M69::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M53_M69::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M16_M33_M53_M69::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_0)
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M69::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M53_M69::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M69::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M69::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_0)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.M76 f_2 = 3;
inline bool Message8_M1_M4_M15_M16_M33_M53_M69::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76& Message8_M1_M4_M15_M16_M33_M53_M69::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76&>(::fleetbench::proto::_Message8_M1_M4_M15_M16_M33_M53_M69_M76_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76& Message8_M1_M4_M15_M16_M33_M53_M69::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_2)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* Message8_M1_M4_M15_M16_M33_M53_M69::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* Message8_M1_M4_M15_M16_M33_M53_M69::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* Message8_M1_M4_M15_M16_M33_M53_M69::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* Message8_M1_M4_M15_M16_M33_M53_M69::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_2)
  return _msg;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M69::set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69_M76*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69.f_2)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16_M33_M53_M74

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M16_M33_M53_M74::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M74::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M1_M4_M15_M16_M33_M53_M74::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M16_M33_M53_M74::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M16_M33_M53_M74::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M74::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional bytes f_1 = 2;
inline bool Message8_M1_M4_M15_M16_M33_M53_M74::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M74::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M53_M74::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M16_M33_M53_M74::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74.f_1)
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M74::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74.f_1)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M53_M74::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message8_M1_M4_M15_M16_M33_M53_M74::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M74::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M53_M74::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M16_M33_M53_M74::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16_M33_M53

// optional float f_0 = 1;
inline bool Message8_M1_M4_M15_M16_M33_M53::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M53::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message8_M1_M4_M15_M16_M33_M53::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M16_M33_M53::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_0)
}
inline float Message8_M1_M4_M15_M16_M33_M53::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M16_M33_M53::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M69 f_1 = 4;
inline bool Message8_M1_M4_M15_M16_M33_M53::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M53::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69& Message8_M1_M4_M15_M16_M33_M53::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69&>(::fleetbench::proto::_Message8_M1_M4_M15_M16_M33_M53_M69_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69& Message8_M1_M4_M15_M16_M33_M53::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M16_M33_M53::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* Message8_M1_M4_M15_M16_M33_M53::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* Message8_M1_M4_M15_M16_M33_M53::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* Message8_M1_M4_M15_M16_M33_M53::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* Message8_M1_M4_M15_M16_M33_M53::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M16_M33_M53::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M69*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_1)
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.M74 f_4 = 5;
inline int Message8_M1_M4_M15_M16_M33_M53::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message8_M1_M4_M15_M16_M33_M53::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message8_M1_M4_M15_M16_M33_M53::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74* Message8_M1_M4_M15_M16_M33_M53::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>* Message8_M1_M4_M15_M16_M33_M53::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74& Message8_M1_M4_M15_M16_M33_M53::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74* Message8_M1_M4_M15_M16_M33_M53::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>& Message8_M1_M4_M15_M16_M33_M53::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>&
Message8_M1_M4_M15_M16_M33_M53::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53_M74>*
Message8_M1_M4_M15_M16_M33_M53::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16_M33_M60

// optional bytes f_0 = 2;
inline bool Message8_M1_M4_M15_M16_M33_M60::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M33_M60::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M60::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M16_M33_M60::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60.f_0)
}
inline std::string* Message8_M1_M4_M15_M16_M33_M60::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M16_M33_M60::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M16_M33_M60::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M60::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M33_M60::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M16_M33_M60::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16_M33

// optional float f_0 = 2;
inline bool Message8_M1_M4_M15_M16_M33::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M33::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message8_M1_M4_M15_M16_M33::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M16_M33::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_0)
}
inline float Message8_M1_M4_M15_M16_M33::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M16_M33::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M53 f_2 = 3;
inline int Message8_M1_M4_M15_M16_M33::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message8_M1_M4_M15_M16_M33::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message8_M1_M4_M15_M16_M33::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53* Message8_M1_M4_M15_M16_M33::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>* Message8_M1_M4_M15_M16_M33::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53& Message8_M1_M4_M15_M16_M33::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53* Message8_M1_M4_M15_M16_M33::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>& Message8_M1_M4_M15_M16_M33::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>&
Message8_M1_M4_M15_M16_M33::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M53>*
Message8_M1_M4_M15_M16_M33::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33.M60 f_3 = 4;
inline bool Message8_M1_M4_M15_M16_M33::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M16_M33::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60& Message8_M1_M4_M15_M16_M33::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60&>(::fleetbench::proto::_Message8_M1_M4_M15_M16_M33_M60_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60& Message8_M1_M4_M15_M16_M33::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M16_M33::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_3)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* Message8_M1_M4_M15_M16_M33::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* Message8_M1_M4_M15_M16_M33::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* Message8_M1_M4_M15_M16_M33::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* Message8_M1_M4_M15_M16_M33::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_3)
  return _msg;
}
inline void Message8_M1_M4_M15_M16_M33::set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33_M60*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M33.f_3)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16_M44

// optional bytes f_0 = 1;
inline bool Message8_M1_M4_M15_M16_M44::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16_M44::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M16_M44::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.M44.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M16_M44::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.M44.f_0)
}
inline std::string* Message8_M1_M4_M15_M16_M44::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.M44.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M16_M44::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M16_M44::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M44::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M16_M44::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.M44.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M16_M44::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.M44.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M16

// optional float f_0 = 1;
inline bool Message8_M1_M4_M15_M16::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M16::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message8_M1_M4_M15_M16::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M16::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M16.f_0)
}
inline float Message8_M1_M4_M15_M16::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M16::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M16.M33 f_1 = 4;
inline bool Message8_M1_M4_M15_M16::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M16::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33& Message8_M1_M4_M15_M16::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33&>(::fleetbench::proto::_Message8_M1_M4_M15_M16_M33_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M33& Message8_M1_M4_M15_M16::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M16::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* Message8_M1_M4_M15_M16::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* Message8_M1_M4_M15_M16::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* Message8_M1_M4_M15_M16::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M16_M33>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* Message8_M1_M4_M15_M16::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M33* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M16::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M16_M33* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M33*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.f_1)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M16.M44 f_4 = 6;
inline bool Message8_M1_M4_M15_M16::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M16::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M44& Message8_M1_M4_M15_M16::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M16_M44&>(::fleetbench::proto::_Message8_M1_M4_M15_M16_M44_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16_M44& Message8_M1_M4_M15_M16::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M16.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M16::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M16_M44* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M44*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.f_4)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* Message8_M1_M4_M15_M16::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* Message8_M1_M4_M15_M16::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M16.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* Message8_M1_M4_M15_M16::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M16_M44>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M44*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* Message8_M1_M4_M15_M16::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M16_M44* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M16.f_4)
  return _msg;
}
inline void Message8_M1_M4_M15_M16::set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M16_M44* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M16_M44*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M16.f_4)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M20_M45_M57

// optional string f_0 = 4;
inline bool Message8_M1_M4_M15_M20_M45_M57::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20_M45_M57::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M20_M45_M57::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M20_M45_M57::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57.f_0)
}
inline std::string* Message8_M1_M4_M15_M20_M45_M57::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M20_M45_M57::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M20_M45_M57::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M20_M45_M57::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M20_M45_M57::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M20_M45_M57::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M20_M45

// optional bool f_0 = 1;
inline bool Message8_M1_M4_M15_M20_M45::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20_M45::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message8_M1_M4_M15_M20_M45::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M45.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M20_M45::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M45.f_0)
}
inline bool Message8_M1_M4_M15_M20_M45::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M20_M45::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M20.M45.M57 f_1 = 2;
inline bool Message8_M1_M4_M15_M20_M45::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M20_M45::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57& Message8_M1_M4_M15_M20_M45::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57&>(::fleetbench::proto::_Message8_M1_M4_M15_M20_M45_M57_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57& Message8_M1_M4_M15_M20_M45::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M45.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M20_M45::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.M45.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* Message8_M1_M4_M15_M20_M45::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* Message8_M1_M4_M15_M20_M45::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M20.M45.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* Message8_M1_M4_M15_M20_M45::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* Message8_M1_M4_M15_M20_M45::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.M45.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M20_M45::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M45_M57*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.M45.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M20_M46_M56

// optional bytes f_0 = 1;
inline bool Message8_M1_M4_M15_M20_M46_M56::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20_M46_M56::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M20_M46_M56::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M20_M46_M56::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56.f_0)
}
inline std::string* Message8_M1_M4_M15_M20_M46_M56::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M20_M46_M56::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M20_M46_M56::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M20_M46_M56::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M20_M46_M56::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M20_M46_M56::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M20_M46

// repeated bytes f_0 = 1;
inline int Message8_M1_M4_M15_M20_M46::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message8_M1_M4_M15_M20_M46::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message8_M1_M4_M15_M20_M46::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline std::string* Message8_M1_M4_M15_M20_M46::add_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_0()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M20_M46::f_0(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
  return _internal_f_0().Get(index);
}
inline std::string* Message8_M1_M4_M15_M20_M46::mutable_f_0(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
  return _internal_mutable_f_0()->Mutable(index);
}
inline void Message8_M1_M4_M15_M20_M46::set_f_0(int index, const std::string& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::set_f_0(int index, std::string&& value) {
  _internal_mutable_f_0()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::set_f_0(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_0()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::set_f_0(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::set_f_0(int index, absl::string_view value) {
  _internal_mutable_f_0()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::add_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::add_f_0(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::add_f_0(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::add_f_0(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline void Message8_M1_M4_M15_M20_M46::add_f_0(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M20_M46::f_0() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M20_M46::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M20_M46::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M20_M46::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M20.M46.E11 f_1 = 2;
inline bool Message8_M1_M4_M15_M20_M46::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20_M46::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 Message8_M1_M4_M15_M20_M46::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M20_M46::set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 Message8_M1_M4_M15_M20_M46::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11>(_impl_.f_1_);
}
inline void Message8_M1_M4_M15_M20_M46::_internal_set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11_IsValid(value));
  _impl_.f_1_ = value;
}

// optional float f_2 = 3;
inline bool Message8_M1_M4_M15_M20_M46::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20_M46::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message8_M1_M4_M15_M20_M46::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M20_M46::set_f_2(float value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_2)
}
inline float Message8_M1_M4_M15_M20_M46::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M1_M4_M15_M20_M46::_internal_set_f_2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 4;
inline bool Message8_M1_M4_M15_M20_M46::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20_M46::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message8_M1_M4_M15_M20_M46::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M20_M46::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_3)
}
inline ::int64_t Message8_M1_M4_M15_M20_M46::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1_M4_M15_M20_M46::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional float f_4 = 5;
inline bool Message8_M1_M4_M15_M20_M46::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20_M46::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Message8_M1_M4_M15_M20_M46::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M20_M46::set_f_4(float value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_4)
}
inline float Message8_M1_M4_M15_M20_M46::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M1_M4_M15_M20_M46::_internal_set_f_4(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M20.M46.M56 f_5 = 6;
inline bool Message8_M1_M4_M15_M20_M46::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M20_M46::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56& Message8_M1_M4_M15_M20_M46::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56&>(::fleetbench::proto::_Message8_M1_M4_M15_M20_M46_M56_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56& Message8_M1_M4_M15_M20_M46::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_5)
  return _internal_f_5();
}
inline void Message8_M1_M4_M15_M20_M46::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_5)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* Message8_M1_M4_M15_M20_M46::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* Message8_M1_M4_M15_M20_M46::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_5)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* Message8_M1_M4_M15_M20_M46::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* Message8_M1_M4_M15_M20_M46::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_5)
  return _msg;
}
inline void Message8_M1_M4_M15_M20_M46::set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M46_M56*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.M46.f_5)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M20

// optional fixed64 f_0 = 1;
inline bool Message8_M1_M4_M15_M20::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M20::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message8_M1_M4_M15_M20::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M20::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M20.f_0)
}
inline ::uint64_t Message8_M1_M4_M15_M20::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M20::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M20.M45 f_1 = 2;
inline int Message8_M1_M4_M15_M20::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M1_M4_M15_M20::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M1_M4_M15_M20::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M45* Message8_M1_M4_M15_M20::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>* Message8_M1_M4_M15_M20::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M20.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20_M45& Message8_M1_M4_M15_M20::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M45* Message8_M1_M4_M15_M20::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M45* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M20.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>& Message8_M1_M4_M15_M20::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M20.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>&
Message8_M1_M4_M15_M20::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M20_M45>*
Message8_M1_M4_M15_M20::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M20.M46 f_2 = 4;
inline bool Message8_M1_M4_M15_M20::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M20::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46& Message8_M1_M4_M15_M20::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46&>(::fleetbench::proto::_Message8_M1_M4_M15_M20_M46_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20_M46& Message8_M1_M4_M15_M20::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M20.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M20::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M20_M46* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M46*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.f_2)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* Message8_M1_M4_M15_M20::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* Message8_M1_M4_M15_M20::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M20.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* Message8_M1_M4_M15_M20::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M20_M46>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M46*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* Message8_M1_M4_M15_M20::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20_M46* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M20.f_2)
  return _msg;
}
inline void Message8_M1_M4_M15_M20::set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M20_M46* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20_M46*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M20.f_2)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M30

// repeated int64 f_0 = 1 [packed = true];
inline int Message8_M1_M4_M15_M23_M30::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message8_M1_M4_M15_M23_M30::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message8_M1_M4_M15_M23_M30::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int64_t Message8_M1_M4_M15_M23_M30::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M30.f_0)
  return _internal_f_0().Get(index);
}
inline void Message8_M1_M4_M15_M23_M30::set_f_0(int index, ::int64_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M30.f_0)
}
inline void Message8_M1_M4_M15_M23_M30::add_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M30.f_0)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message8_M1_M4_M15_M23_M30::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M30.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M1_M4_M15_M23_M30::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M30.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message8_M1_M4_M15_M23_M30::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M1_M4_M15_M23_M30::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M31

// optional string f_0 = 2;
inline bool Message8_M1_M4_M15_M23_M31::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M31::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M31::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M31.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M31::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M31.f_0)
}
inline std::string* Message8_M1_M4_M15_M23_M31::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M31.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M31::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M23_M31::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M31::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M31::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M31.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M31::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M31.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M38

// optional uint32 f_0 = 2;
inline bool Message8_M1_M4_M15_M23_M38::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M38::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M38::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M38.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M38::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M38.f_0)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M38::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M38::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89

// optional string f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89.f_0)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M96.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M96.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97

// optional string f_0 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_0)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_0)
}

// optional int32 f_1 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_1)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 6;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_2)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_2)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97.f_2)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95

// optional string f_0 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_0)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_0)
}

// optional int64 f_1 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_1)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M96 f_3 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_3)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_3)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M96*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_3)
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.M97 f_4 = 5;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_M97>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94

// optional uint32 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_0)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_1)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional uint64 f_2 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::set_f_2(::uint64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_2)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_set_f_2(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 5;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_3)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional bool f_4 = 6;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::set_f_4(bool value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_4)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_set_f_4(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.M95 f_6 = 8;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_6)
  return _internal_f_6();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_6)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_6)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_6)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94::set_allocated_f_6(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_M95*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94.f_6)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93

// optional bool f_0 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_0() const {
  bool value = (_impl_._has_bits_[2] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[2] &= ~0x00004000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[2] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_0)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional uint64 f_1 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_1() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_1(::uint64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_1)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_2() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_2)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional double f_3 = 6;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_3() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_3(double value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_3)
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_3(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional fixed64 f_4 = 7;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_4() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_4(::uint64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_4)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_4(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int32 f_5 = 8;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_5() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_5)
  return _internal_f_5();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_5)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 10;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_6() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_6)
  return _internal_f_6();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_6)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E35 f_7 = 11;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_7() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_7)
  return _internal_f_7();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_7)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35>(_impl_.f_7_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_IsValid(value));
  _impl_.f_7_ = value;
}

// optional fixed64 f_8 = 14;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_8() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_8)
  return _internal_f_8();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_8(::uint64_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_8)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_8(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional uint64 f_9 = 15;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_9() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_9)
  return _internal_f_9();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_9(::uint64_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_9)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_9(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional int32 f_10 = 16;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_10() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_10)
  return _internal_f_10();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_10(::int32_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_10)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_10(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E36 f_11 = 18;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_11() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_11)
  return _internal_f_11();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_11(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_11)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36>(_impl_.f_11_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_11(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_IsValid(value));
  _impl_.f_11_ = value;
}

// optional string f_12 = 20;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_12)
  return _internal_f_12();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_12(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_12_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_12)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_12)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_12(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_12_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_12_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_12)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_12_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_12_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_12(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_12_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_12_.IsDefault()) {
          _impl_.f_12_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_12)
}

// optional float f_13 = 21;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_13() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0;
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_13)
  return _internal_f_13();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_13(float value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_13)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_13(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E37 f_14 = 22;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_14() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_14)
  return _internal_f_14();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_14(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_14)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37>(_impl_.f_14_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_14(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_IsValid(value));
  _impl_.f_14_ = value;
}

// optional int64 f_15 = 25;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_15() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_15)
  return _internal_f_15();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_15(::int64_t value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_15)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_15(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = value;
}

// optional string f_16 = 26;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_16)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_16)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_16)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_16)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E38 f_17 = 28;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_17() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_17)
  return _internal_f_17();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_17(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_17)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38>(_impl_.f_17_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_17(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_IsValid(value));
  _impl_.f_17_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E39 f_18 = 29;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_18() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_18)
  return _internal_f_18();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_18(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_18)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39>(_impl_.f_18_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_18(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_IsValid(value));
  _impl_.f_18_ = value;
}

// optional string f_19 = 31;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_19() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_19)
  return _internal_f_19();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_19(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_19_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_19)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_19() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_19();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_19)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_19(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_19_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_19_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_19)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_19_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_19_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_19(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_19_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_19_.IsDefault()) {
          _impl_.f_19_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_19)
}

// optional int32 f_20 = 32;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_20() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_20)
  return _internal_f_20();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_20(::int32_t value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_20)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_20(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional uint64 f_21 = 33;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_21() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_21)
  return _internal_f_21();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_21(::uint64_t value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_21)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_21(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional int32 f_22 = 38;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_22() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_22)
  return _internal_f_22();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_22(::int32_t value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_22)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_22(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = value;
}

// optional string f_23 = 39;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_23() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_23)
  return _internal_f_23();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_23(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_23_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_23)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_23();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_23)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_23(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_23_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_23_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_23)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_23_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_23_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_23(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_23_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_23_.IsDefault()) {
          _impl_.f_23_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_23)
}

// optional string f_24 = 40;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_24() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_24)
  return _internal_f_24();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_24(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_24)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_24() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_24();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_24)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_24(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_24_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_24)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_24_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_24_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_24(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_24_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_24_.IsDefault()) {
          _impl_.f_24_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_24)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E40 f_25 = 42;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_25() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_25)
  return _internal_f_25();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_25(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_25)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40>(_impl_.f_25_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_25(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_IsValid(value));
  _impl_.f_25_ = value;
}

// optional float f_26 = 43;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_26() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_26)
  return _internal_f_26();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_26(float value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_26)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_26(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional float f_27 = 45;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_27() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_27)
  return _internal_f_27();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_27(float value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_27)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_27(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional float f_28 = 47;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_28() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = 0;
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_28)
  return _internal_f_28();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_28(float value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_28)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_28_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_28(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = value;
}

// optional string f_29 = 49;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_29() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_29() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_29)
  return _internal_f_29();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_29(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_29_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_29)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_29() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_29();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_29)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_29_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_29(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_29_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_29_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_29)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_29_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_29_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_29(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_29_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_29_.IsDefault()) {
          _impl_.f_29_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_29)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E41 f_30 = 50;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_30() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_30)
  return _internal_f_30();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_30(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_30)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41>(_impl_.f_30_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_30(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_IsValid(value));
  _impl_.f_30_ = value;
}

// optional int64 f_31 = 52;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_31() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_31() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_31)
  return _internal_f_31();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_31(::int64_t value) {
  _internal_set_f_31(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_31)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_31(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_ = value;
}

// optional string f_32 = 53;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_32() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_32() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_32)
  return _internal_f_32();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_32(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_32_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_32)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_32() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_32();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_32)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_32_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_32(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_32_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_32_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_32)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_32_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_32_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_32(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_32_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_32_.IsDefault()) {
          _impl_.f_32_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_32)
}

// optional float f_33 = 54;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_33() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = 0;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_33() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_33)
  return _internal_f_33();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_33(float value) {
  _internal_set_f_33(value);
  _impl_._has_bits_[2] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_33)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_33(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = value;
}

// optional uint64 f_34 = 55;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_34() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_34() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_34)
  return _internal_f_34();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_34(::uint64_t value) {
  _internal_set_f_34(value);
  _impl_._has_bits_[1] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_34)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_34(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_ = value;
}

// optional float f_35 = 56;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_35() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = 0;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_35)
  return _internal_f_35();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_35(float value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[2] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_35)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_35_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_35(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = value;
}

// optional float f_36 = 57;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_36() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = 0;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_36)
  return _internal_f_36();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_36(float value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[2] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_36)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_36(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E42 f_37 = 59;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_37() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = 0;
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_37)
  return _internal_f_37();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_37(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[2] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_37)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42>(_impl_.f_37_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_37(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_IsValid(value));
  _impl_.f_37_ = value;
}

// optional int32 f_38 = 62;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_38() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = 0;
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_38() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_38)
  return _internal_f_38();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_38(::int32_t value) {
  _internal_set_f_38(value);
  _impl_._has_bits_[2] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_38)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_38(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = value;
}

// optional int64 f_39 = 63;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_39() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_39)
  return _internal_f_39();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_39(::int64_t value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[2] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_39)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_39(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional bytes f_40 = 65;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_40() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_40() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_40)
  return _internal_f_40();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_40(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_40_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_40)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_40() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_40();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_40)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_40_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_40(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_40_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_40_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_40)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_40_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_40_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_40(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_40_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_40_.IsDefault()) {
          _impl_.f_40_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_40)
}

// optional uint32 f_41 = 67;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_41() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_41)
  return _internal_f_41();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_41(::uint32_t value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[2] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_41)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_41(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E43 f_42 = 68;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_42() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = 0;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_42)
  return _internal_f_42();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_42(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[2] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_42)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43>(_impl_.f_42_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_42(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_IsValid(value));
  _impl_.f_42_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E44 f_43 = 69;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_43() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_ = 0;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_43() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_43)
  return _internal_f_43();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_43(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 value) {
  _internal_set_f_43(value);
  _impl_._has_bits_[2] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_43)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44>(_impl_.f_43_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_43(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_IsValid(value));
  _impl_.f_43_ = value;
}

// optional sfixed32 f_44 = 70;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_44() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = 0;
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_44() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_44)
  return _internal_f_44();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_44(::int32_t value) {
  _internal_set_f_44(value);
  _impl_._has_bits_[2] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_44)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_44(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_ = value;
}

// optional int32 f_45 = 71;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_45() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = 0;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_45)
  return _internal_f_45();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_45(::int32_t value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[2] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_45)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_45(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = value;
}

// optional string f_46 = 73;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_46() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_46() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_46)
  return _internal_f_46();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_46(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_46_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_46)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_46() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_46();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_46)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_46(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_46_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_46_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_46)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_46_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_46_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_46(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_46_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_46_.IsDefault()) {
          _impl_.f_46_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_46)
}

// optional bool f_47 = 75;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_47() const {
  bool value = (_impl_._has_bits_[2] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = false;
  _impl_._has_bits_[2] &= ~0x00008000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_47() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_47)
  return _internal_f_47();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_47(bool value) {
  _internal_set_f_47(value);
  _impl_._has_bits_[2] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_47)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_47_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_47(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = value;
}

// optional fixed32 f_48 = 76;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_48() const {
  bool value = (_impl_._has_bits_[2] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = 0u;
  _impl_._has_bits_[2] &= ~0x00002000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_48() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_48)
  return _internal_f_48();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_48(::uint32_t value) {
  _internal_set_f_48(value);
  _impl_._has_bits_[2] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_48)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_48(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E45 f_49 = 77 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_49_size() const {
  return _internal_f_49().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_49_size() const {
  return _internal_f_49_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_49(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_49)
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45>(_internal_f_49().Get(index));
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_49(int index, ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 value) {
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_IsValid(value));
  _internal_mutable_f_49()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_49)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_49(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45 value) {
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_49()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_49)
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_49() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_49)
  return _internal_f_49();
}
inline ::google::protobuf::RepeatedField<int>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_49()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_49)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_49();
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_49()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_;
}
inline ::google::protobuf::RepeatedField<int>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_49() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_49_;
}

// optional int64 f_50 = 78;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_50() const {
  bool value = (_impl_._has_bits_[2] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000800u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_50() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_50)
  return _internal_f_50();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_50(::int64_t value) {
  _internal_set_f_50(value);
  _impl_._has_bits_[2] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_50)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_50_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_50(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = value;
}

// optional double f_51 = 79;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_51() const {
  bool value = (_impl_._has_bits_[2] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = 0;
  _impl_._has_bits_[2] &= ~0x00001000u;
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_51() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_51)
  return _internal_f_51();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_51(double value) {
  _internal_set_f_51(value);
  _impl_._has_bits_[2] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_51)
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_51_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_51(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = value;
}

// optional int64 f_52 = 82;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_52() const {
  bool value = (_impl_._has_bits_[2] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00040000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_52() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_52)
  return _internal_f_52();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_52(::int64_t value) {
  _internal_set_f_52(value);
  _impl_._has_bits_[2] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_52)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_52_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_52(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_ = value;
}

// optional string f_53 = 83;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_53() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_53() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_53)
  return _internal_f_53();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_53(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_53_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_53)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_53() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_53();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_53)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_53(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_53_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_53_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_53)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_53_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_53_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_53(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_53_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_53_.IsDefault()) {
          _impl_.f_53_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_53)
}

// optional int32 f_54 = 84;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_54() const {
  bool value = (_impl_._has_bits_[2] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = 0;
  _impl_._has_bits_[2] &= ~0x00100000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_54() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_54)
  return _internal_f_54();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_54(::int32_t value) {
  _internal_set_f_54(value);
  _impl_._has_bits_[2] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_54)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_54_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_54(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = value;
}

// optional int64 f_55 = 85;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_55() const {
  bool value = (_impl_._has_bits_[2] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00080000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_55() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_55)
  return _internal_f_55();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_55(::int64_t value) {
  _internal_set_f_55(value);
  _impl_._has_bits_[2] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_55)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_55(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E46 f_56 = 88;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_56() const {
  bool value = (_impl_._has_bits_[2] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_ = 0;
  _impl_._has_bits_[2] &= ~0x00200000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_56() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_56)
  return _internal_f_56();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_56(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 value) {
  _internal_set_f_56(value);
  _impl_._has_bits_[2] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_56)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46>(_impl_.f_56_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_56(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_IsValid(value));
  _impl_.f_56_ = value;
}

// optional string f_57 = 89;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_57() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_57() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_57)
  return _internal_f_57();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_57(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_57_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_57)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_57() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_57();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_57)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_57(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_57_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_57_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_57)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_57_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_57_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_57(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_57_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_57_.IsDefault()) {
          _impl_.f_57_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_57)
}

// optional string f_58 = 91;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_58() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_58() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_58)
  return _internal_f_58();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_58(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_58_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_58)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_58() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_58();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_58)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_58_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_58(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_58_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_58_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_58)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_58_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_58_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_58(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_58_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_58_.IsDefault()) {
          _impl_.f_58_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_58)
}

// optional uint64 f_59 = 93;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_59() const {
  bool value = (_impl_._has_bits_[2] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = ::uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x00400000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_59)
  return _internal_f_59();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_59(::uint64_t value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[2] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_59)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_59_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_59(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = value;
}

// optional bytes f_60 = 95;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_60() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_60() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_60)
  return _internal_f_60();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_60(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_60_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_60)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_60() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_60();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_60)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_60() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_60_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_60(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_60_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.f_60_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_60)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.f_60_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_60_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_60(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.f_60_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_60_.IsDefault()) {
          _impl_.f_60_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_60)
}

// optional string f_61 = 96;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_61() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_61() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_61)
  return _internal_f_61();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_61(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_61_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_61)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_61() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_61();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_61)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_61() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_61_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_61(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_61_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.f_61_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_61)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.f_61_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_61_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_61(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.f_61_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_61_.IsDefault()) {
          _impl_.f_61_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_61)
}

// optional bool f_62 = 97;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_62() const {
  bool value = (_impl_._has_bits_[2] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = false;
  _impl_._has_bits_[2] &= ~0x00010000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_62() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_62)
  return _internal_f_62();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_62(bool value) {
  _internal_set_f_62(value);
  _impl_._has_bits_[2] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_62)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_62() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_62_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_62(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = value;
}

// optional int64 f_63 = 99;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_63() const {
  bool value = (_impl_._has_bits_[2] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00800000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_63() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_63)
  return _internal_f_63();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_63(::int64_t value) {
  _internal_set_f_63(value);
  _impl_._has_bits_[2] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_63)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_63() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_63_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_63(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E47 f_64 = 100;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_64() const {
  bool value = (_impl_._has_bits_[2] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = 0;
  _impl_._has_bits_[2] &= ~0x01000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_64() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_64)
  return _internal_f_64();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_64(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 value) {
  _internal_set_f_64(value);
  _impl_._has_bits_[2] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_64)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47>(_impl_.f_64_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_64(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_IsValid(value));
  _impl_.f_64_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E48 f_65 = 102;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_65() const {
  bool value = (_impl_._has_bits_[2] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = 0;
  _impl_._has_bits_[2] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_65() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_65)
  return _internal_f_65();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_65(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 value) {
  _internal_set_f_65(value);
  _impl_._has_bits_[2] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_65)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_65() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48>(_impl_.f_65_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_65(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_IsValid(value));
  _impl_.f_65_ = value;
}

// optional fixed32 f_66 = 104;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_66() const {
  bool value = (_impl_._has_bits_[2] & 0x10000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_66() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = 0u;
  _impl_._has_bits_[2] &= ~0x10000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_66() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_66)
  return _internal_f_66();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_66(::uint32_t value) {
  _internal_set_f_66(value);
  _impl_._has_bits_[2] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_66)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_66() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_66_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_66(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = value;
}

// optional int64 f_67 = 105;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_67() const {
  bool value = (_impl_._has_bits_[2] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x04000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_67() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_67)
  return _internal_f_67();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_67(::int64_t value) {
  _internal_set_f_67(value);
  _impl_._has_bits_[2] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_67)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_67() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_67_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_67(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = value;
}

// optional uint64 f_68 = 107;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_68() const {
  bool value = (_impl_._has_bits_[2] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_68() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = ::uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x08000000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_68() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_68)
  return _internal_f_68();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_68(::uint64_t value) {
  _internal_set_f_68(value);
  _impl_._has_bits_[2] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_68)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_68() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_68_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_68(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = value;
}

// optional fixed32 f_69 = 110;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_69() const {
  bool value = (_impl_._has_bits_[2] & 0x20000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = 0u;
  _impl_._has_bits_[2] &= ~0x20000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_69() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_69)
  return _internal_f_69();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_69(::uint32_t value) {
  _internal_set_f_69(value);
  _impl_._has_bits_[2] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_69)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_69() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_69_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_69(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = value;
}

// optional int64 f_70 = 111;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_70() const {
  bool value = (_impl_._has_bits_[2] & 0x40000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x40000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_70() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_70)
  return _internal_f_70();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_70(::int64_t value) {
  _internal_set_f_70(value);
  _impl_._has_bits_[2] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_70)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_70() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_70_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_70(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = value;
}

// optional int32 f_71 = 112;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_71() const {
  bool value = (_impl_._has_bits_[2] & 0x80000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = 0;
  _impl_._has_bits_[2] &= ~0x80000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_71() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_71)
  return _internal_f_71();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_71(::int32_t value) {
  _internal_set_f_71(value);
  _impl_._has_bits_[2] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_71)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_71() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_71_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_71(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = value;
}

// optional fixed32 f_72 = 113;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_72() const {
  bool value = (_impl_._has_bits_[3] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = 0u;
  _impl_._has_bits_[3] &= ~0x00000001u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_72() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_72)
  return _internal_f_72();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_72(::uint32_t value) {
  _internal_set_f_72(value);
  _impl_._has_bits_[3] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_72)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_72() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_72_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_72(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_ = value;
}

// optional float f_73 = 114;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_73() const {
  bool value = (_impl_._has_bits_[3] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_73_ = 0;
  _impl_._has_bits_[3] &= ~0x00000004u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_73() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_73)
  return _internal_f_73();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_73(float value) {
  _internal_set_f_73(value);
  _impl_._has_bits_[3] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_73)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_73() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_73_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_73(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_73_ = value;
}

// optional string f_74 = 115;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_74() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_74() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_74)
  return _internal_f_74();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_74(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_74_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_74)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_74() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_74();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_74)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_74() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_74_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_74(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_74_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.f_74_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_74)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.f_74_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_74_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_74(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.f_74_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_74_.IsDefault()) {
          _impl_.f_74_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_74)
}

// optional int64 f_75 = 116;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_75() const {
  bool value = (_impl_._has_bits_[3] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000002u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_75() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_75)
  return _internal_f_75();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_75(::int64_t value) {
  _internal_set_f_75(value);
  _impl_._has_bits_[3] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_75)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_75() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_75_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_75(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_ = value;
}

// repeated int32 f_76 = 117 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_76_size() const {
  return _internal_f_76().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_76_size() const {
  return _internal_f_76_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_.Clear();
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_76(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_76)
  return _internal_f_76().Get(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_76(int index, ::int32_t value) {
  _internal_mutable_f_76()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_76)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_76(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_76()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_76)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_76() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_76)
  return _internal_f_76();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_76()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_76)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_76();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_76() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_76_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_76() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_76_;
}

// optional int64 f_77 = 119;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_77() const {
  bool value = (_impl_._has_bits_[3] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000010u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_77() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_77)
  return _internal_f_77();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_77(::int64_t value) {
  _internal_set_f_77(value);
  _impl_._has_bits_[3] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_77)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_77() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_77_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_77(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_ = value;
}

// optional int64 f_78 = 120;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_78() const {
  bool value = (_impl_._has_bits_[3] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000020u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_78() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_78)
  return _internal_f_78();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_78(::int64_t value) {
  _internal_set_f_78(value);
  _impl_._has_bits_[3] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_78)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_78() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_78_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_78(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_ = value;
}

// optional int64 f_79 = 121;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_79() const {
  bool value = (_impl_._has_bits_[3] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_79() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000040u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_79() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_79)
  return _internal_f_79();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_79(::int64_t value) {
  _internal_set_f_79(value);
  _impl_._has_bits_[3] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_79)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_79() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_79_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_79(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_79_ = value;
}

// optional int32 f_80 = 122;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_80() const {
  bool value = (_impl_._has_bits_[3] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_80() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_80_ = 0;
  _impl_._has_bits_[3] &= ~0x00000008u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_80() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_80)
  return _internal_f_80();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_80(::int32_t value) {
  _internal_set_f_80(value);
  _impl_._has_bits_[3] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_80)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_80() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_80_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_80(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_80_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E49 f_81 = 123;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_81() const {
  bool value = (_impl_._has_bits_[3] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_81() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_81_ = 0;
  _impl_._has_bits_[3] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_81() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_81)
  return _internal_f_81();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_81(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 value) {
  _internal_set_f_81(value);
  _impl_._has_bits_[3] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_81)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_81() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49>(_impl_.f_81_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_81(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_IsValid(value));
  _impl_.f_81_ = value;
}

// repeated float f_82 = 125 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_82_size() const {
  return _internal_f_82().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_82_size() const {
  return _internal_f_82_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_82() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_82_.Clear();
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_82(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_82)
  return _internal_f_82().Get(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_82(int index, float value) {
  _internal_mutable_f_82()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_82)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_82(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_82()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_82)
}
inline const ::google::protobuf::RepeatedField<float>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_82() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_82)
  return _internal_f_82();
}
inline ::google::protobuf::RepeatedField<float>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_82()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_82)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_82();
}
inline const ::google::protobuf::RepeatedField<float>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_82() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_82_;
}
inline ::google::protobuf::RepeatedField<float>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_82() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_82_;
}

// optional int64 f_83 = 127;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_83() const {
  bool value = (_impl_._has_bits_[3] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_83() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000080u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_83() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_83)
  return _internal_f_83();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_83(::int64_t value) {
  _internal_set_f_83(value);
  _impl_._has_bits_[3] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_83)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_83() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_83_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_83(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_83_ = value;
}

// optional string f_84 = 128;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_84() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_84_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_84() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_84)
  return _internal_f_84();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_84(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_84_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_84)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_84() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_84();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_84)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_84() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_84_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_84(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.f_84_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.f_84_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_84() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_84)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.f_84_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_84_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_84(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.f_84_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_84_.IsDefault()) {
          _impl_.f_84_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_84)
}

// optional uint64 f_85 = 130;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_85() const {
  bool value = (_impl_._has_bits_[3] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_85() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_ = ::uint64_t{0u};
  _impl_._has_bits_[3] &= ~0x00000400u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_85() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_85)
  return _internal_f_85();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_85(::uint64_t value) {
  _internal_set_f_85(value);
  _impl_._has_bits_[3] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_85)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_85() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_85_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_85(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_85_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E50 f_86 = 132;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_86() const {
  bool value = (_impl_._has_bits_[3] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_86() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_86_ = 0;
  _impl_._has_bits_[3] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_86() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_86)
  return _internal_f_86();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_86(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 value) {
  _internal_set_f_86(value);
  _impl_._has_bits_[3] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_86)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_86() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50>(_impl_.f_86_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_86(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_IsValid(value));
  _impl_.f_86_ = value;
}

// optional string f_87 = 134;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_87() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_87() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_87_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_87() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_87)
  return _internal_f_87();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_87(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_87_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_87)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_87() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_87();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_87)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_87() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_87_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_87(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.f_87_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_87() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.f_87_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_87() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_87)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.f_87_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_87_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_87(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.f_87_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_87_.IsDefault()) {
          _impl_.f_87_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_87)
}

// optional int32 f_88 = 136;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_88() const {
  bool value = (_impl_._has_bits_[3] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_88() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_88_ = 0;
  _impl_._has_bits_[3] &= ~0x00001000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_88() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_88)
  return _internal_f_88();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_88(::int32_t value) {
  _internal_set_f_88(value);
  _impl_._has_bits_[3] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_88)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_88() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_88_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_88(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_88_ = value;
}

// optional int64 f_89 = 137;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_89() const {
  bool value = (_impl_._has_bits_[3] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_89() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00000800u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_89() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_89)
  return _internal_f_89();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_89(::int64_t value) {
  _internal_set_f_89(value);
  _impl_._has_bits_[3] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_89)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_89() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_89_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_89(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_89_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E51 f_90 = 140;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_90() const {
  bool value = (_impl_._has_bits_[3] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_90() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_90_ = 0;
  _impl_._has_bits_[3] &= ~0x00002000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_90() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_90)
  return _internal_f_90();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_90(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 value) {
  _internal_set_f_90(value);
  _impl_._has_bits_[3] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_90)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_90() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51>(_impl_.f_90_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_90(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_IsValid(value));
  _impl_.f_90_ = value;
}

// optional int32 f_91 = 142;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_91() const {
  bool value = (_impl_._has_bits_[3] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_91() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_ = 0;
  _impl_._has_bits_[3] &= ~0x00008000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_91() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_91)
  return _internal_f_91();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_91(::int32_t value) {
  _internal_set_f_91(value);
  _impl_._has_bits_[3] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_91)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_91() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_91_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_91(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_91_ = value;
}

// optional int64 f_92 = 143;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_92() const {
  bool value = (_impl_._has_bits_[3] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_92() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00004000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_92() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_92)
  return _internal_f_92();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_92(::int64_t value) {
  _internal_set_f_92(value);
  _impl_._has_bits_[3] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_92)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_92() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_92_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_92(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_92_ = value;
}

// optional int32 f_93 = 144;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_93() const {
  bool value = (_impl_._has_bits_[3] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_93() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = 0;
  _impl_._has_bits_[3] &= ~0x00010000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_93() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_93)
  return _internal_f_93();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_93(::int32_t value) {
  _internal_set_f_93(value);
  _impl_._has_bits_[3] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_93)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_93() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_93_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_93(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_93_ = value;
}

// optional float f_94 = 145;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_94() const {
  bool value = (_impl_._has_bits_[3] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_94() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_94_ = 0;
  _impl_._has_bits_[3] &= ~0x00020000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_94() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_94)
  return _internal_f_94();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_94(float value) {
  _internal_set_f_94(value);
  _impl_._has_bits_[3] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_94)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_94() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_94_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_94(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_94_ = value;
}

// optional string f_95 = 146;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_95() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_95_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_95() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_95)
  return _internal_f_95();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_95(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_95_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_95)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_95() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_95();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_95)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_95() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_95_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_95(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.f_95_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00020000u;
  return _impl_.f_95_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_95() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_95)
  if ((_impl_._has_bits_[0] & 0x00020000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00020000u;
  auto* released = _impl_.f_95_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_95_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_95(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.f_95_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_95_.IsDefault()) {
          _impl_.f_95_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_95)
}

// optional string f_96 = 147;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_96() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_96() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_96_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_96() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_96)
  return _internal_f_96();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_96(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_96_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_96)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_96() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_96();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_96)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_96() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_96_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_96(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.f_96_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_96() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00040000u;
  return _impl_.f_96_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_96() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_96)
  if ((_impl_._has_bits_[0] & 0x00040000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00040000u;
  auto* released = _impl_.f_96_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_96_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_96(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.f_96_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_96_.IsDefault()) {
          _impl_.f_96_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_96)
}

// optional int64 f_97 = 148;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_97() const {
  bool value = (_impl_._has_bits_[3] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_97() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_97_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x00080000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_97() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_97)
  return _internal_f_97();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_97(::int64_t value) {
  _internal_set_f_97(value);
  _impl_._has_bits_[3] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_97)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_97() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_97_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_97(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_97_ = value;
}

// optional int32 f_98 = 150;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_98() const {
  bool value = (_impl_._has_bits_[3] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_98() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = 0;
  _impl_._has_bits_[3] &= ~0x00040000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_98() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_98)
  return _internal_f_98();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_98(::int32_t value) {
  _internal_set_f_98(value);
  _impl_._has_bits_[3] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_98)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_98() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_98_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_98(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_98_ = value;
}

// optional int32 f_99 = 152;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_99() const {
  bool value = (_impl_._has_bits_[3] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_99() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_99_ = 0;
  _impl_._has_bits_[3] &= ~0x00100000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_99() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_99)
  return _internal_f_99();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_99(::int32_t value) {
  _internal_set_f_99(value);
  _impl_._has_bits_[3] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_99)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_99() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_99_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_99(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_99_ = value;
}

// optional bool f_100 = 153;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_100() const {
  bool value = (_impl_._has_bits_[2] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_100() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = false;
  _impl_._has_bits_[2] &= ~0x00020000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_100() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_100)
  return _internal_f_100();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_100(bool value) {
  _internal_set_f_100(value);
  _impl_._has_bits_[2] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_100)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_100() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_100_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_100(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_100_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E52 f_101 = 154;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_101() const {
  bool value = (_impl_._has_bits_[3] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_101() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_101_ = 0;
  _impl_._has_bits_[3] &= ~0x00200000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_101() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_101)
  return _internal_f_101();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_101(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 value) {
  _internal_set_f_101(value);
  _impl_._has_bits_[3] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_101)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_101() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52>(_impl_.f_101_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_101(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_IsValid(value));
  _impl_.f_101_ = value;
}

// optional float f_102 = 156;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_102() const {
  bool value = (_impl_._has_bits_[3] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_102() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = 0;
  _impl_._has_bits_[3] &= ~0x00400000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_102() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_102)
  return _internal_f_102();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_102(float value) {
  _internal_set_f_102(value);
  _impl_._has_bits_[3] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_102)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_102() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_102_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_102(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_102_ = value;
}

// optional string f_103 = 157;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_103() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_103() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_103_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_103() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_103)
  return _internal_f_103();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_103(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_103_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_103)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_103() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_103();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_103)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_103() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_103_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_103(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.f_103_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_103() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00080000u;
  return _impl_.f_103_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_103() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_103)
  if ((_impl_._has_bits_[0] & 0x00080000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00080000u;
  auto* released = _impl_.f_103_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_103_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_103(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.f_103_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_103_.IsDefault()) {
          _impl_.f_103_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_103)
}

// optional string f_104 = 158;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_104() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_104() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_104_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_104() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_104)
  return _internal_f_104();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_104(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_104_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_104)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_104() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_104();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_104)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_104() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_104_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_104(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.f_104_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_104() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00100000u;
  return _impl_.f_104_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_104() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_104)
  if ((_impl_._has_bits_[0] & 0x00100000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00100000u;
  auto* released = _impl_.f_104_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_104_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_104(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.f_104_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_104_.IsDefault()) {
          _impl_.f_104_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_104)
}

// optional int32 f_105 = 159;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_105() const {
  bool value = (_impl_._has_bits_[3] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_105() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_105_ = 0;
  _impl_._has_bits_[3] &= ~0x00800000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_105() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_105)
  return _internal_f_105();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_105(::int32_t value) {
  _internal_set_f_105(value);
  _impl_._has_bits_[3] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_105)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_105() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_105_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_105(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_105_ = value;
}

// optional string f_106 = 161;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_106() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_106_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_106() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_106)
  return _internal_f_106();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_106(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_106_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_106)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_106() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_106();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_106)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_106() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_106_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_106(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.f_106_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00200000u;
  return _impl_.f_106_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_106() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_106)
  if ((_impl_._has_bits_[0] & 0x00200000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00200000u;
  auto* released = _impl_.f_106_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_106_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_106(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.f_106_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_106_.IsDefault()) {
          _impl_.f_106_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_106)
}

// optional double f_107 = 164;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_107() const {
  bool value = (_impl_._has_bits_[3] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_107() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_107_ = 0;
  _impl_._has_bits_[3] &= ~0x01000000u;
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_107() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_107)
  return _internal_f_107();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_107(double value) {
  _internal_set_f_107(value);
  _impl_._has_bits_[3] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_107)
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_107() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_107_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_107(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_107_ = value;
}

// optional string f_108 = 166;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_108() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_108() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_108_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_108() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_108)
  return _internal_f_108();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_108(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.f_108_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_108)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_108() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_108();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_108)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_108() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_108_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_108(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.f_108_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_108() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00400000u;
  return _impl_.f_108_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_108() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_108)
  if ((_impl_._has_bits_[0] & 0x00400000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00400000u;
  auto* released = _impl_.f_108_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_108_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_108(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.f_108_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_108_.IsDefault()) {
          _impl_.f_108_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_108)
}

// optional uint64 f_109 = 167;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_109() const {
  bool value = (_impl_._has_bits_[3] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_109() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_109_ = ::uint64_t{0u};
  _impl_._has_bits_[3] &= ~0x02000000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_109() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_109)
  return _internal_f_109();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_109(::uint64_t value) {
  _internal_set_f_109(value);
  _impl_._has_bits_[3] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_109)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_109() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_109_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_109(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_109_ = value;
}

// optional uint64 f_110 = 169;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_110() const {
  bool value = (_impl_._has_bits_[3] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_110() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = ::uint64_t{0u};
  _impl_._has_bits_[3] &= ~0x04000000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_110() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_110)
  return _internal_f_110();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_110(::uint64_t value) {
  _internal_set_f_110(value);
  _impl_._has_bits_[3] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_110)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_110() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_110_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_110(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_110_ = value;
}

// optional fixed32 f_111 = 171;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_111() const {
  bool value = (_impl_._has_bits_[3] & 0x10000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_111() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_111_ = 0u;
  _impl_._has_bits_[3] &= ~0x10000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_111() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_111)
  return _internal_f_111();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_111(::uint32_t value) {
  _internal_set_f_111(value);
  _impl_._has_bits_[3] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_111)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_111() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_111_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_111(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_111_ = value;
}

// optional int64 f_112 = 172;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_112() const {
  bool value = (_impl_._has_bits_[3] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_112() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_112_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x08000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_112() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_112)
  return _internal_f_112();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_112(::int64_t value) {
  _internal_set_f_112(value);
  _impl_._has_bits_[3] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_112)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_112() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_112_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_112(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_112_ = value;
}

// optional string f_113 = 174;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_113() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_113() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_113_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_113() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_113)
  return _internal_f_113();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_113(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.f_113_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_113)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_113() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_113();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_113)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_113() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_113_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_113(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.f_113_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_113() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00800000u;
  return _impl_.f_113_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_113() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_113)
  if ((_impl_._has_bits_[0] & 0x00800000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00800000u;
  auto* released = _impl_.f_113_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_113_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_113(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.f_113_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_113_.IsDefault()) {
          _impl_.f_113_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_113)
}

// repeated bytes f_114 = 175;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_114_size() const {
  return _internal_f_114().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_114_size() const {
  return _internal_f_114_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_114() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_114_.Clear();
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_114()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_114()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_114(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
  return _internal_f_114().Get(index);
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_114(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
  return _internal_mutable_f_114()->Mutable(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_114(int index, const std::string& value) {
  _internal_mutable_f_114()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_114(int index, std::string&& value) {
  _internal_mutable_f_114()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_114(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_114()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_114(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_f_114()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_114(int index, absl::string_view value) {
  _internal_mutable_f_114()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_114(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_114()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_114(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_114()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_114(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_114()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_114(const void* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_114()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_114(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_114()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_114() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
  return _internal_f_114();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_114() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_114)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_114();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_114() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_114_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_114() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_114_;
}

// optional string f_115 = 178;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_115() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_115() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_115_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_115() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_115)
  return _internal_f_115();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_115(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.f_115_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_115)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_115() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_115();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_115)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_115() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_115_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_115(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.f_115_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_115() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x01000000u;
  return _impl_.f_115_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_115() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_115)
  if ((_impl_._has_bits_[0] & 0x01000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x01000000u;
  auto* released = _impl_.f_115_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_115_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_115(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.f_115_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_115_.IsDefault()) {
          _impl_.f_115_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_115)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E53 f_116 = 179;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_116() const {
  bool value = (_impl_._has_bits_[3] & 0x20000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_116() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_116_ = 0;
  _impl_._has_bits_[3] &= ~0x20000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_116() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_116)
  return _internal_f_116();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_116(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 value) {
  _internal_set_f_116(value);
  _impl_._has_bits_[3] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_116)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_116() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53>(_impl_.f_116_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_116(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_IsValid(value));
  _impl_.f_116_ = value;
}

// optional int64 f_117 = 180;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_117() const {
  bool value = (_impl_._has_bits_[3] & 0x40000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_117_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x40000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_117() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_117)
  return _internal_f_117();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_117(::int64_t value) {
  _internal_set_f_117(value);
  _impl_._has_bits_[3] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_117)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_117() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_117_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_117(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_117_ = value;
}

// optional int32 f_118 = 182;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_118() const {
  bool value = (_impl_._has_bits_[4] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_118() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_118_ = 0;
  _impl_._has_bits_[4] &= ~0x00000001u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_118() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_118)
  return _internal_f_118();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_118(::int32_t value) {
  _internal_set_f_118(value);
  _impl_._has_bits_[4] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_118)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_118() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_118_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_118(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_118_ = value;
}

// optional int64 f_119 = 183;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_119() const {
  bool value = (_impl_._has_bits_[3] & 0x80000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_119() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_119_ = ::int64_t{0};
  _impl_._has_bits_[3] &= ~0x80000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_119() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_119)
  return _internal_f_119();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_119(::int64_t value) {
  _internal_set_f_119(value);
  _impl_._has_bits_[3] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_119)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_119() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_119_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_119(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_119_ = value;
}

// optional bytes f_120 = 186;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_120() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_120() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_120_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_120() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_120)
  return _internal_f_120();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_120(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.f_120_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_120)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_120() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_120();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_120)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_120() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_120_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_120(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.f_120_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_120() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x02000000u;
  return _impl_.f_120_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_120() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_120)
  if ((_impl_._has_bits_[0] & 0x02000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x02000000u;
  auto* released = _impl_.f_120_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_120_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_120(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.f_120_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_120_.IsDefault()) {
          _impl_.f_120_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_120)
}

// optional int64 f_121 = 189;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_121() const {
  bool value = (_impl_._has_bits_[4] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_121() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_121_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000004u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_121() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_121)
  return _internal_f_121();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_121(::int64_t value) {
  _internal_set_f_121(value);
  _impl_._has_bits_[4] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_121)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_121() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_121_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_121(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_121_ = value;
}

// optional int64 f_122 = 190;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_122() const {
  bool value = (_impl_._has_bits_[4] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_122() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_122_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000008u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_122() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_122)
  return _internal_f_122();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_122(::int64_t value) {
  _internal_set_f_122(value);
  _impl_._has_bits_[4] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_122)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_122() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_122_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_122(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_122_ = value;
}

// optional string f_123 = 191;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_123() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_123() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_123_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_123() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_123)
  return _internal_f_123();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_123(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.f_123_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_123)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_123() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_123();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_123)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_123() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_123_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_123(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.f_123_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_123() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x04000000u;
  return _impl_.f_123_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_123() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_123)
  if ((_impl_._has_bits_[0] & 0x04000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x04000000u;
  auto* released = _impl_.f_123_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_123_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_123(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.f_123_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_123_.IsDefault()) {
          _impl_.f_123_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_123)
}

// optional float f_124 = 193;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_124() const {
  bool value = (_impl_._has_bits_[4] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_124() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_124_ = 0;
  _impl_._has_bits_[4] &= ~0x00000002u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_124() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_124)
  return _internal_f_124();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_124(float value) {
  _internal_set_f_124(value);
  _impl_._has_bits_[4] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_124)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_124() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_124_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_124(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_124_ = value;
}

// optional sint32 f_125 = 194;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_125() const {
  bool value = (_impl_._has_bits_[4] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_125() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_125_ = 0;
  _impl_._has_bits_[4] &= ~0x00000010u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_125() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_125)
  return _internal_f_125();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_125(::int32_t value) {
  _internal_set_f_125(value);
  _impl_._has_bits_[4] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_125)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_125() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_125_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_125(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_125_ = value;
}

// optional int32 f_126 = 195;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_126() const {
  bool value = (_impl_._has_bits_[4] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_126() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_126_ = 0;
  _impl_._has_bits_[4] &= ~0x00000020u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_126() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_126)
  return _internal_f_126();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_126(::int32_t value) {
  _internal_set_f_126(value);
  _impl_._has_bits_[4] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_126)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_126() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_126_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_126(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_126_ = value;
}

// optional int64 f_127 = 196;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_127() const {
  bool value = (_impl_._has_bits_[4] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_127() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_127_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000040u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_127() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_127)
  return _internal_f_127();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_127(::int64_t value) {
  _internal_set_f_127(value);
  _impl_._has_bits_[4] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_127)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_127() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_127_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_127(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_127_ = value;
}

// optional string f_128 = 197;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_128() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_128() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_128_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_128() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_128)
  return _internal_f_128();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_128(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.f_128_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_128)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_128() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_128();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_128)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_128() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_128_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_128(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.f_128_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_128() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x08000000u;
  return _impl_.f_128_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_128() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_128)
  if ((_impl_._has_bits_[0] & 0x08000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x08000000u;
  auto* released = _impl_.f_128_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_128_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_128(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.f_128_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_128_.IsDefault()) {
          _impl_.f_128_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_128)
}

// optional string f_129 = 198;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_129() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_129() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_129_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_129() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_129)
  return _internal_f_129();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_129(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.f_129_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_129)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_129() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_129();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_129)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_129() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_129_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_129(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.f_129_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_129() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x10000000u;
  return _impl_.f_129_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_129() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_129)
  if ((_impl_._has_bits_[0] & 0x10000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x10000000u;
  auto* released = _impl_.f_129_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_129_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_129(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.f_129_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_129_.IsDefault()) {
          _impl_.f_129_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_129)
}

// optional int64 f_130 = 199;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_130() const {
  bool value = (_impl_._has_bits_[4] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_130() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_130_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000080u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_130() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_130)
  return _internal_f_130();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_130(::int64_t value) {
  _internal_set_f_130(value);
  _impl_._has_bits_[4] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_130)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_130() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_130_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_130(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_130_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E54 f_131 = 200;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_131() const {
  bool value = (_impl_._has_bits_[4] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_131() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_131_ = 0;
  _impl_._has_bits_[4] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_131() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_131)
  return _internal_f_131();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_131(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 value) {
  _internal_set_f_131(value);
  _impl_._has_bits_[4] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_131)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_131() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54>(_impl_.f_131_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_131(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_IsValid(value));
  _impl_.f_131_ = value;
}

// optional int64 f_132 = 202;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_132() const {
  bool value = (_impl_._has_bits_[4] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_132() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_132_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000100u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_132() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_132)
  return _internal_f_132();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_132(::int64_t value) {
  _internal_set_f_132(value);
  _impl_._has_bits_[4] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_132)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_132() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_132_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_132(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_132_ = value;
}

// optional int64 f_133 = 203;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_133() const {
  bool value = (_impl_._has_bits_[4] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_133() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_133_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00000800u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_133() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_133)
  return _internal_f_133();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_133(::int64_t value) {
  _internal_set_f_133(value);
  _impl_._has_bits_[4] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_133)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_133() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_133_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_133(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_133_ = value;
}

// optional float f_134 = 205;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_134() const {
  bool value = (_impl_._has_bits_[4] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_134() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_134_ = 0;
  _impl_._has_bits_[4] &= ~0x00000400u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_134() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_134)
  return _internal_f_134();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_134(float value) {
  _internal_set_f_134(value);
  _impl_._has_bits_[4] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_134)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_134() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_134_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_134(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_134_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E55 f_135 = 208;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_135() const {
  bool value = (_impl_._has_bits_[4] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_135() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_135_ = 0;
  _impl_._has_bits_[4] &= ~0x00001000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_135() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_135)
  return _internal_f_135();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_135(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 value) {
  _internal_set_f_135(value);
  _impl_._has_bits_[4] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_135)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_135() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55>(_impl_.f_135_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_135(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_IsValid(value));
  _impl_.f_135_ = value;
}

// optional string f_136 = 210;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_136() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_136() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_136_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_136() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_136)
  return _internal_f_136();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_136(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.f_136_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_136)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_136() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_136();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_136)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_136() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_136_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_136(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.f_136_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_136() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x20000000u;
  return _impl_.f_136_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_136() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_136)
  if ((_impl_._has_bits_[0] & 0x20000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x20000000u;
  auto* released = _impl_.f_136_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_136_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_136(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.f_136_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_136_.IsDefault()) {
          _impl_.f_136_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_136)
}

// optional int64 f_137 = 211;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_137() const {
  bool value = (_impl_._has_bits_[4] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_137() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_137_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00004000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_137() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_137)
  return _internal_f_137();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_137(::int64_t value) {
  _internal_set_f_137(value);
  _impl_._has_bits_[4] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_137)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_137() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_137_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_137(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_137_ = value;
}

// optional int32 f_138 = 212;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_138() const {
  bool value = (_impl_._has_bits_[4] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_138() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_138_ = 0;
  _impl_._has_bits_[4] &= ~0x00002000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_138() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_138)
  return _internal_f_138();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_138(::int32_t value) {
  _internal_set_f_138(value);
  _impl_._has_bits_[4] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_138)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_138() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_138_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_138(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_138_ = value;
}

// optional int64 f_139 = 213;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_139() const {
  bool value = (_impl_._has_bits_[4] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_139() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_139_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00008000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_139() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_139)
  return _internal_f_139();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_139(::int64_t value) {
  _internal_set_f_139(value);
  _impl_._has_bits_[4] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_139)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_139() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_139_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_139(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_139_ = value;
}

// optional uint64 f_140 = 214;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_140() const {
  bool value = (_impl_._has_bits_[4] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_140() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_140_ = ::uint64_t{0u};
  _impl_._has_bits_[4] &= ~0x00010000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_140() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_140)
  return _internal_f_140();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_140(::uint64_t value) {
  _internal_set_f_140(value);
  _impl_._has_bits_[4] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_140)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_140() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_140_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_140(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_140_ = value;
}

// optional int64 f_141 = 215;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_141() const {
  bool value = (_impl_._has_bits_[4] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_141() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_141_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00020000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_141() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_141)
  return _internal_f_141();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_141(::int64_t value) {
  _internal_set_f_141(value);
  _impl_._has_bits_[4] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_141)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_141() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_141_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_141(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_141_ = value;
}

// optional int64 f_142 = 218;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_142() const {
  bool value = (_impl_._has_bits_[4] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_142() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_142_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00040000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_142() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_142)
  return _internal_f_142();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_142(::int64_t value) {
  _internal_set_f_142(value);
  _impl_._has_bits_[4] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_142)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_142() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_142_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_142(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_142_ = value;
}

// optional bool f_143 = 219;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_143() const {
  bool value = (_impl_._has_bits_[4] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_143() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_143_ = false;
  _impl_._has_bits_[4] &= ~0x01000000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_143() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_143)
  return _internal_f_143();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_143(bool value) {
  _internal_set_f_143(value);
  _impl_._has_bits_[4] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_143)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_143() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_143_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_143(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_143_ = value;
}

// optional int32 f_144 = 221;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_144() const {
  bool value = (_impl_._has_bits_[4] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_144() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_144_ = 0;
  _impl_._has_bits_[4] &= ~0x00080000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_144() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_144)
  return _internal_f_144();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_144(::int32_t value) {
  _internal_set_f_144(value);
  _impl_._has_bits_[4] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_144)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_144() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_144_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_144(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_144_ = value;
}

// optional float f_145 = 225;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_145() const {
  bool value = (_impl_._has_bits_[4] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_145() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_145_ = 0;
  _impl_._has_bits_[4] &= ~0x00100000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_145() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_145)
  return _internal_f_145();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_145(float value) {
  _internal_set_f_145(value);
  _impl_._has_bits_[4] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_145)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_145() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_145_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_145(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_145_ = value;
}

// optional bool f_146 = 226;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_146() const {
  bool value = (_impl_._has_bits_[4] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_146() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_146_ = false;
  _impl_._has_bits_[4] &= ~0x02000000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_146() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_146)
  return _internal_f_146();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_146(bool value) {
  _internal_set_f_146(value);
  _impl_._has_bits_[4] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_146)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_146() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_146_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_146(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_146_ = value;
}

// optional double f_147 = 227;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_147() const {
  bool value = (_impl_._has_bits_[4] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_147() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_147_ = 0;
  _impl_._has_bits_[4] &= ~0x00200000u;
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_147() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_147)
  return _internal_f_147();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_147(double value) {
  _internal_set_f_147(value);
  _impl_._has_bits_[4] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_147)
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_147() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_147_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_147(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_147_ = value;
}

// optional int64 f_148 = 229;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_148() const {
  bool value = (_impl_._has_bits_[4] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_148() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_148_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x00400000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_148() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_148)
  return _internal_f_148();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_148(::int64_t value) {
  _internal_set_f_148(value);
  _impl_._has_bits_[4] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_148)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_148() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_148_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_148(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_148_ = value;
}

// optional int32 f_149 = 230;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_149() const {
  bool value = (_impl_._has_bits_[4] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_149() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_149_ = 0;
  _impl_._has_bits_[4] &= ~0x00800000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_149() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_149)
  return _internal_f_149();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_149(::int32_t value) {
  _internal_set_f_149(value);
  _impl_._has_bits_[4] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_149)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_149() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_149_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_149(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_149_ = value;
}

// optional string f_150 = 231;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_150() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_150() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_150_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_150() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_150)
  return _internal_f_150();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_150(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.f_150_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_150)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_150() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_150();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_150)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_150() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_150_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_150(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.f_150_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_150() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x40000000u;
  return _impl_.f_150_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_150() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_150)
  if ((_impl_._has_bits_[0] & 0x40000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x40000000u;
  auto* released = _impl_.f_150_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_150_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_150(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.f_150_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_150_.IsDefault()) {
          _impl_.f_150_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_150)
}

// optional int32 f_151 = 234;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_151() const {
  bool value = (_impl_._has_bits_[4] & 0x10000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_151() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_151_ = 0;
  _impl_._has_bits_[4] &= ~0x10000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_151() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_151)
  return _internal_f_151();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_151(::int32_t value) {
  _internal_set_f_151(value);
  _impl_._has_bits_[4] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_151)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_151() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_151_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_151(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_151_ = value;
}

// optional bool f_152 = 235;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_152() const {
  bool value = (_impl_._has_bits_[4] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_152() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_152_ = false;
  _impl_._has_bits_[4] &= ~0x04000000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_152() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_152)
  return _internal_f_152();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_152(bool value) {
  _internal_set_f_152(value);
  _impl_._has_bits_[4] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_152)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_152() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_152_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_152(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_152_ = value;
}

// optional string f_153 = 236;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_153() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_153() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_153_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_153() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_153)
  return _internal_f_153();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_153(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.f_153_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_153)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_153() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_153();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_153)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_153() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_153_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_153(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.f_153_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_153() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x80000000u;
  return _impl_.f_153_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_153() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_153)
  if ((_impl_._has_bits_[0] & 0x80000000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x80000000u;
  auto* released = _impl_.f_153_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_153_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_153(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.f_153_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_153_.IsDefault()) {
          _impl_.f_153_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_153)
}

// optional fixed32 f_154 = 237;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_154() const {
  bool value = (_impl_._has_bits_[4] & 0x20000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_154() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_154_ = 0u;
  _impl_._has_bits_[4] &= ~0x20000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_154() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_154)
  return _internal_f_154();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_154(::uint32_t value) {
  _internal_set_f_154(value);
  _impl_._has_bits_[4] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_154)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_154() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_154_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_154(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_154_ = value;
}

// optional double f_155 = 238;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_155() const {
  bool value = (_impl_._has_bits_[4] & 0x40000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_155() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_155_ = 0;
  _impl_._has_bits_[4] &= ~0x40000000u;
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_155() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_155)
  return _internal_f_155();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_155(double value) {
  _internal_set_f_155(value);
  _impl_._has_bits_[4] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_155)
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_155() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_155_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_155(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_155_ = value;
}

// optional int64 f_156 = 239;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_156() const {
  bool value = (_impl_._has_bits_[4] & 0x80000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_156() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_156_ = ::int64_t{0};
  _impl_._has_bits_[4] &= ~0x80000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_156() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_156)
  return _internal_f_156();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_156(::int64_t value) {
  _internal_set_f_156(value);
  _impl_._has_bits_[4] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_156)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_156() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_156_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_156(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_156_ = value;
}

// optional bytes f_157 = 240;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_157() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_157() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_157_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_157() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_157)
  return _internal_f_157();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_157(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.f_157_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_157)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_157() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_157();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_157)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_157() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_157_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_157(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.f_157_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_157() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000001u;
  return _impl_.f_157_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_157() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_157)
  if ((_impl_._has_bits_[1] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000001u;
  auto* released = _impl_.f_157_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_157_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_157(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  _impl_.f_157_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_157_.IsDefault()) {
          _impl_.f_157_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_157)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E56 f_158 = 241;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_158() const {
  bool value = (_impl_._has_bits_[5] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_158() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_158_ = 0;
  _impl_._has_bits_[5] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_158() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_158)
  return _internal_f_158();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_158(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 value) {
  _internal_set_f_158(value);
  _impl_._has_bits_[5] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_158)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_158() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56>(_impl_.f_158_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_158(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_IsValid(value));
  _impl_.f_158_ = value;
}

// optional int64 f_159 = 244;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_159() const {
  bool value = (_impl_._has_bits_[5] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_159() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_159_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00000004u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_159() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_159)
  return _internal_f_159();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_159(::int64_t value) {
  _internal_set_f_159(value);
  _impl_._has_bits_[5] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_159)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_159() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_159_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_159(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_159_ = value;
}

// optional int32 f_160 = 246;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_160() const {
  bool value = (_impl_._has_bits_[5] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_160() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_160_ = 0;
  _impl_._has_bits_[5] &= ~0x00000002u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_160() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_160)
  return _internal_f_160();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_160(::int32_t value) {
  _internal_set_f_160(value);
  _impl_._has_bits_[5] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_160)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_160() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_160_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_160(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_160_ = value;
}

// optional bool f_161 = 247;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_161() const {
  bool value = (_impl_._has_bits_[4] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_161() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_161_ = false;
  _impl_._has_bits_[4] &= ~0x08000000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_161() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_161)
  return _internal_f_161();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_161(bool value) {
  _internal_set_f_161(value);
  _impl_._has_bits_[4] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_161)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_161() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_161_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_161(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_161_ = value;
}

// optional string f_162 = 248;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_162() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_162() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_162_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_162() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_162)
  return _internal_f_162();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_162(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.f_162_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_162)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_162() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_162();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_162)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_162() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_162_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_162(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.f_162_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_162() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000002u;
  return _impl_.f_162_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_162() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_162)
  if ((_impl_._has_bits_[1] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000002u;
  auto* released = _impl_.f_162_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_162_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_162(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  _impl_.f_162_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_162_.IsDefault()) {
          _impl_.f_162_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_162)
}

// optional uint32 f_163 = 251;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_163() const {
  bool value = (_impl_._has_bits_[5] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_163() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_163_ = 0u;
  _impl_._has_bits_[5] &= ~0x00000020u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_163() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_163)
  return _internal_f_163();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_163(::uint32_t value) {
  _internal_set_f_163(value);
  _impl_._has_bits_[5] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_163)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_163() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_163_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_163(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_163_ = value;
}

// optional string f_164 = 252;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_164() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_164() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_164_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_164() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_164)
  return _internal_f_164();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_164(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.f_164_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_164)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_164() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_164();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_164)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_164() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_164_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_164(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.f_164_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_164() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000004u;
  return _impl_.f_164_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_164() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_164)
  if ((_impl_._has_bits_[1] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000004u;
  auto* released = _impl_.f_164_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_164_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_164(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  _impl_.f_164_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_164_.IsDefault()) {
          _impl_.f_164_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_164)
}

// optional int64 f_165 = 254;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_165() const {
  bool value = (_impl_._has_bits_[5] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_165() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_165_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00000008u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_165() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_165)
  return _internal_f_165();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_165(::int64_t value) {
  _internal_set_f_165(value);
  _impl_._has_bits_[5] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_165)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_165() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_165_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_165(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_165_ = value;
}

// optional int64 f_166 = 255;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_166() const {
  bool value = (_impl_._has_bits_[5] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_166() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_166_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00000010u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_166() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_166)
  return _internal_f_166();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_166(::int64_t value) {
  _internal_set_f_166(value);
  _impl_._has_bits_[5] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_166)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_166() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_166_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_166(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_166_ = value;
}

// optional int64 f_167 = 257;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_167() const {
  bool value = (_impl_._has_bits_[5] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_167() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_167_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00000080u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_167() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_167)
  return _internal_f_167();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_167(::int64_t value) {
  _internal_set_f_167(value);
  _impl_._has_bits_[5] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_167)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_167() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_167_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_167(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_167_ = value;
}

// optional float f_168 = 259;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_168() const {
  bool value = (_impl_._has_bits_[5] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_168() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_168_ = 0;
  _impl_._has_bits_[5] &= ~0x00000040u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_168() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_168)
  return _internal_f_168();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_168(float value) {
  _internal_set_f_168(value);
  _impl_._has_bits_[5] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_168)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_168() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_168_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_168(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_168_ = value;
}

// optional float f_169 = 260;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_169() const {
  bool value = (_impl_._has_bits_[5] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_169() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_169_ = 0;
  _impl_._has_bits_[5] &= ~0x00000100u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_169() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_169)
  return _internal_f_169();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_169(float value) {
  _internal_set_f_169(value);
  _impl_._has_bits_[5] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_169)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_169() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_169_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_169(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_169_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E57 f_170 = 261;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_170() const {
  bool value = (_impl_._has_bits_[5] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_170() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_170_ = 0;
  _impl_._has_bits_[5] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_170() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_170)
  return _internal_f_170();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_170(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 value) {
  _internal_set_f_170(value);
  _impl_._has_bits_[5] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_170)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_170() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57>(_impl_.f_170_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_170(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_IsValid(value));
  _impl_.f_170_ = value;
}

// optional int64 f_171 = 262;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_171() const {
  bool value = (_impl_._has_bits_[5] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_171() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_171_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00000400u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_171() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_171)
  return _internal_f_171();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_171(::int64_t value) {
  _internal_set_f_171(value);
  _impl_._has_bits_[5] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_171)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_171() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_171_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_171(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_171_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E58 f_172 = 263;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_172() const {
  bool value = (_impl_._has_bits_[5] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_172() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_172_ = 0;
  _impl_._has_bits_[5] &= ~0x00001000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_172() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_172)
  return _internal_f_172();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_172(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 value) {
  _internal_set_f_172(value);
  _impl_._has_bits_[5] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_172)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_172() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58>(_impl_.f_172_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_172(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_IsValid(value));
  _impl_.f_172_ = value;
}

// optional int64 f_173 = 264;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_173() const {
  bool value = (_impl_._has_bits_[5] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_173() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_173_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00000800u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_173() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_173)
  return _internal_f_173();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_173(::int64_t value) {
  _internal_set_f_173(value);
  _impl_._has_bits_[5] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_173)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_173() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_173_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_173(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_173_ = value;
}

// repeated string f_174 = 265;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_174_size() const {
  return _internal_f_174().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_174_size() const {
  return _internal_f_174_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_174() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_174_.Clear();
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_174()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_174()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_174(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
  return _internal_f_174().Get(index);
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_174(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
  return _internal_mutable_f_174()->Mutable(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_174(int index, const std::string& value) {
  _internal_mutable_f_174()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_174(int index, std::string&& value) {
  _internal_mutable_f_174()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_174(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_174()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_174(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_f_174()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_174(int index, absl::string_view value) {
  _internal_mutable_f_174()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_174(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_174()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_174(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_174()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_174(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_174()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_174(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_174()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::add_f_174(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_174()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_174() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
  return _internal_f_174();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_174() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_174)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_174();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_174() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_174_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_174() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_174_;
}

// optional uint32 f_175 = 266;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_175() const {
  bool value = (_impl_._has_bits_[5] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_175() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_175_ = 0u;
  _impl_._has_bits_[5] &= ~0x00002000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_175() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_175)
  return _internal_f_175();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_175(::uint32_t value) {
  _internal_set_f_175(value);
  _impl_._has_bits_[5] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_175)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_175() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_175_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_175(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_175_ = value;
}

// optional int64 f_176 = 268;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_176() const {
  bool value = (_impl_._has_bits_[5] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_176() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_176_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00004000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_176() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_176)
  return _internal_f_176();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_176(::int64_t value) {
  _internal_set_f_176(value);
  _impl_._has_bits_[5] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_176)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_176() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_176_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_176(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_176_ = value;
}

// optional int32 f_177 = 269;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_177() const {
  bool value = (_impl_._has_bits_[5] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_177() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_177_ = 0;
  _impl_._has_bits_[5] &= ~0x00008000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_177() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_177)
  return _internal_f_177();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_177(::int32_t value) {
  _internal_set_f_177(value);
  _impl_._has_bits_[5] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_177)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_177() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_177_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_177(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_177_ = value;
}

// optional int32 f_178 = 270;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_178() const {
  bool value = (_impl_._has_bits_[5] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_178() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_178_ = 0;
  _impl_._has_bits_[5] &= ~0x00010000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_178() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_178)
  return _internal_f_178();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_178(::int32_t value) {
  _internal_set_f_178(value);
  _impl_._has_bits_[5] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_178)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_178() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_178_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_178(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_178_ = value;
}

// optional float f_179 = 271;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_179() const {
  bool value = (_impl_._has_bits_[5] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_179() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_179_ = 0;
  _impl_._has_bits_[5] &= ~0x00020000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_179() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_179)
  return _internal_f_179();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_179(float value) {
  _internal_set_f_179(value);
  _impl_._has_bits_[5] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_179)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_179() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_179_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_179(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_179_ = value;
}

// optional string f_180 = 272;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_180() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_180() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_180_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_180() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_180)
  return _internal_f_180();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_180(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.f_180_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_180)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_180() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_180();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_180)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_180() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_180_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_180(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.f_180_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_180() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000008u;
  return _impl_.f_180_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_180() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_180)
  if ((_impl_._has_bits_[1] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000008u;
  auto* released = _impl_.f_180_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_180_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_180(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  _impl_.f_180_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_180_.IsDefault()) {
          _impl_.f_180_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_180)
}

// optional string f_181 = 273;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_181() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_181() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_181_.ClearToEmpty();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_181() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_181)
  return _internal_f_181();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_181(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.f_181_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_181)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_181() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_181();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_181)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_181() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_181_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_181(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000010u;
  _impl_.f_181_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_181() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[1] |= 0x00000010u;
  return _impl_.f_181_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_181() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_181)
  if ((_impl_._has_bits_[1] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[1] &= ~0x00000010u;
  auto* released = _impl_.f_181_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_181_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_181(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  _impl_.f_181_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_181_.IsDefault()) {
          _impl_.f_181_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_181)
}

// optional int32 f_182 = 275;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_182() const {
  bool value = (_impl_._has_bits_[5] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_182() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_182_ = 0;
  _impl_._has_bits_[5] &= ~0x00040000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_182() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_182)
  return _internal_f_182();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_182(::int32_t value) {
  _internal_set_f_182(value);
  _impl_._has_bits_[5] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_182)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_182() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_182_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_182(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_182_ = value;
}

// optional int64 f_183 = 276;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_183() const {
  bool value = (_impl_._has_bits_[5] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_183() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_183_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00080000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_183() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_183)
  return _internal_f_183();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_183(::int64_t value) {
  _internal_set_f_183(value);
  _impl_._has_bits_[5] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_183)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_183() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_183_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_183(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_183_ = value;
}

// optional int32 f_184 = 277;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_184() const {
  bool value = (_impl_._has_bits_[5] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_184() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_184_ = 0;
  _impl_._has_bits_[5] &= ~0x00200000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_184() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_184)
  return _internal_f_184();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_184(::int32_t value) {
  _internal_set_f_184(value);
  _impl_._has_bits_[5] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_184)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_184() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_184_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_184(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_184_ = value;
}

// optional int64 f_185 = 279;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_185() const {
  bool value = (_impl_._has_bits_[5] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_185() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_185_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00100000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_185() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_185)
  return _internal_f_185();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_185(::int64_t value) {
  _internal_set_f_185(value);
  _impl_._has_bits_[5] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_185)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_185() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_185_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_185(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_185_ = value;
}

// optional bool f_186 = 281;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_186() const {
  bool value = (_impl_._has_bits_[5] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_186() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_186_ = false;
  _impl_._has_bits_[5] &= ~0x00400000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_186() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_186)
  return _internal_f_186();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_186(bool value) {
  _internal_set_f_186(value);
  _impl_._has_bits_[5] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_186)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_186() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_186_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_186(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_186_ = value;
}

// optional int32 f_187 = 282;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_187() const {
  bool value = (_impl_._has_bits_[5] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_187() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_187_ = 0;
  _impl_._has_bits_[5] &= ~0x01000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_187() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_187)
  return _internal_f_187();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_187(::int32_t value) {
  _internal_set_f_187(value);
  _impl_._has_bits_[5] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_187)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_187() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_187_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_187(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_187_ = value;
}

// optional int64 f_188 = 283;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_188() const {
  bool value = (_impl_._has_bits_[5] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_188() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_188_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x00800000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_188() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_188)
  return _internal_f_188();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_188(::int64_t value) {
  _internal_set_f_188(value);
  _impl_._has_bits_[5] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_188)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_188() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_188_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_188(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_188_ = value;
}

// optional fixed32 f_189 = 285;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_189() const {
  bool value = (_impl_._has_bits_[5] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_189() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_189_ = 0u;
  _impl_._has_bits_[5] &= ~0x02000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_189() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_189)
  return _internal_f_189();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_189(::uint32_t value) {
  _internal_set_f_189(value);
  _impl_._has_bits_[5] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_189)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_189() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_189_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_189(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_189_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.E59 f_190 = 286;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_190() const {
  bool value = (_impl_._has_bits_[5] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_190() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_190_ = 0;
  _impl_._has_bits_[5] &= ~0x08000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_190() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_190)
  return _internal_f_190();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_190(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 value) {
  _internal_set_f_190(value);
  _impl_._has_bits_[5] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_190)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_190() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59>(_impl_.f_190_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_190(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_IsValid(value));
  _impl_.f_190_ = value;
}

// optional int64 f_191 = 289;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_191() const {
  bool value = (_impl_._has_bits_[5] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_191() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_191_ = ::int64_t{0};
  _impl_._has_bits_[5] &= ~0x04000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_191() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_191)
  return _internal_f_191();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_f_191(::int64_t value) {
  _internal_set_f_191(value);
  _impl_._has_bits_[5] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_191)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_191() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_191_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_set_f_191(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_191_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.M94 f_289 = 290;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::has_f_289() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_289_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::clear_f_289() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_289_ != nullptr) _impl_.f_289_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_f_289() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* p = _impl_.f_289_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::f_289() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_289)
  return _internal_f_289();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::unsafe_arena_set_allocated_f_289(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_289_);
  }
  _impl_.f_289_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_289)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::release_f_289() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[1] &= ~0x00000020u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* released = _impl_.f_289_;
  _impl_.f_289_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::unsafe_arena_release_f_289() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_289)

  _impl_._has_bits_[1] &= ~0x00000020u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* temp = _impl_.f_289_;
  _impl_.f_289_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::_internal_mutable_f_289() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_289_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94>(GetArena());
    _impl_.f_289_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94*>(p);
  }
  return _impl_.f_289_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::mutable_f_289() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[1] |= 0x00000020u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* _msg = _internal_mutable_f_289();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_289)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93::set_allocated_f_289(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_289_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }

  _impl_.f_289_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_M94*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93.f_289)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.M93 f_1 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.M92 f_1 = 2;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90

// optional float f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.f_0)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.M91 f_1 = 2;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88

// optional int64 f_0 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M89 f_2 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_2)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_2)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M89*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_2)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.M90 f_4 = 5;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_4)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_4)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88::set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88.f_4)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83

// repeated int64 f_0 = 3 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_0)
  return _internal_f_0().Get(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::set_f_0(int index, ::int64_t value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_0)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::add_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_0)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.M88 f_3 = 4;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M84.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M84.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87

// optional fixed64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87.f_0)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional uint32 f_1 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::set_f_1(::uint32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87.f_1)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87::_internal_set_f_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.M87 f_1 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_M87*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.E30 f_1 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30>(_impl_.f_1_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_2)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M83 f_3 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_3)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_3)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_3)
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M84 f_4 = 8;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>&
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M84>*
Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.M86 f_8 = 9;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_8)
  return _internal_f_8();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_8)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_8)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_8)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81::set_allocated_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M86*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81.f_8)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82

// optional int64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_1)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_1)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_1)
}

// optional fixed64 f_2 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_2(::uint64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_2)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_2(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional bool f_3 = 7;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_3)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 9;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_4)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.E31 f_5 = 10;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_5)
  return _internal_f_5();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_5)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31>(_impl_.f_5_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_IsValid(value));
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 11;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_6)
  return _internal_f_6();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_6)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.E32 f_7 = 12;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_7)
  return _internal_f_7();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_7)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32>(_impl_.f_7_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_IsValid(value));
  _impl_.f_7_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.E33 f_8 = 13;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_8)
  return _internal_f_8();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_8)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33>(_impl_.f_8_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_8(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_IsValid(value));
  _impl_.f_8_ = value;
}

// optional string f_9 = 15;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_9)
  return _internal_f_9();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_9(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_9_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_9)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_9)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_9(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_9_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_9_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_9)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_9_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_9_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_allocated_f_9(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_9_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_9_.IsDefault()) {
          _impl_.f_9_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_9)
}

// optional bool f_10 = 17;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_10)
  return _internal_f_10();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_10(bool value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_10)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_10(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional string f_11 = 18;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_11)
  return _internal_f_11();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_11(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_11_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_11)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_11)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_11(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_11_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_11_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_11)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_11_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_11_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_allocated_f_11(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_11_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_11_.IsDefault()) {
          _impl_.f_11_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_11)
}

// optional int64 f_12 = 19;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_12)
  return _internal_f_12();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_12(::int64_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_12)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_12(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional float f_13 = 20;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_13)
  return _internal_f_13();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_13(float value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_13)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_13(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional int32 f_14 = 23;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_14)
  return _internal_f_14();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_14(::int32_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_14)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_14(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional bytes f_15 = 25;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_15() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_15)
  return _internal_f_15();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_15(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_15_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_15)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::mutable_f_15() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_15();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_15)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_15(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_15_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_15_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_15)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_15_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_15_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_allocated_f_15(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_15_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_15_.IsDefault()) {
          _impl_.f_15_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_15)
}

// optional string f_16 = 27;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_16)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_16)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_16)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_16)
}

// optional int64 f_17 = 29;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_17() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_17)
  return _internal_f_17();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_17(::int64_t value) {
  _internal_set_f_17(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_17)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_17(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_ = value;
}

// optional int64 f_18 = 30;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_18() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_18)
  return _internal_f_18();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_18(::int64_t value) {
  _internal_set_f_18(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_18)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_18(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_ = value;
}

// optional int64 f_19 = 31;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_19() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_19)
  return _internal_f_19();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_19(::int64_t value) {
  _internal_set_f_19(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_19)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_19(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_ = value;
}

// optional bool f_20 = 32;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_20)
  return _internal_f_20();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_20(bool value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_20)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_20(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional int32 f_21 = 33;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_21)
  return _internal_f_21();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_21(::int32_t value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_21)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_21(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional string f_22 = 34;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::f_22() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_22)
  return _internal_f_22();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_f_22(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_22_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_22)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::mutable_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_22();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_22)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_set_f_22(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_22_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_22_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_22)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_22_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_22_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82::set_allocated_f_22(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_22_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_22_.IsDefault()) {
          _impl_.f_22_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82.f_22)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M75

// optional bool f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_0)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M81 f_1 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& Message8_M1_M4_M15_M23_M40_M48_M73_M75::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81& Message8_M1_M4_M15_M23_M40_M48_M73_M75::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* Message8_M1_M4_M15_M23_M40_M48_M73_M75::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* Message8_M1_M4_M15_M23_M40_M48_M73_M75::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* Message8_M1_M4_M15_M23_M40_M48_M73_M75::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* Message8_M1_M4_M15_M23_M40_M48_M73_M75::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_1)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.M82 f_3 = 5;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M75::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& Message8_M1_M4_M15_M23_M40_M48_M73_M75::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82& Message8_M1_M4_M15_M23_M40_M48_M73_M75::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_3)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* Message8_M1_M4_M15_M23_M40_M48_M73_M75::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* Message8_M1_M4_M15_M23_M40_M48_M73_M75::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* Message8_M1_M4_M15_M23_M40_M48_M73_M75::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* Message8_M1_M4_M15_M23_M40_M48_M73_M75::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_3)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M75::set_allocated_f_3(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75.f_3)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85.E34 f_0 = 1 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85.f_0)
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34>(_internal_f_0().Get(index));
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::set_f_0(int index, ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 value) {
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_IsValid(value));
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85.f_0)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::add_f_0(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34 value) {
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85.f_0)
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<int>* Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::_internal_f_0()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<int>* Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80

// optional float f_0 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.f_0)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.M85 f_3 = 4;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>* Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85& Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>& Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>&
Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85>*
Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73_M79

// optional bool f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_0() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[1] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_0)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E21 f_1 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21>(_impl_.f_1_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 4;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_2)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional float f_3 = 5;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_3)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 7;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_4)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int32 f_5 = 8;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_5)
  return _internal_f_5();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_5)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E22 f_6 = 9 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_6_size() const {
  return _internal_f_6().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_6_size() const {
  return _internal_f_6_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_6(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_6)
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22>(_internal_f_6().Get(index));
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_6(int index, ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 value) {
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_IsValid(value));
  _internal_mutable_f_6()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_6)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_6(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22 value) {
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_6()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_6)
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_6)
  return _internal_f_6();
}
inline ::google::protobuf::RepeatedField<int>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_6()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_6)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_6();
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_6()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline ::google::protobuf::RepeatedField<int>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_6_;
}

// optional float f_7 = 10;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_7)
  return _internal_f_7();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_7(float value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_7)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_7(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional uint64 f_8 = 11;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_8)
  return _internal_f_8();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_8(::uint64_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_8)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_8(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional int32 f_9 = 13;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_9)
  return _internal_f_9();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_9(::int32_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_9)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_9(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional fixed32 f_10 = 15;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0u;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_10)
  return _internal_f_10();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_10(::uint32_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_10)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_10(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional string f_11 = 16;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_11)
  return _internal_f_11();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_11(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_11_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_11)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_11)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_11(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_11_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_11_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_11)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_11_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_11_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_11(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_11_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_11_.IsDefault()) {
          _impl_.f_11_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_11)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E23 f_12 = 17;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_12)
  return _internal_f_12();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_12(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_12)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23>(_impl_.f_12_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_12(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_IsValid(value));
  _impl_.f_12_ = value;
}

// optional fixed32 f_13 = 19;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = 0u;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_13)
  return _internal_f_13();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_13(::uint32_t value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_13)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_13(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// optional bytes f_14 = 20;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_14() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_14)
  return _internal_f_14();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_14(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_14_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_14)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_14();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_14)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_14(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_14_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_14_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_14)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_14_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_14_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_14(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_14_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_14_.IsDefault()) {
          _impl_.f_14_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_14)
}

// optional bool f_15 = 21;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_15() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = false;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_15)
  return _internal_f_15();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_15(bool value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[1] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_15)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_15_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_15(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = value;
}

// optional int64 f_16 = 23;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_16() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_16)
  return _internal_f_16();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_16(::int64_t value) {
  _internal_set_f_16(value);
  _impl_._has_bits_[0] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_16)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_16(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_ = value;
}

// optional string f_17 = 25;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_17_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_17() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_17)
  return _internal_f_17();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_17(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_17_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_17)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_17() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_17();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_17)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_17_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_17(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_17_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_17_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_17)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_17_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_17_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_17(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_17_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_17_.IsDefault()) {
          _impl_.f_17_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_17)
}

// optional string f_18 = 27;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_18() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_18() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_18)
  return _internal_f_18();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_18(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_18_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_18)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_18() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_18();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_18)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_18(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_18_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_18_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_18)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_18_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_18_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_18(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_18_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_18_.IsDefault()) {
          _impl_.f_18_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_18)
}

// repeated int32 f_19 = 30 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_19_size() const {
  return _internal_f_19().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_19_size() const {
  return _internal_f_19_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_19_.Clear();
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_19(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_19)
  return _internal_f_19().Get(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_19(int index, ::int32_t value) {
  _internal_mutable_f_19()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_19)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_19(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_19()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_19)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_19() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_19)
  return _internal_f_19();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_19()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_19)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_19();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_19_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_19() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_19_;
}

// optional int32 f_20 = 31;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_20() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_20)
  return _internal_f_20();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_20(::int32_t value) {
  _internal_set_f_20(value);
  _impl_._has_bits_[0] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_20)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_20_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_20(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_20_ = value;
}

// optional int32 f_21 = 33;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_21() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_21)
  return _internal_f_21();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_21(::int32_t value) {
  _internal_set_f_21(value);
  _impl_._has_bits_[0] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_21)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_21(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_ = value;
}

// optional fixed32 f_22 = 34;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = 0u;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_22() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_22)
  return _internal_f_22();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_22(::uint32_t value) {
  _internal_set_f_22(value);
  _impl_._has_bits_[0] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_22)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_22(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_ = value;
}

// optional int32 f_23 = 35;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = 0;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_23() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_23)
  return _internal_f_23();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_23(::int32_t value) {
  _internal_set_f_23(value);
  _impl_._has_bits_[0] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_23)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_23(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_ = value;
}

// optional string f_24 = 36;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_24() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_24_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_24() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_24)
  return _internal_f_24();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_24(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_24)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_24() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_24();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_24)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_24() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_24_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_24(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_24_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_24_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_24() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_24)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_24_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_24_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_24(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_24_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_24_.IsDefault()) {
          _impl_.f_24_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_24)
}

// optional int64 f_25 = 39;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_25() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_25() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_25)
  return _internal_f_25();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_25(::int64_t value) {
  _internal_set_f_25(value);
  _impl_._has_bits_[1] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_25)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_25_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_25(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_25_ = value;
}

// optional uint32 f_26 = 41;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_26() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = 0u;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_26() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_26)
  return _internal_f_26();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_26(::uint32_t value) {
  _internal_set_f_26(value);
  _impl_._has_bits_[1] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_26)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_26_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_26(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_26_ = value;
}

// optional int64 f_27 = 42;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_27() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_27() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_27)
  return _internal_f_27();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_27(::int64_t value) {
  _internal_set_f_27(value);
  _impl_._has_bits_[1] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_27)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_27(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E24 f_28 = 44;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_28() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_28() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_28_ = 0;
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_28() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_28)
  return _internal_f_28();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_28(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 value) {
  _internal_set_f_28(value);
  _impl_._has_bits_[1] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_28)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_28() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24>(_impl_.f_28_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_28(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_IsValid(value));
  _impl_.f_28_ = value;
}

// optional int32 f_29 = 46;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_29() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_29() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = 0;
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_29() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_29)
  return _internal_f_29();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_29(::int32_t value) {
  _internal_set_f_29(value);
  _impl_._has_bits_[1] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_29)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_29() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_29_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_29(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_29_ = value;
}

// optional int32 f_30 = 47;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_30() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_30() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = 0;
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_30() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_30)
  return _internal_f_30();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_30(::int32_t value) {
  _internal_set_f_30(value);
  _impl_._has_bits_[1] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_30)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_30() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_30_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_30(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_30_ = value;
}

// optional bytes f_31 = 49;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_31() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_31_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_31() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_31)
  return _internal_f_31();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_31(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_31_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_31)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_31() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_31();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_31)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_31_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_31(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_31_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_31_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_31)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_31_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_31_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_31(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_31_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_31_.IsDefault()) {
          _impl_.f_31_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_31)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E25 f_32 = 51;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_32() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_32_ = 0;
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_32() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_32)
  return _internal_f_32();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_32(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 value) {
  _internal_set_f_32(value);
  _impl_._has_bits_[1] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_32)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25>(_impl_.f_32_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_32(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_IsValid(value));
  _impl_.f_32_ = value;
}

// optional int32 f_33 = 53;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_33() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = 0;
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_33() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_33)
  return _internal_f_33();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_33(::int32_t value) {
  _internal_set_f_33(value);
  _impl_._has_bits_[1] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_33)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_33(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_ = value;
}

// optional string f_34 = 55;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_34() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_34_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_34() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_34)
  return _internal_f_34();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_34(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_34_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_34)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_34() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_34();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_34)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_34_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_34(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.f_34_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.f_34_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_34)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.f_34_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_34_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_34(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.f_34_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_34_.IsDefault()) {
          _impl_.f_34_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_34)
}

// optional float f_35 = 56;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_35() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_35() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_35() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_35)
  return _internal_f_35();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_35(float value) {
  _internal_set_f_35(value);
  _impl_._has_bits_[1] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_35)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_35() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_35_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_35(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_35_ = value;
}

// optional int64 f_36 = 57;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_36() const {
  bool value = (_impl_._has_bits_[1] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_36() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00002000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_36() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_36)
  return _internal_f_36();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_36(::int64_t value) {
  _internal_set_f_36(value);
  _impl_._has_bits_[1] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_36)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_36() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_36_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_36(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_36_ = value;
}

// optional bool f_37 = 60;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_37() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_37() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = false;
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_37() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_37)
  return _internal_f_37();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_37(bool value) {
  _internal_set_f_37(value);
  _impl_._has_bits_[1] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_37)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_37() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_37_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_37(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_37_ = value;
}

// optional int32 f_38 = 62;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_38() const {
  bool value = (_impl_._has_bits_[1] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_38() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = 0;
  _impl_._has_bits_[1] &= ~0x00004000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_38() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_38)
  return _internal_f_38();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_38(::int32_t value) {
  _internal_set_f_38(value);
  _impl_._has_bits_[1] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_38)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_38() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_38_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_38(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_38_ = value;
}

// optional float f_39 = 63;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_39() const {
  bool value = (_impl_._has_bits_[1] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_39() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = 0;
  _impl_._has_bits_[1] &= ~0x00008000u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_39() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_39)
  return _internal_f_39();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_39(float value) {
  _internal_set_f_39(value);
  _impl_._has_bits_[1] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_39)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_39() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_39_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_39(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_39_ = value;
}

// optional int64 f_40 = 64;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_40() const {
  bool value = (_impl_._has_bits_[1] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_40() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00010000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_40() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_40)
  return _internal_f_40();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_40(::int64_t value) {
  _internal_set_f_40(value);
  _impl_._has_bits_[1] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_40)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_40() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_40_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_40(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_40_ = value;
}

// optional int64 f_41 = 65;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_41() const {
  bool value = (_impl_._has_bits_[1] & 0x00020000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_41() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00020000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_41() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_41)
  return _internal_f_41();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_41(::int64_t value) {
  _internal_set_f_41(value);
  _impl_._has_bits_[1] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_41)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_41() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_41_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_41(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_41_ = value;
}

// optional int64 f_42 = 66;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_42() const {
  bool value = (_impl_._has_bits_[1] & 0x00040000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_42() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x00040000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_42() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_42)
  return _internal_f_42();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_42(::int64_t value) {
  _internal_set_f_42(value);
  _impl_._has_bits_[1] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_42)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_42() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_42_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_42(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_42_ = value;
}

// optional string f_43 = 68;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_43() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_43_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_43() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_43)
  return _internal_f_43();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_43(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_43_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_43)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_43() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_43();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_43)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_43() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_43_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_43(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.f_43_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.f_43_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_43() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_43)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.f_43_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_43_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_43(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.f_43_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_43_.IsDefault()) {
          _impl_.f_43_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_43)
}

// optional string f_44 = 69;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_44() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_44_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_44() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_44)
  return _internal_f_44();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_44(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_44_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_44)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_44() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_44();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_44)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_44() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_44_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_44(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.f_44_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.f_44_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_44() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_44)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.f_44_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_44_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_44(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.f_44_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_44_.IsDefault()) {
          _impl_.f_44_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_44)
}

// optional uint64 f_45 = 71;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_45() const {
  bool value = (_impl_._has_bits_[1] & 0x00080000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_45() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = ::uint64_t{0u};
  _impl_._has_bits_[1] &= ~0x00080000u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_45() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_45)
  return _internal_f_45();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_45(::uint64_t value) {
  _internal_set_f_45(value);
  _impl_._has_bits_[1] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_45)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_45() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_45_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_45(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_45_ = value;
}

// optional bytes f_46 = 74;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_46() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_46_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_46() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_46)
  return _internal_f_46();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_46(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_46_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_46)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_46() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_46();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_46)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_46() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_46_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_46(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.f_46_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.f_46_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_46() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_46)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.f_46_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_46_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_46(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.f_46_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_46_.IsDefault()) {
          _impl_.f_46_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_46)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E26 f_47 = 75;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_47() const {
  bool value = (_impl_._has_bits_[1] & 0x00100000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_47() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_47_ = 0;
  _impl_._has_bits_[1] &= ~0x00100000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_47() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_47)
  return _internal_f_47();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_47(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 value) {
  _internal_set_f_47(value);
  _impl_._has_bits_[1] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_47)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_47() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26>(_impl_.f_47_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_47(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_IsValid(value));
  _impl_.f_47_ = value;
}

// optional int32 f_48 = 76;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_48() const {
  bool value = (_impl_._has_bits_[1] & 0x00200000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_48() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = 0;
  _impl_._has_bits_[1] &= ~0x00200000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_48() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_48)
  return _internal_f_48();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_48(::int32_t value) {
  _internal_set_f_48(value);
  _impl_._has_bits_[1] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_48)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_48() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_48_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_48(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_48_ = value;
}

// optional int32 f_49 = 78;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_49() const {
  bool value = (_impl_._has_bits_[1] & 0x00400000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_49() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = 0;
  _impl_._has_bits_[1] &= ~0x00400000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_49() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_49)
  return _internal_f_49();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_49(::int32_t value) {
  _internal_set_f_49(value);
  _impl_._has_bits_[1] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_49)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_49() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_49_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_49(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_49_ = value;
}

// optional double f_50 = 80;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_50() const {
  bool value = (_impl_._has_bits_[1] & 0x01000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_50() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = 0;
  _impl_._has_bits_[1] &= ~0x01000000u;
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_50() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_50)
  return _internal_f_50();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_50(double value) {
  _internal_set_f_50(value);
  _impl_._has_bits_[1] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_50)
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_50() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_50_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_50(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_50_ = value;
}

// optional uint32 f_51 = 81;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_51() const {
  bool value = (_impl_._has_bits_[1] & 0x00800000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_51() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = 0u;
  _impl_._has_bits_[1] &= ~0x00800000u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_51() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_51)
  return _internal_f_51();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_51(::uint32_t value) {
  _internal_set_f_51(value);
  _impl_._has_bits_[1] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_51)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_51() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_51_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_51(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_51_ = value;
}

// optional string f_52 = 83;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_52() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_52_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_52() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_52)
  return _internal_f_52();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_52(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_52_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_52)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_52() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_52();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_52)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_52() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_52_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_52(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.f_52_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.f_52_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_52() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_52)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.f_52_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_52_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_52(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.f_52_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_52_.IsDefault()) {
          _impl_.f_52_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_52)
}

// optional bool f_53 = 84;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_53() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_53() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = false;
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_53() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_53)
  return _internal_f_53();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_53(bool value) {
  _internal_set_f_53(value);
  _impl_._has_bits_[1] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_53)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_53() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_53_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_53(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_53_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E27 f_54 = 85;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_54() const {
  bool value = (_impl_._has_bits_[1] & 0x02000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_54() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_54_ = 0;
  _impl_._has_bits_[1] &= ~0x02000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_54() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_54)
  return _internal_f_54();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_54(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 value) {
  _internal_set_f_54(value);
  _impl_._has_bits_[1] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_54)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_54() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27>(_impl_.f_54_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_54(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_IsValid(value));
  _impl_.f_54_ = value;
}

// optional int32 f_55 = 86;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_55() const {
  bool value = (_impl_._has_bits_[1] & 0x04000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_55() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = 0;
  _impl_._has_bits_[1] &= ~0x04000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_55() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_55)
  return _internal_f_55();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_55(::int32_t value) {
  _internal_set_f_55(value);
  _impl_._has_bits_[1] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_55)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_55() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_55_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_55(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_55_ = value;
}

// repeated sint64 f_56 = 87 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_56_size() const {
  return _internal_f_56().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_56_size() const {
  return _internal_f_56_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_56() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_56_.Clear();
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_56(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_56)
  return _internal_f_56().Get(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_56(int index, ::int64_t value) {
  _internal_mutable_f_56()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_56)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_56(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_56()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_56)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_56() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_56)
  return _internal_f_56();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_56()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_56)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_56();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_56() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_56_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_56() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_56_;
}

// optional bool f_57 = 89;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_57() const {
  bool value = (_impl_._has_bits_[1] & 0x80000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_57() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = false;
  _impl_._has_bits_[1] &= ~0x80000000u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_57() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_57)
  return _internal_f_57();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_57(bool value) {
  _internal_set_f_57(value);
  _impl_._has_bits_[1] |= 0x80000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_57)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_57() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_57_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_57(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_57_ = value;
}

// optional double f_58 = 90;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_58() const {
  bool value = (_impl_._has_bits_[1] & 0x08000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_58() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = 0;
  _impl_._has_bits_[1] &= ~0x08000000u;
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_58() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_58)
  return _internal_f_58();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_58(double value) {
  _internal_set_f_58(value);
  _impl_._has_bits_[1] |= 0x08000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_58)
}
inline double Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_58() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_58_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_58(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_58_ = value;
}

// optional int32 f_59 = 92;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_59() const {
  bool value = (_impl_._has_bits_[1] & 0x20000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_59() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = 0;
  _impl_._has_bits_[1] &= ~0x20000000u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_59() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_59)
  return _internal_f_59();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_59(::int32_t value) {
  _internal_set_f_59(value);
  _impl_._has_bits_[1] |= 0x20000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_59)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_59() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_59_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_59(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_59_ = value;
}

// optional int64 f_60 = 93;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_60() const {
  bool value = (_impl_._has_bits_[1] & 0x10000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_60() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = ::int64_t{0};
  _impl_._has_bits_[1] &= ~0x10000000u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_60() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_60)
  return _internal_f_60();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_60(::int64_t value) {
  _internal_set_f_60(value);
  _impl_._has_bits_[1] |= 0x10000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_60)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_60() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_60_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_60(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_60_ = value;
}

// optional bytes f_61 = 94;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_61() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_61_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_61() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_61)
  return _internal_f_61();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_61(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_61_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_61)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_61() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_61();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_61)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_61() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_61_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_61(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.f_61_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.f_61_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_61() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_61)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.f_61_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_61_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_61(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.f_61_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_61_.IsDefault()) {
          _impl_.f_61_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_61)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E28 f_62 = 95;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_62() const {
  bool value = (_impl_._has_bits_[1] & 0x40000000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_62() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_62_ = 0;
  _impl_._has_bits_[1] &= ~0x40000000u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_62() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_62)
  return _internal_f_62();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_62(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 value) {
  _internal_set_f_62(value);
  _impl_._has_bits_[1] |= 0x40000000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_62)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_62() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28>(_impl_.f_62_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_62(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_IsValid(value));
  _impl_.f_62_ = value;
}

// optional int64 f_63 = 97;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_63() const {
  bool value = (_impl_._has_bits_[2] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_63() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000008u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_63() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_63)
  return _internal_f_63();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_63(::int64_t value) {
  _internal_set_f_63(value);
  _impl_._has_bits_[2] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_63)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_63() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_63_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_63(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_63_ = value;
}

// optional fixed32 f_64 = 98;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_64() const {
  bool value = (_impl_._has_bits_[2] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000004u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_64() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_64)
  return _internal_f_64();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_64(::uint32_t value) {
  _internal_set_f_64(value);
  _impl_._has_bits_[2] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_64)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_64_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_64(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_64_ = value;
}

// optional bool f_65 = 99;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_65() const {
  bool value = (_impl_._has_bits_[2] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_65() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = false;
  _impl_._has_bits_[2] &= ~0x00000001u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_65() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_65)
  return _internal_f_65();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_65(bool value) {
  _internal_set_f_65(value);
  _impl_._has_bits_[2] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_65)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_65() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_65_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_65(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_65_ = value;
}

// optional bool f_66 = 101;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_66() const {
  bool value = (_impl_._has_bits_[2] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_66() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = false;
  _impl_._has_bits_[2] &= ~0x00000002u;
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_66() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_66)
  return _internal_f_66();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_66(bool value) {
  _internal_set_f_66(value);
  _impl_._has_bits_[2] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_66)
}
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_66() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_66_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_66(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_66_ = value;
}

// optional float f_67 = 102;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_67() const {
  bool value = (_impl_._has_bits_[2] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_67() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = 0;
  _impl_._has_bits_[2] &= ~0x00000010u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_67() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_67)
  return _internal_f_67();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_67(float value) {
  _internal_set_f_67(value);
  _impl_._has_bits_[2] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_67)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_67() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_67_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_67(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_67_ = value;
}

// optional int64 f_68 = 104;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_68() const {
  bool value = (_impl_._has_bits_[2] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_68() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = ::int64_t{0};
  _impl_._has_bits_[2] &= ~0x00000040u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_68() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_68)
  return _internal_f_68();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_68(::int64_t value) {
  _internal_set_f_68(value);
  _impl_._has_bits_[2] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_68)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_68() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_68_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_68(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_68_ = value;
}

// optional int32 f_69 = 105;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_69() const {
  bool value = (_impl_._has_bits_[2] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_69() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = 0;
  _impl_._has_bits_[2] &= ~0x00000020u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_69() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_69)
  return _internal_f_69();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_69(::int32_t value) {
  _internal_set_f_69(value);
  _impl_._has_bits_[2] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_69)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_69() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_69_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_69(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_69_ = value;
}

// optional fixed32 f_70 = 107;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_70() const {
  bool value = (_impl_._has_bits_[2] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_70() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = 0u;
  _impl_._has_bits_[2] &= ~0x00000080u;
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_70() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_70)
  return _internal_f_70();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_70(::uint32_t value) {
  _internal_set_f_70(value);
  _impl_._has_bits_[2] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_70)
}
inline ::uint32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_70() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_70_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_70(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_70_ = value;
}

// optional float f_71 = 109;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_71() const {
  bool value = (_impl_._has_bits_[2] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_71() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = 0;
  _impl_._has_bits_[2] &= ~0x00000100u;
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_71() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_71)
  return _internal_f_71();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_71(float value) {
  _internal_set_f_71(value);
  _impl_._has_bits_[2] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_71)
}
inline float Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_71() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_71_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_71(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_71_ = value;
}

// repeated int32 f_72 = 111 [packed = true];
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_72_size() const {
  return _internal_f_72().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_72_size() const {
  return _internal_f_72_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_72() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_72_.Clear();
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_72(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_72)
  return _internal_f_72().Get(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_72(int index, ::int32_t value) {
  _internal_mutable_f_72()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_72)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_72(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_72()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_72)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_72() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_72)
  return _internal_f_72();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_72()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_72)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_72();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_72() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_72_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_72() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_72_;
}

// repeated string f_73 = 112;
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_73_size() const {
  return _internal_f_73().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_73_size() const {
  return _internal_f_73_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_73() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_73_.Clear();
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_73()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_f_73()->Add();
  // @@protoc_insertion_point(field_add_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_73(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
  return _internal_f_73().Get(index);
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_73(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
  return _internal_mutable_f_73()->Mutable(index);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_73(int index, const std::string& value) {
  _internal_mutable_f_73()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_73(int index, std::string&& value) {
  _internal_mutable_f_73()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_73(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_f_73()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_73(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_f_73()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_73(int index, absl::string_view value) {
  _internal_mutable_f_73()->Mutable(index)->assign(
      value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_73(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_73()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_73(std::string&& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_73()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_73(const char* value) {
  ABSL_DCHECK(value != nullptr);
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_73()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_73(const char* value, std::size_t size) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_73()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::add_f_73(absl::string_view value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_73()->Add()->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_add_string_piece:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_73() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
  return _internal_f_73();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_73() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_73)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_73();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_73() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_73_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_73() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_73_;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.E29 f_74 = 113;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_74() const {
  bool value = (_impl_._has_bits_[2] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_74() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_74_ = 0;
  _impl_._has_bits_[2] &= ~0x00000400u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_74() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_74)
  return _internal_f_74();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_74(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 value) {
  _internal_set_f_74(value);
  _impl_._has_bits_[2] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_74)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_74() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29>(_impl_.f_74_);
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_74(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_IsValid(value));
  _impl_.f_74_ = value;
}

// optional string f_75 = 114;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_75() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_75_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_75() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_75)
  return _internal_f_75();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_75(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_75_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_75)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_75() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_75();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_75)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_75() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_75_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_75(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.f_75_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.f_75_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_75() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_75)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.f_75_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_75_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_75(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.f_75_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_75_.IsDefault()) {
          _impl_.f_75_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_75)
}

// optional fixed64 f_76 = 115;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_76() const {
  bool value = (_impl_._has_bits_[2] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_76() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = ::uint64_t{0u};
  _impl_._has_bits_[2] &= ~0x00000200u;
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_76() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_76)
  return _internal_f_76();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_76(::uint64_t value) {
  _internal_set_f_76(value);
  _impl_._has_bits_[2] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_76)
}
inline ::uint64_t Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_76() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_76_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_76(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_76_ = value;
}

// optional string f_77 = 116;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_77() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_77_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_77() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_77)
  return _internal_f_77();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_77(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_77_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_77)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_77() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_77();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_77)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_77() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_77_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_77(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.f_77_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.f_77_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_77() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_77)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.f_77_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_77_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_77(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.f_77_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_77_.IsDefault()) {
          _impl_.f_77_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_77)
}

// optional string f_78 = 117;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_78() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_78_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_78() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_78)
  return _internal_f_78();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_f_78(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_78_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_78)
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_78() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_78();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_78)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_78() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_78_.Get();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_set_f_78(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.f_78_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.f_78_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_78() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_78)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.f_78_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_78_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_78(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.f_78_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_78_.IsDefault()) {
          _impl_.f_78_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_78)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.M80 f_117 = 118;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73_M79::has_f_117() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_117_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::clear_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_117_ != nullptr) _impl_.f_117_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_f_117() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* p = _impl_.f_117_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80& Message8_M1_M4_M15_M23_M40_M48_M73_M79::f_117() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_117)
  return _internal_f_117();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::unsafe_arena_set_allocated_f_117(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_117_);
  }
  _impl_.f_117_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_117)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* Message8_M1_M4_M15_M23_M40_M48_M73_M79::release_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* released = _impl_.f_117_;
  _impl_.f_117_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* Message8_M1_M4_M15_M23_M40_M48_M73_M79::unsafe_arena_release_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_117)

  _impl_._has_bits_[0] &= ~0x00008000u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* temp = _impl_.f_117_;
  _impl_.f_117_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* Message8_M1_M4_M15_M23_M40_M48_M73_M79::_internal_mutable_f_117() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_117_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80>(GetArena());
    _impl_.f_117_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80*>(p);
  }
  return _impl_.f_117_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* Message8_M1_M4_M15_M23_M40_M48_M73_M79::mutable_f_117() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00008000u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* _msg = _internal_mutable_f_117();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_117)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73_M79::set_allocated_f_117(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_117_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }

  _impl_.f_117_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79.f_117)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48_M73

// optional int64 f_0 = 3;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M23_M40_M48_M73::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M75 f_3 = 4;
inline int Message8_M1_M4_M15_M23_M40_M48_M73::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message8_M1_M4_M15_M23_M40_M48_M73::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75* Message8_M1_M4_M15_M23_M40_M48_M73::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>* Message8_M1_M4_M15_M23_M40_M48_M73::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75& Message8_M1_M4_M15_M23_M40_M48_M73::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75* Message8_M1_M4_M15_M23_M40_M48_M73::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>& Message8_M1_M4_M15_M23_M40_M48_M73::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>&
Message8_M1_M4_M15_M23_M40_M48_M73::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75>*
Message8_M1_M4_M15_M23_M40_M48_M73::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.M79 f_4 = 6;
inline bool Message8_M1_M4_M15_M23_M40_M48_M73::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79& Message8_M1_M4_M15_M23_M40_M48_M73::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_M79_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79& Message8_M1_M4_M15_M23_M40_M48_M73::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_4)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* Message8_M1_M4_M15_M23_M40_M48_M73::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* Message8_M1_M4_M15_M23_M40_M48_M73::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_4)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* Message8_M1_M4_M15_M23_M40_M48_M73::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* Message8_M1_M4_M15_M23_M40_M48_M73::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_4)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48_M73::set_allocated_f_4(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73.f_4)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40_M48

// optional int32 f_0 = 1;
inline bool Message8_M1_M4_M15_M23_M40_M48::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40_M48::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.f_0)
}
inline ::int32_t Message8_M1_M4_M15_M23_M40_M48::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23_M40_M48::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.M73 f_1 = 2;
inline bool Message8_M1_M4_M15_M23_M40_M48::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40_M48::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73& Message8_M1_M4_M15_M23_M40_M48::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_M73_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73& Message8_M1_M4_M15_M23_M40_M48::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23_M40_M48::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* Message8_M1_M4_M15_M23_M40_M48::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* Message8_M1_M4_M15_M23_M40_M48::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* Message8_M1_M4_M15_M23_M40_M48::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* Message8_M1_M4_M15_M23_M40_M48::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40_M48::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23_M40

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.E9 f_0 = 2;
inline bool Message8_M1_M4_M15_M23_M40::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23_M40::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 Message8_M1_M4_M15_M23_M40::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23_M40::set_f_0(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.M40.f_0)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 Message8_M1_M4_M15_M23_M40::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9>(_impl_.f_0_);
}
inline void Message8_M1_M4_M15_M23_M40::_internal_set_f_0(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40.M48 f_2 = 3;
inline bool Message8_M1_M4_M15_M23_M40::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23_M40::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48& Message8_M1_M4_M15_M23_M40::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_M48_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48& Message8_M1_M4_M15_M23_M40::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.M40.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23_M40::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.f_2)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* Message8_M1_M4_M15_M23_M40::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* Message8_M1_M4_M15_M23_M40::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.M40.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* Message8_M1_M4_M15_M23_M40::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* Message8_M1_M4_M15_M23_M40::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.M40.f_2)
  return _msg;
}
inline void Message8_M1_M4_M15_M23_M40::set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.M40.f_2)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M23

// optional uint64 f_0 = 1;
inline bool Message8_M1_M4_M15_M23::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M23::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Message8_M1_M4_M15_M23::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M23::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M23.f_0)
}
inline ::uint64_t Message8_M1_M4_M15_M23::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M23::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M30 f_1 = 2;
inline bool Message8_M1_M4_M15_M23::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M30& Message8_M1_M4_M15_M23::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M30&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M30_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M30& Message8_M1_M4_M15_M23::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15_M23::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M30* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M30*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* Message8_M1_M4_M15_M23::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* Message8_M1_M4_M15_M23::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* Message8_M1_M4_M15_M23::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M30>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M30*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* Message8_M1_M4_M15_M23::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M30* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.f_1)
  return _msg;
}
inline void Message8_M1_M4_M15_M23::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15_M23_M30* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M30*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_1)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M31 f_2 = 5;
inline bool Message8_M1_M4_M15_M23::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M31& Message8_M1_M4_M15_M23::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M31&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M31_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M31& Message8_M1_M4_M15_M23::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15_M23::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M31* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M31*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_2)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* Message8_M1_M4_M15_M23::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* Message8_M1_M4_M15_M23::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* Message8_M1_M4_M15_M23::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M31>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M31*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* Message8_M1_M4_M15_M23::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M31* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.f_2)
  return _msg;
}
inline void Message8_M1_M4_M15_M23::set_allocated_f_2(::fleetbench::proto::Message8_M1_M4_M15_M23_M31* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M31*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_2)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M38 f_5 = 7;
inline bool Message8_M1_M4_M15_M23::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M38& Message8_M1_M4_M15_M23::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M38&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M38_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M38& Message8_M1_M4_M15_M23::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.f_5)
  return _internal_f_5();
}
inline void Message8_M1_M4_M15_M23::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M38* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M38*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_5)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* Message8_M1_M4_M15_M23::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* Message8_M1_M4_M15_M23::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.f_5)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* Message8_M1_M4_M15_M23::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M38>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M38*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* Message8_M1_M4_M15_M23::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M38* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.f_5)
  return _msg;
}
inline void Message8_M1_M4_M15_M23::set_allocated_f_5(::fleetbench::proto::Message8_M1_M4_M15_M23_M38* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M38*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_5)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23.M40 f_7 = 8;
inline bool Message8_M1_M4_M15_M23::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15_M23::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40& Message8_M1_M4_M15_M23::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_M40_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23_M40& Message8_M1_M4_M15_M23::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M23.f_7)
  return _internal_f_7();
}
inline void Message8_M1_M4_M15_M23::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_7)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* Message8_M1_M4_M15_M23::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* Message8_M1_M4_M15_M23::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M23.f_7)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* Message8_M1_M4_M15_M23::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23_M40>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* Message8_M1_M4_M15_M23::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23_M40* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M23.f_7)
  return _msg;
}
inline void Message8_M1_M4_M15_M23::set_allocated_f_7(::fleetbench::proto::Message8_M1_M4_M15_M23_M40* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23_M40*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M23.f_7)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M25

// optional int64 f_0 = 3;
inline bool Message8_M1_M4_M15_M25::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M25::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message8_M1_M4_M15_M25::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M25.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15_M25::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M25.f_0)
}
inline ::int64_t Message8_M1_M4_M15_M25::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15_M25::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15_M28

// optional string f_0 = 1;
inline bool Message8_M1_M4_M15_M28::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15_M28::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15_M28::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.M28.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15_M28::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.M28.f_0)
}
inline std::string* Message8_M1_M4_M15_M28::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.M28.f_0)
  return _s;
}
inline const std::string& Message8_M1_M4_M15_M28::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M4_M15_M28::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15_M28::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15_M28::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.M28.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15_M28::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.M28.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M4_M15

// optional int32 f_0 = 2;
inline bool Message8_M1_M4_M15::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message8_M1_M4_M15::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4_M15::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_0)
}
inline ::int32_t Message8_M1_M4_M15::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4_M15::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 3;
inline bool Message8_M1_M4_M15::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float Message8_M1_M4_M15::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4_M15::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_1)
}
inline float Message8_M1_M4_M15::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1_M4_M15::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional float f_2 = 4;
inline bool Message8_M1_M4_M15::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Message8_M1_M4_M15::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M4_M15::set_f_2(float value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_2)
}
inline float Message8_M1_M4_M15::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M1_M4_M15::_internal_set_f_2(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional float f_3 = 5;
inline bool Message8_M1_M4_M15::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline float Message8_M1_M4_M15::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M4_M15::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_3)
}
inline float Message8_M1_M4_M15::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1_M4_M15::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 7;
inline bool Message8_M1_M4_M15::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M4_M15::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_4)
}
inline std::string* Message8_M1_M4_M15::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.f_4)
  return _s;
}
inline const std::string& Message8_M1_M4_M15::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message8_M1_M4_M15::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.f_4)
}

// optional int64 f_5 = 9;
inline bool Message8_M1_M4_M15::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message8_M1_M4_M15::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_5)
  return _internal_f_5();
}
inline void Message8_M1_M4_M15::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_5)
}
inline ::int64_t Message8_M1_M4_M15::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M1_M4_M15::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional bool f_6 = 10;
inline bool Message8_M1_M4_M15::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Message8_M1_M4_M15::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_6)
  return _internal_f_6();
}
inline void Message8_M1_M4_M15::set_f_6(bool value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_6)
}
inline bool Message8_M1_M4_M15::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message8_M1_M4_M15::_internal_set_f_6(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional float f_7 = 11;
inline bool Message8_M1_M4_M15::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Message8_M1_M4_M15::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_7)
  return _internal_f_7();
}
inline void Message8_M1_M4_M15::set_f_7(float value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_7)
}
inline float Message8_M1_M4_M15::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message8_M1_M4_M15::_internal_set_f_7(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// repeated fixed32 f_8 = 14 [packed = true];
inline int Message8_M1_M4_M15::_internal_f_8_size() const {
  return _internal_f_8().size();
}
inline int Message8_M1_M4_M15::f_8_size() const {
  return _internal_f_8_size();
}
inline void Message8_M1_M4_M15::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_.Clear();
}
inline ::uint32_t Message8_M1_M4_M15::f_8(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_8)
  return _internal_f_8().Get(index);
}
inline void Message8_M1_M4_M15::set_f_8(int index, ::uint32_t value) {
  _internal_mutable_f_8()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_8)
}
inline void Message8_M1_M4_M15::add_f_8(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_8()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.f_8)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Message8_M1_M4_M15::f_8() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.f_8)
  return _internal_f_8();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Message8_M1_M4_M15::mutable_f_8()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.f_8)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_8();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
Message8_M1_M4_M15::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Message8_M1_M4_M15::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_8_;
}

// optional bool f_9 = 15;
inline bool Message8_M1_M4_M15::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Message8_M1_M4_M15::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_9)
  return _internal_f_9();
}
inline void Message8_M1_M4_M15::set_f_9(bool value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_9)
}
inline bool Message8_M1_M4_M15::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message8_M1_M4_M15::_internal_set_f_9(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional string f_10 = 16;
inline bool Message8_M1_M4_M15::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M4_M15::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M4_M15::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_10_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_10)
}
inline std::string* Message8_M1_M4_M15::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.f_10)
  return _s;
}
inline const std::string& Message8_M1_M4_M15::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message8_M1_M4_M15::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message8_M1_M4_M15::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message8_M1_M4_M15::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.f_10)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M4_M15::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.f_10)
}

// optional fixed64 f_11 = 17;
inline bool Message8_M1_M4_M15::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint64_t Message8_M1_M4_M15::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_11)
  return _internal_f_11();
}
inline void Message8_M1_M4_M15::set_f_11(::uint64_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_11)
}
inline ::uint64_t Message8_M1_M4_M15::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message8_M1_M4_M15::_internal_set_f_11(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional float f_12 = 18;
inline bool Message8_M1_M4_M15::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M4_M15::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline float Message8_M1_M4_M15::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_12)
  return _internal_f_12();
}
inline void Message8_M1_M4_M15::set_f_12(float value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.M15.f_12)
}
inline float Message8_M1_M4_M15::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message8_M1_M4_M15::_internal_set_f_12(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M16 f_18 = 19;
inline int Message8_M1_M4_M15::_internal_f_18_size() const {
  return _internal_f_18().size();
}
inline int Message8_M1_M4_M15::f_18_size() const {
  return _internal_f_18_size();
}
inline void Message8_M1_M4_M15::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16* Message8_M1_M4_M15::mutable_f_18(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.f_18)
  return _internal_mutable_f_18()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>* Message8_M1_M4_M15::mutable_f_18()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.f_18)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_18();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M16& Message8_M1_M4_M15::f_18(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_18)
  return _internal_f_18().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M16* Message8_M1_M4_M15::add_f_18() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M16* _add = _internal_mutable_f_18()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.f_18)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>& Message8_M1_M4_M15::f_18() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.f_18)
  return _internal_f_18();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>&
Message8_M1_M4_M15::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M16>*
Message8_M1_M4_M15::_internal_mutable_f_18() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_18_;
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M20 f_19 = 20;
inline bool Message8_M1_M4_M15::has_f_19() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_19_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15::clear_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_19_ != nullptr) _impl_.f_19_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20& Message8_M1_M4_M15::_internal_f_19() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M20* p = _impl_.f_19_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M20&>(::fleetbench::proto::_Message8_M1_M4_M15_M20_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M20& Message8_M1_M4_M15::f_19() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_19)
  return _internal_f_19();
}
inline void Message8_M1_M4_M15::unsafe_arena_set_allocated_f_19(::fleetbench::proto::Message8_M1_M4_M15_M20* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_19_);
  }
  _impl_.f_19_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.f_19)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20* Message8_M1_M4_M15::release_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20* released = _impl_.f_19_;
  _impl_.f_19_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20* Message8_M1_M4_M15::unsafe_arena_release_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.f_19)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20* temp = _impl_.f_19_;
  _impl_.f_19_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20* Message8_M1_M4_M15::_internal_mutable_f_19() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_19_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M20>(GetArena());
    _impl_.f_19_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20*>(p);
  }
  return _impl_.f_19_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M20* Message8_M1_M4_M15::mutable_f_19() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message8_M1_M4_M15_M20* _msg = _internal_mutable_f_19();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.f_19)
  return _msg;
}
inline void Message8_M1_M4_M15::set_allocated_f_19(::fleetbench::proto::Message8_M1_M4_M15_M20* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_19_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_19_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M20*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.f_19)
}

// optional .fleetbench.proto.Message8.M1.M4.M15.M23 f_20 = 21;
inline bool Message8_M1_M4_M15::has_f_20() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_20_ != nullptr);
  return value;
}
inline void Message8_M1_M4_M15::clear_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_20_ != nullptr) _impl_.f_20_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23& Message8_M1_M4_M15::_internal_f_20() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15_M23* p = _impl_.f_20_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15_M23&>(::fleetbench::proto::_Message8_M1_M4_M15_M23_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M23& Message8_M1_M4_M15::f_20() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_20)
  return _internal_f_20();
}
inline void Message8_M1_M4_M15::unsafe_arena_set_allocated_f_20(::fleetbench::proto::Message8_M1_M4_M15_M23* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_20_);
  }
  _impl_.f_20_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.M15.f_20)
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23* Message8_M1_M4_M15::release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23* released = _impl_.f_20_;
  _impl_.f_20_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23* Message8_M1_M4_M15::unsafe_arena_release_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.M15.f_20)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23* temp = _impl_.f_20_;
  _impl_.f_20_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23* Message8_M1_M4_M15::_internal_mutable_f_20() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_20_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15_M23>(GetArena());
    _impl_.f_20_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23*>(p);
  }
  return _impl_.f_20_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M23* Message8_M1_M4_M15::mutable_f_20() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message8_M1_M4_M15_M23* _msg = _internal_mutable_f_20();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.f_20)
  return _msg;
}
inline void Message8_M1_M4_M15::set_allocated_f_20(::fleetbench::proto::Message8_M1_M4_M15_M23* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_20_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_20_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15_M23*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.M15.f_20)
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M25 f_21 = 22;
inline int Message8_M1_M4_M15::_internal_f_21_size() const {
  return _internal_f_21().size();
}
inline int Message8_M1_M4_M15::f_21_size() const {
  return _internal_f_21_size();
}
inline void Message8_M1_M4_M15::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M25* Message8_M1_M4_M15::mutable_f_21(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.f_21)
  return _internal_mutable_f_21()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>* Message8_M1_M4_M15::mutable_f_21()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.f_21)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_21();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M25& Message8_M1_M4_M15::f_21(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_21)
  return _internal_f_21().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M25* Message8_M1_M4_M15::add_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M25* _add = _internal_mutable_f_21()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.f_21)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>& Message8_M1_M4_M15::f_21() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.f_21)
  return _internal_f_21();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>&
Message8_M1_M4_M15::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M25>*
Message8_M1_M4_M15::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_21_;
}

// repeated .fleetbench.proto.Message8.M1.M4.M15.M28 f_22 = 24;
inline int Message8_M1_M4_M15::_internal_f_22_size() const {
  return _internal_f_22().size();
}
inline int Message8_M1_M4_M15::f_22_size() const {
  return _internal_f_22_size();
}
inline void Message8_M1_M4_M15::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_22_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M28* Message8_M1_M4_M15::mutable_f_22(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.M15.f_22)
  return _internal_mutable_f_22()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>* Message8_M1_M4_M15::mutable_f_22()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M4.M15.f_22)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_22();
}
inline const ::fleetbench::proto::Message8_M1_M4_M15_M28& Message8_M1_M4_M15::f_22(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.M15.f_22)
  return _internal_f_22().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4_M15_M28* Message8_M1_M4_M15::add_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4_M15_M28* _add = _internal_mutable_f_22()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M4.M15.f_22)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>& Message8_M1_M4_M15::f_22() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M4.M15.f_22)
  return _internal_f_22();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>&
Message8_M1_M4_M15::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_22_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4_M15_M28>*
Message8_M1_M4_M15::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_22_;
}

// -------------------------------------------------------------------

// Message8_M1_M4

// optional int32 f_0 = 1;
inline bool Message8_M1_M4::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M4::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message8_M1_M4::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M4::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M4.f_0)
}
inline ::int32_t Message8_M1_M4::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M4::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M4.M15 f_1 = 2;
inline bool Message8_M1_M4::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M4::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M4_M15& Message8_M1_M4::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M4_M15* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M4_M15&>(::fleetbench::proto::_Message8_M1_M4_M15_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M4_M15& Message8_M1_M4::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M4.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M4::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M4.f_1)
}
inline ::fleetbench::proto::Message8_M1_M4_M15* Message8_M1_M4::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M4_M15* Message8_M1_M4::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M4.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M4_M15* Message8_M1_M4::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M4_M15>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M4_M15* Message8_M1_M4::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M4_M15* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M4.f_1)
  return _msg;
}
inline void Message8_M1_M4::set_allocated_f_1(::fleetbench::proto::Message8_M1_M4_M15* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M4_M15*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M4.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M9

// optional string f_0 = 1;
inline bool Message8_M1_M9::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M9::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M9::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M9.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M9::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M9.f_0)
}
inline std::string* Message8_M1_M9::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M9.f_0)
  return _s;
}
inline const std::string& Message8_M1_M9::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M9::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M9::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M9::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M9.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M9::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M9.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M18_M42

// optional string f_0 = 1;
inline bool Message8_M1_M11_M14_M18_M42::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M18_M42::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M11_M14_M18_M42::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14_M18_M42::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_0)
}
inline std::string* Message8_M1_M11_M14_M18_M42::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_0)
  return _s;
}
inline const std::string& Message8_M1_M11_M14_M18_M42::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M11_M14_M18_M42::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14_M18_M42::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14_M18_M42::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14_M18_M42::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_0)
}

// optional bytes f_1 = 2;
inline bool Message8_M1_M11_M14_M18_M42::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M18_M42::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M11_M14_M18_M42::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14_M18_M42::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_1)
}
inline std::string* Message8_M1_M11_M14_M18_M42::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_1)
  return _s;
}
inline const std::string& Message8_M1_M11_M14_M18_M42::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message8_M1_M11_M14_M18_M42::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14_M18_M42::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14_M18_M42::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_1)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14_M18_M42::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M18.M42.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M18

// optional bool f_0 = 1;
inline bool Message8_M1_M11_M14_M18::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M18::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message8_M1_M11_M14_M18::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M18.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M11_M14_M18::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M18.f_0)
}
inline bool Message8_M1_M11_M14_M18::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M11_M14_M18::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M11.M14.M18.M42 f_1 = 3;
inline bool Message8_M1_M11_M14_M18::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M1_M11_M14_M18::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M18_M42& Message8_M1_M11_M14_M18::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M11_M14_M18_M42&>(::fleetbench::proto::_Message8_M1_M11_M14_M18_M42_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M18_M42& Message8_M1_M11_M14_M18::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M18.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M11_M14_M18::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M1_M11_M14_M18_M42* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M18_M42*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M18.f_1)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* Message8_M1_M11_M14_M18::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* Message8_M1_M11_M14_M18::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.M18.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* Message8_M1_M11_M14_M18::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M11_M14_M18_M42>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M18_M42*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* Message8_M1_M11_M14_M18::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M11_M14_M18_M42* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M18.f_1)
  return _msg;
}
inline void Message8_M1_M11_M14_M18::set_allocated_f_1(::fleetbench::proto::Message8_M1_M11_M14_M18_M42* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M18_M42*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M18.f_1)
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M19_M37

// optional string f_0 = 2;
inline bool Message8_M1_M11_M14_M19_M37::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M19_M37::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M11_M14_M19_M37::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M19.M37.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14_M19_M37::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M19.M37.f_0)
}
inline std::string* Message8_M1_M11_M14_M19_M37::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M19.M37.f_0)
  return _s;
}
inline const std::string& Message8_M1_M11_M14_M19_M37::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M11_M14_M19_M37::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14_M19_M37::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14_M19_M37::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.M19.M37.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14_M19_M37::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M19.M37.f_0)
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M19

// optional string f_0 = 3;
inline bool Message8_M1_M11_M14_M19::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M19::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M11_M14_M19::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M19.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14_M19::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M19.f_0)
}
inline std::string* Message8_M1_M11_M14_M19::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M19.f_0)
  return _s;
}
inline const std::string& Message8_M1_M11_M14_M19::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M11_M14_M19::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14_M19::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14_M19::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.M19.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14_M19::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M19.f_0)
}

// repeated .fleetbench.proto.Message8.M1.M11.M14.M19.M37 f_3 = 4;
inline int Message8_M1_M11_M14_M19::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message8_M1_M11_M14_M19::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message8_M1_M11_M14_M19::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M19_M37* Message8_M1_M11_M14_M19::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M19.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>* Message8_M1_M11_M14_M19::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M11.M14.M19.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M19_M37& Message8_M1_M11_M14_M19::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M19.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M19_M37* Message8_M1_M11_M14_M19::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M11_M14_M19_M37* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M11.M14.M19.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>& Message8_M1_M11_M14_M19::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M11.M14.M19.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>&
Message8_M1_M11_M14_M19::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19_M37>*
Message8_M1_M11_M14_M19::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M27_M32

// optional .fleetbench.proto.Message8.M1.M11.M14.M27.M32.E8 f_0 = 1;
inline bool Message8_M1_M11_M14_M27_M32::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M27_M32::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 Message8_M1_M11_M14_M27_M32::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M27.M32.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M11_M14_M27_M32::set_f_0(::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M27.M32.f_0)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 Message8_M1_M11_M14_M27_M32::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8>(_impl_.f_0_);
}
inline void Message8_M1_M11_M14_M27_M32::_internal_set_f_0(::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M27_M39_M58

// optional float f_0 = 1;
inline bool Message8_M1_M11_M14_M27_M39_M58::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M27_M39_M58::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message8_M1_M11_M14_M27_M39_M58::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M27.M39.M58.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M11_M14_M27_M39_M58::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M27.M39.M58.f_0)
}
inline float Message8_M1_M11_M14_M27_M39_M58::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M11_M14_M27_M39_M58::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M27_M39

// optional uint64 f_0 = 1;
inline bool Message8_M1_M11_M14_M27_M39::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M27_M39::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message8_M1_M11_M14_M27_M39::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M27.M39.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M11_M14_M27_M39::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M27.M39.f_0)
}
inline ::uint64_t Message8_M1_M11_M14_M27_M39::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M11_M14_M27_M39::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M11.M14.M27.M39.M58 f_1 = 2;
inline int Message8_M1_M11_M14_M27_M39::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M1_M11_M14_M27_M39::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M1_M11_M14_M27_M39::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58* Message8_M1_M11_M14_M27_M39::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M27.M39.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>* Message8_M1_M11_M14_M27_M39::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M11.M14.M27.M39.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58& Message8_M1_M11_M14_M27_M39::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M27.M39.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58* Message8_M1_M11_M14_M27_M39::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M11.M14.M27.M39.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>& Message8_M1_M11_M14_M27_M39::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M11.M14.M27.M39.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>&
Message8_M1_M11_M14_M27_M39::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M27_M39_M58>*
Message8_M1_M11_M14_M27_M39::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14_M27

// optional fixed64 f_0 = 2;
inline bool Message8_M1_M11_M14_M27::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M11_M14_M27::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Message8_M1_M11_M14_M27::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M27.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M11_M14_M27::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.M27.f_0)
}
inline ::uint64_t Message8_M1_M11_M14_M27::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M11_M14_M27::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M1.M11.M14.M27.M32 f_2 = 3;
inline bool Message8_M1_M11_M14_M27::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M1_M11_M14_M27::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M27_M32& Message8_M1_M11_M14_M27::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M11_M14_M27_M32&>(::fleetbench::proto::_Message8_M1_M11_M14_M27_M32_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M27_M32& Message8_M1_M11_M14_M27::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M27.f_2)
  return _internal_f_2();
}
inline void Message8_M1_M11_M14_M27::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M1_M11_M14_M27_M32* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27_M32*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M27.f_2)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* Message8_M1_M11_M14_M27::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* Message8_M1_M11_M14_M27::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.M27.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* Message8_M1_M11_M14_M27::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M11_M14_M27_M32>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27_M32*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* Message8_M1_M11_M14_M27::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M32* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M27.f_2)
  return _msg;
}
inline void Message8_M1_M11_M14_M27::set_allocated_f_2(::fleetbench::proto::Message8_M1_M11_M14_M27_M32* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27_M32*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M27.f_2)
}

// optional .fleetbench.proto.Message8.M1.M11.M14.M27.M39 f_3 = 4;
inline bool Message8_M1_M11_M14_M27::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M1_M11_M14_M27::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39& Message8_M1_M11_M14_M27::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39&>(::fleetbench::proto::_Message8_M1_M11_M14_M27_M39_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M27_M39& Message8_M1_M11_M14_M27::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.M27.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M11_M14_M27::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M1_M11_M14_M27_M39* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27_M39*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M27.f_3)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* Message8_M1_M11_M14_M27::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* Message8_M1_M11_M14_M27::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.M27.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* Message8_M1_M11_M14_M27::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M11_M14_M27_M39>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27_M39*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* Message8_M1_M11_M14_M27::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27_M39* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.M27.f_3)
  return _msg;
}
inline void Message8_M1_M11_M14_M27::set_allocated_f_3(::fleetbench::proto::Message8_M1_M11_M14_M27_M39* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27_M39*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.M27.f_3)
}

// -------------------------------------------------------------------

// Message8_M1_M11_M14

// optional int64 f_0 = 1;
inline bool Message8_M1_M11_M14::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message8_M1_M11_M14::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_0)
  return _internal_f_0();
}
inline void Message8_M1_M11_M14::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_0)
}
inline ::int64_t Message8_M1_M11_M14::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M1_M11_M14::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated int32 f_1 = 2 [packed = true];
inline int Message8_M1_M11_M14::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M1_M11_M14::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M1_M11_M14::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::int32_t Message8_M1_M11_M14::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_1)
  return _internal_f_1().Get(index);
}
inline void Message8_M1_M11_M14::set_f_1(int index, ::int32_t value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_1)
}
inline void Message8_M1_M11_M14::add_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M11.M14.f_1)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message8_M1_M11_M14::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M11.M14.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M11_M14::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M11.M14.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message8_M1_M11_M14::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M1_M11_M14::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional string f_2 = 4;
inline bool Message8_M1_M11_M14::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M11_M14::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_2)
}
inline std::string* Message8_M1_M11_M14::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_2)
  return _s;
}
inline const std::string& Message8_M1_M11_M14::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message8_M1_M11_M14::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_2)
}

// optional bool f_3 = 6;
inline bool Message8_M1_M11_M14::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool Message8_M1_M11_M14::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_3)
  return _internal_f_3();
}
inline void Message8_M1_M11_M14::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_3)
}
inline bool Message8_M1_M11_M14::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1_M11_M14::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 8;
inline bool Message8_M1_M11_M14::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t Message8_M1_M11_M14::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_4)
  return _internal_f_4();
}
inline void Message8_M1_M11_M14::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_4)
}
inline ::int64_t Message8_M1_M11_M14::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M1_M11_M14::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 10;
inline bool Message8_M1_M11_M14::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t Message8_M1_M11_M14::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_5)
  return _internal_f_5();
}
inline void Message8_M1_M11_M14::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_5)
}
inline ::int64_t Message8_M1_M11_M14::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M1_M11_M14::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional string f_6 = 13;
inline bool Message8_M1_M11_M14::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M11_M14::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_6)
  return _internal_f_6();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14::set_f_6(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_6_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_6)
}
inline std::string* Message8_M1_M11_M14::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_6)
  return _s;
}
inline const std::string& Message8_M1_M11_M14::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_.Get();
}
inline void Message8_M1_M11_M14::_internal_set_f_6(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_6_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_6_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_6)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_6_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_6_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14::set_allocated_f_6(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_6_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_6_.IsDefault()) {
          _impl_.f_6_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_6)
}

// optional string f_7 = 14;
inline bool Message8_M1_M11_M14::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message8_M1_M11_M14::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_7)
}
inline std::string* Message8_M1_M11_M14::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_7)
  return _s;
}
inline const std::string& Message8_M1_M11_M14::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message8_M1_M11_M14::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_7)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_7)
}

// optional .fleetbench.proto.Message8.M1.M11.M14.E4 f_8 = 17;
inline bool Message8_M1_M11_M14::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_E4 Message8_M1_M11_M14::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_8)
  return _internal_f_8();
}
inline void Message8_M1_M11_M14::set_f_8(::fleetbench::proto::Message8_M1_M11_M14_E4 value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_8)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_E4 Message8_M1_M11_M14::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M11_M14_E4>(_impl_.f_8_);
}
inline void Message8_M1_M11_M14::_internal_set_f_8(::fleetbench::proto::Message8_M1_M11_M14_E4 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M11_M14_E4_IsValid(value));
  _impl_.f_8_ = value;
}

// repeated uint32 f_9 = 20 [packed = true];
inline int Message8_M1_M11_M14::_internal_f_9_size() const {
  return _internal_f_9().size();
}
inline int Message8_M1_M11_M14::f_9_size() const {
  return _internal_f_9_size();
}
inline void Message8_M1_M11_M14::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.Clear();
}
inline ::uint32_t Message8_M1_M11_M14::f_9(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_9)
  return _internal_f_9().Get(index);
}
inline void Message8_M1_M11_M14::set_f_9(int index, ::uint32_t value) {
  _internal_mutable_f_9()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_9)
}
inline void Message8_M1_M11_M14::add_f_9(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_9()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M11.M14.f_9)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& Message8_M1_M11_M14::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M11.M14.f_9)
  return _internal_f_9();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Message8_M1_M11_M14::mutable_f_9()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M11.M14.f_9)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_9();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
Message8_M1_M11_M14::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* Message8_M1_M11_M14::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_9_;
}

// optional string f_10 = 21;
inline bool Message8_M1_M11_M14::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message8_M1_M11_M14::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_10_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_10)
}
inline std::string* Message8_M1_M11_M14::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_10)
  return _s;
}
inline const std::string& Message8_M1_M11_M14::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message8_M1_M11_M14::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_10)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_10)
}

// optional float f_11 = 24;
inline bool Message8_M1_M11_M14::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline float Message8_M1_M11_M14::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_11)
  return _internal_f_11();
}
inline void Message8_M1_M11_M14::set_f_11(float value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_11)
}
inline float Message8_M1_M11_M14::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message8_M1_M11_M14::_internal_set_f_11(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional bool f_12 = 27;
inline bool Message8_M1_M11_M14::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool Message8_M1_M11_M14::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_12)
  return _internal_f_12();
}
inline void Message8_M1_M11_M14::set_f_12(bool value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_12)
}
inline bool Message8_M1_M11_M14::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message8_M1_M11_M14::_internal_set_f_12(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional string f_13 = 28;
inline bool Message8_M1_M11_M14::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message8_M1_M11_M14::f_13() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_13)
  return _internal_f_13();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14::set_f_13(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_13_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_13)
}
inline std::string* Message8_M1_M11_M14::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_13)
  return _s;
}
inline const std::string& Message8_M1_M11_M14::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_.Get();
}
inline void Message8_M1_M11_M14::_internal_set_f_13(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_13_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_13_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_13)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_13_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_13_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14::set_allocated_f_13(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_13_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_13_.IsDefault()) {
          _impl_.f_13_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_13)
}

// optional int32 f_14 = 29;
inline bool Message8_M1_M11_M14::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t Message8_M1_M11_M14::f_14() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_14)
  return _internal_f_14();
}
inline void Message8_M1_M11_M14::set_f_14(::int32_t value) {
  _internal_set_f_14(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_14)
}
inline ::int32_t Message8_M1_M11_M14::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_14_;
}
inline void Message8_M1_M11_M14::_internal_set_f_14(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_14_ = value;
}

// optional .fleetbench.proto.Message8.M1.M11.M14.E5 f_15 = 30;
inline bool Message8_M1_M11_M14::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_15_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_E5 Message8_M1_M11_M14::f_15() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_15)
  return _internal_f_15();
}
inline void Message8_M1_M11_M14::set_f_15(::fleetbench::proto::Message8_M1_M11_M14_E5 value) {
  _internal_set_f_15(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_15)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_E5 Message8_M1_M11_M14::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M1_M11_M14_E5>(_impl_.f_15_);
}
inline void Message8_M1_M11_M14::_internal_set_f_15(::fleetbench::proto::Message8_M1_M11_M14_E5 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M1_M11_M14_E5_IsValid(value));
  _impl_.f_15_ = value;
}

// optional string f_16 = 31;
inline bool Message8_M1_M11_M14::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1_M11_M14::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Message8_M1_M11_M14::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_16)
  return _internal_f_16();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11_M14::set_f_16(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_16_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.M14.f_16)
}
inline std::string* Message8_M1_M11_M14::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_16)
  return _s;
}
inline const std::string& Message8_M1_M11_M14::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_.Get();
}
inline void Message8_M1_M11_M14::_internal_set_f_16(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.f_16_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11_M14::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.f_16_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11_M14::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_16)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.f_16_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_16_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11_M14::set_allocated_f_16(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.f_16_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_16_.IsDefault()) {
          _impl_.f_16_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_16)
}

// optional .fleetbench.proto.Message8.M1.M11.M14.M18 f_31 = 33;
inline bool Message8_M1_M11_M14::has_f_31() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_31_ != nullptr);
  return value;
}
inline void Message8_M1_M11_M14::clear_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_31_ != nullptr) _impl_.f_31_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M18& Message8_M1_M11_M14::_internal_f_31() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M11_M14_M18* p = _impl_.f_31_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M11_M14_M18&>(::fleetbench::proto::_Message8_M1_M11_M14_M18_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M18& Message8_M1_M11_M14::f_31() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_31)
  return _internal_f_31();
}
inline void Message8_M1_M11_M14::unsafe_arena_set_allocated_f_31(::fleetbench::proto::Message8_M1_M11_M14_M18* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_31_);
  }
  _impl_.f_31_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M18*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_31)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18* Message8_M1_M11_M14::release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message8_M1_M11_M14_M18* released = _impl_.f_31_;
  _impl_.f_31_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18* Message8_M1_M11_M14::unsafe_arena_release_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_31)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message8_M1_M11_M14_M18* temp = _impl_.f_31_;
  _impl_.f_31_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18* Message8_M1_M11_M14::_internal_mutable_f_31() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_31_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M11_M14_M18>(GetArena());
    _impl_.f_31_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M18*>(p);
  }
  return _impl_.f_31_;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M18* Message8_M1_M11_M14::mutable_f_31() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::fleetbench::proto::Message8_M1_M11_M14_M18* _msg = _internal_mutable_f_31();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_31)
  return _msg;
}
inline void Message8_M1_M11_M14::set_allocated_f_31(::fleetbench::proto::Message8_M1_M11_M14_M18* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_31_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.f_31_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M18*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_31)
}

// repeated .fleetbench.proto.Message8.M1.M11.M14.M19 f_33 = 34;
inline int Message8_M1_M11_M14::_internal_f_33_size() const {
  return _internal_f_33().size();
}
inline int Message8_M1_M11_M14::f_33_size() const {
  return _internal_f_33_size();
}
inline void Message8_M1_M11_M14::clear_f_33() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_33_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M19* Message8_M1_M11_M14::mutable_f_33(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_33)
  return _internal_mutable_f_33()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>* Message8_M1_M11_M14::mutable_f_33()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.M11.M14.f_33)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_33();
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M19& Message8_M1_M11_M14::f_33(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_33)
  return _internal_f_33().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M19* Message8_M1_M11_M14::add_f_33() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M11_M14_M19* _add = _internal_mutable_f_33()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.M11.M14.f_33)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>& Message8_M1_M11_M14::f_33() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.M11.M14.f_33)
  return _internal_f_33();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>&
Message8_M1_M11_M14::_internal_f_33() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_33_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11_M14_M19>*
Message8_M1_M11_M14::_internal_mutable_f_33() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_33_;
}

// optional .fleetbench.proto.Message8.M1.M11.M14.M27 f_34 = 36;
inline bool Message8_M1_M11_M14::has_f_34() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_34_ != nullptr);
  return value;
}
inline void Message8_M1_M11_M14::clear_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_34_ != nullptr) _impl_.f_34_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M27& Message8_M1_M11_M14::_internal_f_34() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M11_M14_M27* p = _impl_.f_34_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M11_M14_M27&>(::fleetbench::proto::_Message8_M1_M11_M14_M27_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M11_M14_M27& Message8_M1_M11_M14::f_34() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.M14.f_34)
  return _internal_f_34();
}
inline void Message8_M1_M11_M14::unsafe_arena_set_allocated_f_34(::fleetbench::proto::Message8_M1_M11_M14_M27* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_34_);
  }
  _impl_.f_34_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_34)
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27* Message8_M1_M11_M14::release_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27* released = _impl_.f_34_;
  _impl_.f_34_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27* Message8_M1_M11_M14::unsafe_arena_release_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.M14.f_34)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27* temp = _impl_.f_34_;
  _impl_.f_34_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27* Message8_M1_M11_M14::_internal_mutable_f_34() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_34_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M11_M14_M27>(GetArena());
    _impl_.f_34_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27*>(p);
  }
  return _impl_.f_34_;
}
inline ::fleetbench::proto::Message8_M1_M11_M14_M27* Message8_M1_M11_M14::mutable_f_34() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::fleetbench::proto::Message8_M1_M11_M14_M27* _msg = _internal_mutable_f_34();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.M14.f_34)
  return _msg;
}
inline void Message8_M1_M11_M14::set_allocated_f_34(::fleetbench::proto::Message8_M1_M11_M14_M27* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_34_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.f_34_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14_M27*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.M14.f_34)
}

// -------------------------------------------------------------------

// Message8_M1_M11

// optional bytes f_0 = 1;
inline bool Message8_M1_M11::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1_M11::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1_M11::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.f_0)
}
inline std::string* Message8_M1_M11::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.f_0)
  return _s;
}
inline const std::string& Message8_M1_M11::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1_M11::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.f_0)
}

// optional float f_1 = 3;
inline bool Message8_M1_M11::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M1_M11::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message8_M1_M11::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.f_1)
  return _internal_f_1();
}
inline void Message8_M1_M11::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.f_1)
}
inline float Message8_M1_M11::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1_M11::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 6;
inline bool Message8_M1_M11::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1_M11::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1_M11::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1_M11::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.M11.f_2)
}
inline std::string* Message8_M1_M11::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.f_2)
  return _s;
}
inline const std::string& Message8_M1_M11::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message8_M1_M11::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message8_M1_M11::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message8_M1_M11::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1_M11::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.f_2)
}

// optional .fleetbench.proto.Message8.M1.M11.M14 f_6 = 8;
inline bool Message8_M1_M11::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message8_M1_M11::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message8_M1_M11_M14& Message8_M1_M11::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M11_M14* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M11_M14&>(::fleetbench::proto::_Message8_M1_M11_M14_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M11_M14& Message8_M1_M11::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.M11.f_6)
  return _internal_f_6();
}
inline void Message8_M1_M11::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message8_M1_M11_M14* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.M11.f_6)
}
inline ::fleetbench::proto::Message8_M1_M11_M14* Message8_M1_M11::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M1_M11_M14* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M11_M14* Message8_M1_M11::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.M11.f_6)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M1_M11_M14* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M11_M14* Message8_M1_M11::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M11_M14>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message8_M1_M11_M14* Message8_M1_M11::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message8_M1_M11_M14* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.M11.f_6)
  return _msg;
}
inline void Message8_M1_M11::set_allocated_f_6(::fleetbench::proto::Message8_M1_M11_M14* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M11_M14*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.M11.f_6)
}

// -------------------------------------------------------------------

// Message8_M1

// optional string f_0 = 1;
inline bool Message8_M1::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M1::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M1::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_0)
}
inline std::string* Message8_M1::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.f_0)
  return _s;
}
inline const std::string& Message8_M1::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M1::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M1::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M1::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.f_0)
}

// optional uint64 f_1 = 2;
inline bool Message8_M1::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M1::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Message8_M1::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_1)
  return _internal_f_1();
}
inline void Message8_M1::set_f_1(::uint64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_1)
}
inline ::uint64_t Message8_M1::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M1::_internal_set_f_1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 4;
inline bool Message8_M1::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M1::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M1::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_2)
}
inline std::string* Message8_M1::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.f_2)
  return _s;
}
inline const std::string& Message8_M1::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message8_M1::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message8_M1::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message8_M1::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.f_2)
}

// optional fixed32 f_3 = 6;
inline bool Message8_M1::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M1::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Message8_M1::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_3)
  return _internal_f_3();
}
inline void Message8_M1::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_3)
}
inline ::uint32_t Message8_M1::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M1::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional bytes f_4 = 7;
inline bool Message8_M1::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M1::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message8_M1::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M1::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_4)
}
inline std::string* Message8_M1::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.f_4)
  return _s;
}
inline const std::string& Message8_M1::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message8_M1::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message8_M1::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message8_M1::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.f_4)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M1::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.f_4)
}

// optional uint64 f_5 = 8;
inline bool Message8_M1::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M1::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint64_t Message8_M1::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_5)
  return _internal_f_5();
}
inline void Message8_M1::set_f_5(::uint64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_5)
}
inline ::uint64_t Message8_M1::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M1::_internal_set_f_5(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int32 f_6 = 9;
inline bool Message8_M1::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M1::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Message8_M1::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_6)
  return _internal_f_6();
}
inline void Message8_M1::set_f_6(::int32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_6)
}
inline ::int32_t Message8_M1::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message8_M1::_internal_set_f_6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional float f_7 = 10;
inline bool Message8_M1::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M1::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Message8_M1::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_7)
  return _internal_f_7();
}
inline void Message8_M1::set_f_7(float value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_7)
}
inline float Message8_M1::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message8_M1::_internal_set_f_7(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional int32 f_8 = 11;
inline bool Message8_M1::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M1::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Message8_M1::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_8)
  return _internal_f_8();
}
inline void Message8_M1::set_f_8(::int32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_8)
}
inline ::int32_t Message8_M1::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message8_M1::_internal_set_f_8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional int32 f_9 = 13;
inline bool Message8_M1::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M1::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Message8_M1::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_9)
  return _internal_f_9();
}
inline void Message8_M1::set_f_9(::int32_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_9)
}
inline ::int32_t Message8_M1::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message8_M1::_internal_set_f_9(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional uint32 f_10 = 14;
inline bool Message8_M1::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M1::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t Message8_M1::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_10)
  return _internal_f_10();
}
inline void Message8_M1::set_f_10(::uint32_t value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_10)
}
inline ::uint32_t Message8_M1::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message8_M1::_internal_set_f_10(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional int64 f_11 = 15;
inline bool Message8_M1::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M1::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int64_t Message8_M1::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_11)
  return _internal_f_11();
}
inline void Message8_M1::set_f_11(::int64_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_11)
}
inline ::int64_t Message8_M1::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message8_M1::_internal_set_f_11(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// optional uint32 f_12 = 16;
inline bool Message8_M1::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M1::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t Message8_M1::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_12)
  return _internal_f_12();
}
inline void Message8_M1::set_f_12(::uint32_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M1.f_12)
}
inline ::uint32_t Message8_M1::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message8_M1::_internal_set_f_12(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// repeated .fleetbench.proto.Message8.M1.M4 f_16 = 17;
inline int Message8_M1::_internal_f_16_size() const {
  return _internal_f_16().size();
}
inline int Message8_M1::f_16_size() const {
  return _internal_f_16_size();
}
inline void Message8_M1::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_16_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M4* Message8_M1::mutable_f_16(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.f_16)
  return _internal_mutable_f_16()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>* Message8_M1::mutable_f_16()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.f_16)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_16();
}
inline const ::fleetbench::proto::Message8_M1_M4& Message8_M1::f_16(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_16)
  return _internal_f_16().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M4* Message8_M1::add_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M4* _add = _internal_mutable_f_16()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.f_16)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>& Message8_M1::f_16() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.f_16)
  return _internal_f_16();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>&
Message8_M1::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_16_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M4>*
Message8_M1::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_16_;
}

// optional .fleetbench.proto.Message8.M1.M9 f_17 = 18;
inline bool Message8_M1::has_f_17() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_17_ != nullptr);
  return value;
}
inline void Message8_M1::clear_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_17_ != nullptr) _impl_.f_17_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message8_M1_M9& Message8_M1::_internal_f_17() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M1_M9* p = _impl_.f_17_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M1_M9&>(::fleetbench::proto::_Message8_M1_M9_default_instance_);
}
inline const ::fleetbench::proto::Message8_M1_M9& Message8_M1::f_17() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_17)
  return _internal_f_17();
}
inline void Message8_M1::unsafe_arena_set_allocated_f_17(::fleetbench::proto::Message8_M1_M9* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_17_);
  }
  _impl_.f_17_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M9*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M1.f_17)
}
inline ::fleetbench::proto::Message8_M1_M9* Message8_M1::release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M1_M9* released = _impl_.f_17_;
  _impl_.f_17_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M1_M9* Message8_M1::unsafe_arena_release_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M1.f_17)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M1_M9* temp = _impl_.f_17_;
  _impl_.f_17_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M1_M9* Message8_M1::_internal_mutable_f_17() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_17_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M1_M9>(GetArena());
    _impl_.f_17_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M9*>(p);
  }
  return _impl_.f_17_;
}
inline ::fleetbench::proto::Message8_M1_M9* Message8_M1::mutable_f_17() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message8_M1_M9* _msg = _internal_mutable_f_17();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.f_17)
  return _msg;
}
inline void Message8_M1::set_allocated_f_17(::fleetbench::proto::Message8_M1_M9* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_17_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_17_ = reinterpret_cast<::fleetbench::proto::Message8_M1_M9*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M1.f_17)
}

// repeated .fleetbench.proto.Message8.M1.M11 f_18 = 19;
inline int Message8_M1::_internal_f_18_size() const {
  return _internal_f_18().size();
}
inline int Message8_M1::f_18_size() const {
  return _internal_f_18_size();
}
inline void Message8_M1::clear_f_18() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_18_.Clear();
}
inline ::fleetbench::proto::Message8_M1_M11* Message8_M1::mutable_f_18(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M1.f_18)
  return _internal_mutable_f_18()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>* Message8_M1::mutable_f_18()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M1.f_18)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_18();
}
inline const ::fleetbench::proto::Message8_M1_M11& Message8_M1::f_18(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M1.f_18)
  return _internal_f_18().Get(index);
}
inline ::fleetbench::proto::Message8_M1_M11* Message8_M1::add_f_18() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1_M11* _add = _internal_mutable_f_18()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M1.f_18)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>& Message8_M1::f_18() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M1.f_18)
  return _internal_f_18();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>&
Message8_M1::_internal_f_18() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_18_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1_M11>*
Message8_M1::_internal_mutable_f_18() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_18_;
}

// -------------------------------------------------------------------

// Message8_M2_M3

// optional bool f_0 = 1;
inline bool Message8_M2_M3::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M3::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message8_M2_M3::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M3.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M3::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M3.f_0)
}
inline bool Message8_M2_M3::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M3::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated float f_1 = 2 [packed = true];
inline int Message8_M2_M3::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M2_M3::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M2_M3::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline float Message8_M2_M3::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M3.f_1)
  return _internal_f_1().Get(index);
}
inline void Message8_M2_M3::set_f_1(int index, float value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M3.f_1)
}
inline void Message8_M2_M3::add_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M3.f_1)
}
inline const ::google::protobuf::RepeatedField<float>& Message8_M2_M3::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M3.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<float>* Message8_M2_M3::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M3.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<float>&
Message8_M2_M3::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<float>* Message8_M2_M3::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated int32 f_2 = 4 [packed = true];
inline int Message8_M2_M3::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message8_M2_M3::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message8_M2_M3::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::int32_t Message8_M2_M3::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M3.f_2)
  return _internal_f_2().Get(index);
}
inline void Message8_M2_M3::set_f_2(int index, ::int32_t value) {
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M3.f_2)
}
inline void Message8_M2_M3::add_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M3.f_2)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message8_M2_M3::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M3.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M2_M3::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M3.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message8_M2_M3::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message8_M2_M3::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional string f_3 = 5;
inline bool Message8_M2_M3::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M3::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M3::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M3.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M3::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M3.f_3)
}
inline std::string* Message8_M2_M3::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M3.f_3)
  return _s;
}
inline const std::string& Message8_M2_M3::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message8_M2_M3::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message8_M2_M3::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message8_M2_M3::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M3.f_3)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M3::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M3.f_3)
}

// optional uint64 f_4 = 6;
inline bool Message8_M2_M3::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M3::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message8_M2_M3::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M3.f_4)
  return _internal_f_4();
}
inline void Message8_M2_M3::set_f_4(::uint64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M3.f_4)
}
inline ::uint64_t Message8_M2_M3::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M2_M3::_internal_set_f_4(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M17_M29_M50_M72_M77

// optional float f_0 = 1;
inline bool Message8_M2_M5_M13_M17_M29_M50_M72_M77::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72_M77::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message8_M2_M5_M13_M17_M29_M50_M72_M77::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.M77.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72_M77::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.M77.f_0)
}
inline float Message8_M2_M5_M13_M17_M29_M50_M72_M77::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72_M77::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M17_M29_M50_M72

// optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.E20 f_0 = 2;
inline bool Message8_M2_M5_M13_M17_M29_M50_M72::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 Message8_M2_M5_M13_M17_M29_M50_M72::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72::set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.f_0)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 Message8_M2_M5_M13_M17_M29_M50_M72::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20>(_impl_.f_0_);
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72::_internal_set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.M77 f_2 = 3;
inline bool Message8_M2_M5_M13_M17_M29_M50_M72::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77& Message8_M2_M5_M13_M17_M29_M50_M72::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77&>(::fleetbench::proto::_Message8_M2_M5_M13_M17_M29_M50_M72_M77_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77& Message8_M2_M5_M13_M17_M29_M50_M72::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.f_2)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* Message8_M2_M5_M13_M17_M29_M50_M72::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* Message8_M2_M5_M13_M17_M29_M50_M72::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* Message8_M2_M5_M13_M17_M29_M50_M72::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* Message8_M2_M5_M13_M17_M29_M50_M72::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.f_2)
  return _msg;
}
inline void Message8_M2_M5_M13_M17_M29_M50_M72::set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_M77*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72.f_2)
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M17_M29_M50

// repeated .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.E13 f_0 = 2 [packed = true];
inline int Message8_M2_M5_M13_M17_M29_M50::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message8_M2_M5_M13_M17_M29_M50::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message8_M2_M5_M13_M17_M29_M50::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13 Message8_M2_M5_M13_M17_M29_M50::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_0)
  return static_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13>(_internal_f_0().Get(index));
}
inline void Message8_M2_M5_M13_M17_M29_M50::set_f_0(int index, ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13 value) {
  assert(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13_IsValid(value));
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_0)
}
inline void Message8_M2_M5_M13_M17_M29_M50::add_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13 value) {
  assert(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_0)
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M2_M5_M13_M17_M29_M50::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<int>* Message8_M2_M5_M13_M17_M29_M50::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M2_M5_M13_M17_M29_M50::_internal_f_0()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<int>* Message8_M2_M5_M13_M17_M29_M50::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// repeated .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.M72 f_2 = 5;
inline int Message8_M2_M5_M13_M17_M29_M50::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message8_M2_M5_M13_M17_M29_M50::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message8_M2_M5_M13_M17_M29_M50::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72* Message8_M2_M5_M13_M17_M29_M50::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>* Message8_M2_M5_M13_M17_M29_M50::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72& Message8_M2_M5_M13_M17_M29_M50::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72* Message8_M2_M5_M13_M17_M29_M50::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>& Message8_M2_M5_M13_M17_M29_M50::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>&
Message8_M2_M5_M13_M17_M29_M50::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72>*
Message8_M2_M5_M13_M17_M29_M50::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M17_M29_M61

// optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61.E17 f_0 = 2;
inline bool Message8_M2_M5_M13_M17_M29_M61::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M17_M29_M61::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 Message8_M2_M5_M13_M17_M29_M61::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M17_M29_M61::set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61.f_0)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 Message8_M2_M5_M13_M17_M29_M61::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17>(_impl_.f_0_);
}
inline void Message8_M2_M5_M13_M17_M29_M61::_internal_set_f_0(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M17_M29

// optional int64 f_0 = 1;
inline bool Message8_M2_M5_M13_M17_M29::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M17_M29::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message8_M2_M5_M13_M17_M29::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M17_M29::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_0)
}
inline ::int64_t Message8_M2_M5_M13_M17_M29::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5_M13_M17_M29::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 2;
inline bool Message8_M2_M5_M13_M17_M29::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M17_M29::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message8_M2_M5_M13_M17_M29::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M5_M13_M17_M29::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_1)
}
inline ::int64_t Message8_M2_M5_M13_M17_M29::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M5_M13_M17_M29::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M50 f_2 = 3;
inline bool Message8_M2_M5_M13_M17_M29::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M5_M13_M17_M29::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50& Message8_M2_M5_M13_M17_M29::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50&>(::fleetbench::proto::_Message8_M2_M5_M13_M17_M29_M50_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50& Message8_M2_M5_M13_M17_M29::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M5_M13_M17_M29::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_2)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* Message8_M2_M5_M13_M17_M29::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* Message8_M2_M5_M13_M17_M29::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* Message8_M2_M5_M13_M17_M29::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* Message8_M2_M5_M13_M17_M29::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_2)
  return _msg;
}
inline void Message8_M2_M5_M13_M17_M29::set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_2)
}

// optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29.M61 f_3 = 5;
inline bool Message8_M2_M5_M13_M17_M29::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2_M5_M13_M17_M29::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61& Message8_M2_M5_M13_M17_M29::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61&>(::fleetbench::proto::_Message8_M2_M5_M13_M17_M29_M61_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61& Message8_M2_M5_M13_M17_M29::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M5_M13_M17_M29::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_3)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* Message8_M2_M5_M13_M17_M29::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* Message8_M2_M5_M13_M17_M29::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* Message8_M2_M5_M13_M17_M29::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* Message8_M2_M5_M13_M17_M29::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_3)
  return _msg;
}
inline void Message8_M2_M5_M13_M17_M29::set_allocated_f_3(::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.M29.f_3)
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M17

// optional uint64 f_0 = 2;
inline bool Message8_M2_M5_M13_M17::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M17::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message8_M2_M5_M13_M17::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M17::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M17.f_0)
}
inline ::uint64_t Message8_M2_M5_M13_M17::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5_M13_M17::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M5.M13.M17.M29 f_2 = 3;
inline bool Message8_M2_M5_M13_M17::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M5_M13_M17::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29& Message8_M2_M5_M13_M17::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29&>(::fleetbench::proto::_Message8_M2_M5_M13_M17_M29_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17_M29& Message8_M2_M5_M13_M17::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M17.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M5_M13_M17::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.f_2)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* Message8_M2_M5_M13_M17::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* Message8_M2_M5_M13_M17::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M5.M13.M17.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* Message8_M2_M5_M13_M17::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M5_M13_M17_M29>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* Message8_M2_M5_M13_M17::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13_M17_M29* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M17.f_2)
  return _msg;
}
inline void Message8_M2_M5_M13_M17::set_allocated_f_2(::fleetbench::proto::Message8_M2_M5_M13_M17_M29* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M17_M29*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M17.f_2)
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M26_M36

// optional int64 f_0 = 1;
inline bool Message8_M2_M5_M13_M26_M36::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26_M36::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message8_M2_M5_M13_M26_M36::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.M36.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M26_M36::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.M36.f_0)
}
inline ::int64_t Message8_M2_M5_M13_M26_M36::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5_M13_M26_M36::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M26_M47

// optional bool f_0 = 1;
inline bool Message8_M2_M5_M13_M26_M47::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26_M47::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message8_M2_M5_M13_M26_M47::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M26_M47::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_0)
}
inline bool Message8_M2_M5_M13_M26_M47::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5_M13_M26_M47::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 3;
inline bool Message8_M2_M5_M13_M26_M47::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26_M47::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message8_M2_M5_M13_M26_M47::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M5_M13_M26_M47::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_1)
}
inline float Message8_M2_M5_M13_M26_M47::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M5_M13_M26_M47::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional fixed32 f_2 = 5;
inline bool Message8_M2_M5_M13_M26_M47::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26_M47::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Message8_M2_M5_M13_M26_M47::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M5_M13_M26_M47::set_f_2(::uint32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_2)
}
inline ::uint32_t Message8_M2_M5_M13_M26_M47::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M2_M5_M13_M26_M47::_internal_set_f_2(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message8.M2.M5.M13.M26.M47.E12 f_3 = 7;
inline bool Message8_M2_M5_M13_M26_M47::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26_M47::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 Message8_M2_M5_M13_M26_M47::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M5_M13_M26_M47::set_f_3(::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_3)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 Message8_M2_M5_M13_M26_M47::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12>(_impl_.f_3_);
}
inline void Message8_M2_M5_M13_M26_M47::_internal_set_f_3(::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12_IsValid(value));
  _impl_.f_3_ = value;
}

// optional int32 f_4 = 9;
inline bool Message8_M2_M5_M13_M26_M47::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26_M47::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message8_M2_M5_M13_M26_M47::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_4)
  return _internal_f_4();
}
inline void Message8_M2_M5_M13_M26_M47::set_f_4(::int32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.M47.f_4)
}
inline ::int32_t Message8_M2_M5_M13_M26_M47::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M2_M5_M13_M26_M47::_internal_set_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13_M26

// optional int32 f_0 = 1;
inline bool Message8_M2_M5_M13_M26::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message8_M2_M5_M13_M26::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13_M26::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_0)
}
inline ::int32_t Message8_M2_M5_M13_M26::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 2;
inline bool Message8_M2_M5_M13_M26::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message8_M2_M5_M13_M26::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M5_M13_M26::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_1)
}
inline ::int64_t Message8_M2_M5_M13_M26::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 3;
inline bool Message8_M2_M5_M13_M26::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message8_M2_M5_M13_M26::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M5_M13_M26::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_2)
}
inline ::int32_t Message8_M2_M5_M13_M26::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional uint64 f_3 = 7;
inline bool Message8_M2_M5_M13_M26::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Message8_M2_M5_M13_M26::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M5_M13_M26::set_f_3(::uint64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_3)
}
inline ::uint64_t Message8_M2_M5_M13_M26::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_3(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 8;
inline bool Message8_M2_M5_M13_M26::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message8_M2_M5_M13_M26::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_4)
  return _internal_f_4();
}
inline void Message8_M2_M5_M13_M26::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_4)
}
inline ::int64_t Message8_M2_M5_M13_M26::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int32 f_5 = 10;
inline bool Message8_M2_M5_M13_M26::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Message8_M2_M5_M13_M26::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_5)
  return _internal_f_5();
}
inline void Message8_M2_M5_M13_M26::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_5)
}
inline ::int32_t Message8_M2_M5_M13_M26::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 12;
inline bool Message8_M2_M5_M13_M26::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int64_t Message8_M2_M5_M13_M26::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_6)
  return _internal_f_6();
}
inline void Message8_M2_M5_M13_M26::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_6)
}
inline ::int64_t Message8_M2_M5_M13_M26::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional float f_7 = 13;
inline bool Message8_M2_M5_M13_M26::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Message8_M2_M5_M13_M26::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_7)
  return _internal_f_7();
}
inline void Message8_M2_M5_M13_M26::set_f_7(float value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_7)
}
inline float Message8_M2_M5_M13_M26::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_7(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional int64 f_8 = 17;
inline bool Message8_M2_M5_M13_M26::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int64_t Message8_M2_M5_M13_M26::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_8)
  return _internal_f_8();
}
inline void Message8_M2_M5_M13_M26::set_f_8(::int64_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_8)
}
inline ::int64_t Message8_M2_M5_M13_M26::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_8(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional uint32 f_9 = 19;
inline bool Message8_M2_M5_M13_M26::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t Message8_M2_M5_M13_M26::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_9)
  return _internal_f_9();
}
inline void Message8_M2_M5_M13_M26::set_f_9(::uint32_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_9)
}
inline ::uint32_t Message8_M2_M5_M13_M26::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_9(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional string f_10 = 20;
inline bool Message8_M2_M5_M13_M26::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M5_M13_M26::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_10)
  return _internal_f_10();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M5_M13_M26::set_f_10(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_10_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_10)
}
inline std::string* Message8_M2_M5_M13_M26::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M26.f_10)
  return _s;
}
inline const std::string& Message8_M2_M5_M13_M26::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_.Get();
}
inline void Message8_M2_M5_M13_M26::_internal_set_f_10(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_10_.Set(value, GetArena());
}
inline std::string* Message8_M2_M5_M13_M26::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_10_.Mutable( GetArena());
}
inline std::string* Message8_M2_M5_M13_M26::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M5.M13.M26.f_10)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_10_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_10_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M5_M13_M26::set_allocated_f_10(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_10_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_10_.IsDefault()) {
          _impl_.f_10_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M26.f_10)
}

// repeated float f_11 = 21 [packed = true];
inline int Message8_M2_M5_M13_M26::_internal_f_11_size() const {
  return _internal_f_11().size();
}
inline int Message8_M2_M5_M13_M26::f_11_size() const {
  return _internal_f_11_size();
}
inline void Message8_M2_M5_M13_M26::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.Clear();
}
inline float Message8_M2_M5_M13_M26::f_11(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_11)
  return _internal_f_11().Get(index);
}
inline void Message8_M2_M5_M13_M26::set_f_11(int index, float value) {
  _internal_mutable_f_11()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.M26.f_11)
}
inline void Message8_M2_M5_M13_M26::add_f_11(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_11()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M5.M13.M26.f_11)
}
inline const ::google::protobuf::RepeatedField<float>& Message8_M2_M5_M13_M26::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M5.M13.M26.f_11)
  return _internal_f_11();
}
inline ::google::protobuf::RepeatedField<float>* Message8_M2_M5_M13_M26::mutable_f_11()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M5.M13.M26.f_11)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_11();
}
inline const ::google::protobuf::RepeatedField<float>&
Message8_M2_M5_M13_M26::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline ::google::protobuf::RepeatedField<float>* Message8_M2_M5_M13_M26::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_11_;
}

// repeated .fleetbench.proto.Message8.M2.M5.M13.M26.M36 f_21 = 22;
inline int Message8_M2_M5_M13_M26::_internal_f_21_size() const {
  return _internal_f_21().size();
}
inline int Message8_M2_M5_M13_M26::f_21_size() const {
  return _internal_f_21_size();
}
inline void Message8_M2_M5_M13_M26::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_21_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M36* Message8_M2_M5_M13_M26::mutable_f_21(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M26.f_21)
  return _internal_mutable_f_21()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>* Message8_M2_M5_M13_M26::mutable_f_21()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M5.M13.M26.f_21)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_21();
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M26_M36& Message8_M2_M5_M13_M26::f_21(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_21)
  return _internal_f_21().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M36* Message8_M2_M5_M13_M26::add_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M36* _add = _internal_mutable_f_21()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M5.M13.M26.f_21)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>& Message8_M2_M5_M13_M26::f_21() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M5.M13.M26.f_21)
  return _internal_f_21();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>&
Message8_M2_M5_M13_M26::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_21_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26_M36>*
Message8_M2_M5_M13_M26::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_21_;
}

// optional .fleetbench.proto.Message8.M2.M5.M13.M26.M47 f_22 = 23;
inline bool Message8_M2_M5_M13_M26::has_f_22() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_22_ != nullptr);
  return value;
}
inline void Message8_M2_M5_M13_M26::clear_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_22_ != nullptr) _impl_.f_22_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M26_M47& Message8_M2_M5_M13_M26::_internal_f_22() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* p = _impl_.f_22_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M5_M13_M26_M47&>(::fleetbench::proto::_Message8_M2_M5_M13_M26_M47_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M26_M47& Message8_M2_M5_M13_M26::f_22() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.M26.f_22)
  return _internal_f_22();
}
inline void Message8_M2_M5_M13_M26::unsafe_arena_set_allocated_f_22(::fleetbench::proto::Message8_M2_M5_M13_M26_M47* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_22_);
  }
  _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M26_M47*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M26.f_22)
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* Message8_M2_M5_M13_M26::release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* released = _impl_.f_22_;
  _impl_.f_22_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* Message8_M2_M5_M13_M26::unsafe_arena_release_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M5.M13.M26.f_22)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* temp = _impl_.f_22_;
  _impl_.f_22_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* Message8_M2_M5_M13_M26::_internal_mutable_f_22() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_22_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M5_M13_M26_M47>(GetArena());
    _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M26_M47*>(p);
  }
  return _impl_.f_22_;
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* Message8_M2_M5_M13_M26::mutable_f_22() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M5_M13_M26_M47* _msg = _internal_mutable_f_22();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.M26.f_22)
  return _msg;
}
inline void Message8_M2_M5_M13_M26::set_allocated_f_22(::fleetbench::proto::Message8_M2_M5_M13_M26_M47* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_22_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_22_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13_M26_M47*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M5.M13.M26.f_22)
}

// -------------------------------------------------------------------

// Message8_M2_M5_M13

// optional int32 f_0 = 1;
inline bool Message8_M2_M5_M13::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M5_M13::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message8_M2_M5_M13::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5_M13::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.M13.f_0)
}
inline ::int32_t Message8_M2_M5_M13::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5_M13::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M2.M5.M13.M17 f_1 = 2;
inline int Message8_M2_M5_M13::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M2_M5_M13::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M2_M5_M13::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17* Message8_M2_M5_M13::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>* Message8_M2_M5_M13::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M5.M13.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M17& Message8_M2_M5_M13::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M17* Message8_M2_M5_M13::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M5_M13_M17* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M5.M13.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>& Message8_M2_M5_M13::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M5.M13.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>&
Message8_M2_M5_M13::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M17>*
Message8_M2_M5_M13::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message8.M2.M5.M13.M26 f_2 = 4;
inline int Message8_M2_M5_M13::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message8_M2_M5_M13::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message8_M2_M5_M13::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26* Message8_M2_M5_M13::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.M13.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>* Message8_M2_M5_M13::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M5.M13.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message8_M2_M5_M13_M26& Message8_M2_M5_M13::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.M13.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M5_M13_M26* Message8_M2_M5_M13::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M5_M13_M26* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M5.M13.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>& Message8_M2_M5_M13::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M5.M13.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>&
Message8_M2_M5_M13::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5_M13_M26>*
Message8_M2_M5_M13::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message8_M2_M5

// optional bool f_0 = 1;
inline bool Message8_M2_M5::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M5::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message8_M2_M5::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M5::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M5.f_0)
}
inline bool Message8_M2_M5::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M5::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M5.M13 f_1 = 2;
inline bool Message8_M2_M5::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M2_M5::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M5_M13& Message8_M2_M5::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M5_M13* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M5_M13&>(::fleetbench::proto::_Message8_M2_M5_M13_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M5_M13& Message8_M2_M5::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M5.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M5::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M5_M13* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M5.f_1)
}
inline ::fleetbench::proto::Message8_M2_M5_M13* Message8_M2_M5::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M5_M13* Message8_M2_M5::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M5.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M5_M13* Message8_M2_M5::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M5_M13>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M2_M5_M13* Message8_M2_M5::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M5_M13* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M5.f_1)
  return _msg;
}
inline void Message8_M2_M5::set_allocated_f_1(::fleetbench::proto::Message8_M2_M5_M13* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M5_M13*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M5.f_1)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M21_M34_M55_M71

// optional bool f_0 = 1;
inline bool Message8_M2_M6_M12_M21_M34_M55_M71::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M21_M34_M55_M71::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message8_M2_M6_M12_M21_M34_M55_M71::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.M71.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M21_M34_M55_M71::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.M71.f_0)
}
inline bool Message8_M2_M6_M12_M21_M34_M55_M71::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M21_M34_M55_M71::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M21_M34_M55

// optional bool f_0 = 2;
inline bool Message8_M2_M6_M12_M21_M34_M55::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M21_M34_M55::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message8_M2_M6_M12_M21_M34_M55::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M21_M34_M55::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.f_0)
}
inline bool Message8_M2_M6_M12_M21_M34_M55::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M21_M34_M55::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.M71 f_2 = 4;
inline bool Message8_M2_M6_M12_M21_M34_M55::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M21_M34_M55::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71& Message8_M2_M6_M12_M21_M34_M55::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71&>(::fleetbench::proto::_Message8_M2_M6_M12_M21_M34_M55_M71_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71& Message8_M2_M6_M12_M21_M34_M55::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M6_M12_M21_M34_M55::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.f_2)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* Message8_M2_M6_M12_M21_M34_M55::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* Message8_M2_M6_M12_M21_M34_M55::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* Message8_M2_M6_M12_M21_M34_M55::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* Message8_M2_M6_M12_M21_M34_M55::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.f_2)
  return _msg;
}
inline void Message8_M2_M6_M12_M21_M34_M55::set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55_M71*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55.f_2)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M21_M34

// optional bool f_0 = 1;
inline bool Message8_M2_M6_M12_M21_M34::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M21_M34::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message8_M2_M6_M12_M21_M34::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M21.M34.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M21_M34::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M21.M34.f_0)
}
inline bool Message8_M2_M6_M12_M21_M34::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M21_M34::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M2.M6.M12.M21.M34.M55 f_1 = 2;
inline int Message8_M2_M6_M12_M21_M34::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M2_M6_M12_M21_M34::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M2_M6_M12_M21_M34::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55* Message8_M2_M6_M12_M21_M34::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M21.M34.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>* Message8_M2_M6_M12_M21_M34::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.M12.M21.M34.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55& Message8_M2_M6_M12_M21_M34::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M21.M34.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55* Message8_M2_M6_M12_M21_M34::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.M12.M21.M34.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>& Message8_M2_M6_M12_M21_M34::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.M12.M21.M34.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>&
Message8_M2_M6_M12_M21_M34::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M21_M34_M55>*
Message8_M2_M6_M12_M21_M34::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M21

// optional .fleetbench.proto.Message8.M2.M6.M12.M21.E6 f_0 = 3;
inline bool Message8_M2_M6_M12_M21::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M21::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_E6 Message8_M2_M6_M12_M21::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M21.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M21::set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M21_E6 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M21.f_0)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_E6 Message8_M2_M6_M12_M21::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M21_E6>(_impl_.f_0_);
}
inline void Message8_M2_M6_M12_M21::_internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M21_E6 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M21_E6_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M21.M34 f_3 = 4;
inline bool Message8_M2_M6_M12_M21::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M21::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34& Message8_M2_M6_M12_M21::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34&>(::fleetbench::proto::_Message8_M2_M6_M12_M21_M34_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M21_M34& Message8_M2_M6_M12_M21::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M21.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M6_M12_M21::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21_M34* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21_M34*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M21.f_3)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* Message8_M2_M6_M12_M21::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* Message8_M2_M6_M12_M21::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M21.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* Message8_M2_M6_M12_M21::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M21_M34>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21_M34*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* Message8_M2_M6_M12_M21::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21_M34* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M21.f_3)
  return _msg;
}
inline void Message8_M2_M6_M12_M21::set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21_M34* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21_M34*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M21.f_3)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M22_M41_M59_M70

// optional bool f_0 = 3;
inline bool Message8_M2_M6_M12_M22_M41_M59_M70::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M22_M41_M59_M70::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message8_M2_M6_M12_M22_M41_M59_M70::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.M70.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M22_M41_M59_M70::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.M70.f_0)
}
inline bool Message8_M2_M6_M12_M22_M41_M59_M70::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M22_M41_M59_M70::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M22_M41_M59

// optional int32 f_0 = 2;
inline bool Message8_M2_M6_M12_M22_M41_M59::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M22_M41_M59::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message8_M2_M6_M12_M22_M41_M59::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M22_M41_M59::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.f_0)
}
inline ::int32_t Message8_M2_M6_M12_M22_M41_M59::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M22_M41_M59::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.M70 f_2 = 3;
inline bool Message8_M2_M6_M12_M22_M41_M59::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M22_M41_M59::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70& Message8_M2_M6_M12_M22_M41_M59::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70&>(::fleetbench::proto::_Message8_M2_M6_M12_M22_M41_M59_M70_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70& Message8_M2_M6_M12_M22_M41_M59::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M6_M12_M22_M41_M59::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.f_2)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* Message8_M2_M6_M12_M22_M41_M59::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* Message8_M2_M6_M12_M22_M41_M59::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* Message8_M2_M6_M12_M22_M41_M59::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* Message8_M2_M6_M12_M22_M41_M59::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.f_2)
  return _msg;
}
inline void Message8_M2_M6_M12_M22_M41_M59::set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59_M70*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59.f_2)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M22_M41

// optional float f_0 = 3;
inline bool Message8_M2_M6_M12_M22_M41::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M22_M41::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message8_M2_M6_M12_M22_M41::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M22.M41.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M22_M41::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M22.M41.f_0)
}
inline float Message8_M2_M6_M12_M22_M41::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M22_M41::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M22.M41.M59 f_3 = 5;
inline bool Message8_M2_M6_M12_M22_M41::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M22_M41::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59& Message8_M2_M6_M12_M22_M41::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59&>(::fleetbench::proto::_Message8_M2_M6_M12_M22_M41_M59_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59& Message8_M2_M6_M12_M22_M41::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M22.M41.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M6_M12_M22_M41::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M22.M41.f_3)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* Message8_M2_M6_M12_M22_M41::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* Message8_M2_M6_M12_M22_M41::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M22.M41.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* Message8_M2_M6_M12_M22_M41::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* Message8_M2_M6_M12_M22_M41::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M22.M41.f_3)
  return _msg;
}
inline void Message8_M2_M6_M12_M22_M41::set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41_M59*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M22.M41.f_3)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M22

// optional string f_0 = 1;
inline bool Message8_M2_M6_M12_M22::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M22::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M22::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M22.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M22::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M22.f_0)
}
inline std::string* Message8_M2_M6_M12_M22::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M22.f_0)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M22::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2_M6_M12_M22::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M22::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M22::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M22.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M22::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M22.f_0)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M22.M41 f_1 = 3;
inline bool Message8_M2_M6_M12_M22::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M22::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41& Message8_M2_M6_M12_M22::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41&>(::fleetbench::proto::_Message8_M2_M6_M12_M22_M41_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22_M41& Message8_M2_M6_M12_M22::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M22.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M22::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M22_M41* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M22.f_1)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* Message8_M2_M6_M12_M22::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* Message8_M2_M6_M12_M22::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M22.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* Message8_M2_M6_M12_M22::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M22_M41>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* Message8_M2_M6_M12_M22::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22_M41* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M22.f_1)
  return _msg;
}
inline void Message8_M2_M6_M12_M22::set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M22_M41* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22_M41*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M22.f_1)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M52_M64_M78

// repeated float f_0 = 1 [packed = true];
inline int Message8_M2_M6_M12_M24_M35_M52_M64_M78::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message8_M2_M6_M12_M24_M35_M52_M64_M78::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64_M78::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline float Message8_M2_M6_M12_M24_M35_M52_M64_M78::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78.f_0)
  return _internal_f_0().Get(index);
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64_M78::set_f_0(int index, float value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78.f_0)
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64_M78::add_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78.f_0)
}
inline const ::google::protobuf::RepeatedField<float>& Message8_M2_M6_M12_M24_M35_M52_M64_M78::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<float>* Message8_M2_M6_M12_M24_M35_M52_M64_M78::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<float>&
Message8_M2_M6_M12_M24_M35_M52_M64_M78::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<float>* Message8_M2_M6_M12_M24_M35_M52_M64_M78::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M52_M64

// optional bytes f_0 = 1;
inline bool Message8_M2_M6_M12_M24_M35_M52_M64::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M52_M64::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M52_M64::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_0)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M52_M64::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_0)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M52_M64::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M52_M64::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M52_M64::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_0)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.M78 f_1 = 2;
inline bool Message8_M2_M6_M12_M24_M35_M52_M64::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78& Message8_M2_M6_M12_M24_M35_M52_M64::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M35_M52_M64_M78_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78& Message8_M2_M6_M12_M24_M35_M52_M64::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_1)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* Message8_M2_M6_M12_M24_M35_M52_M64::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* Message8_M2_M6_M12_M24_M35_M52_M64::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* Message8_M2_M6_M12_M24_M35_M52_M64::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* Message8_M2_M6_M12_M24_M35_M52_M64::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_1)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M35_M52_M64::set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64_M78*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64.f_1)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M52_M67

// optional int32 f_0 = 3;
inline bool Message8_M2_M6_M12_M24_M35_M52_M67::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M52_M67::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M52_M67::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M67.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M35_M52_M67::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M67.f_0)
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M52_M67::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M24_M35_M52_M67::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M52

// optional float f_0 = 1;
inline bool Message8_M2_M6_M12_M24_M35_M52::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M52::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message8_M2_M6_M12_M24_M35_M52::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M35_M52::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_0)
}
inline float Message8_M2_M6_M12_M24_M35_M52::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M24_M35_M52::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M64 f_1 = 3;
inline bool Message8_M2_M6_M12_M24_M35_M52::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M52::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64& Message8_M2_M6_M12_M24_M35_M52::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M35_M52_M64_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64& Message8_M2_M6_M12_M24_M35_M52::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M24_M35_M52::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_1)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* Message8_M2_M6_M12_M24_M35_M52::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* Message8_M2_M6_M12_M24_M35_M52::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* Message8_M2_M6_M12_M24_M35_M52::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* Message8_M2_M6_M12_M24_M35_M52::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_1)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M35_M52::set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M64*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_1)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.M67 f_3 = 4;
inline bool Message8_M2_M6_M12_M24_M35_M52::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M52::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67& Message8_M2_M6_M12_M24_M35_M52::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M35_M52_M67_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67& Message8_M2_M6_M12_M24_M35_M52::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M6_M12_M24_M35_M52::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_3)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* Message8_M2_M6_M12_M24_M35_M52::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* Message8_M2_M6_M12_M24_M35_M52::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* Message8_M2_M6_M12_M24_M35_M52::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* Message8_M2_M6_M12_M24_M35_M52::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_3)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M35_M52::set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52_M67*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52.f_3)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M54

// optional bool f_0 = 1;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message8_M2_M6_M12_M24_M35_M54::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_0)
}
inline bool Message8_M2_M6_M12_M24_M35_M54::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional bool f_1 = 2;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message8_M2_M6_M12_M24_M35_M54::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_1)
}
inline bool Message8_M2_M6_M12_M24_M35_M54::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 3;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M54::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M54::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_2)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M54::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_2)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M54::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M54::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M54::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_2)
}

// optional string f_3 = 4;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M54::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M54::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_3)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M54::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_3)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M54::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M54::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M54::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_3)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.E14 f_4 = 6;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 Message8_M2_M6_M12_M24_M35_M54::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_4)
  return _internal_f_4();
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_f_4(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_4)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 Message8_M2_M6_M12_M24_M35_M54::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14>(_impl_.f_4_);
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_4(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14_IsValid(value));
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 8;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message8_M2_M6_M12_M24_M35_M54::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_5)
  return _internal_f_5();
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_5)
}
inline ::int64_t Message8_M2_M6_M12_M24_M35_M54::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int32 f_6 = 9;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M54::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_6)
  return _internal_f_6();
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_f_6(::int32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_6)
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M54::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.E15 f_7 = 12;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 Message8_M2_M6_M12_M24_M35_M54::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_7)
  return _internal_f_7();
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_f_7(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_7)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 Message8_M2_M6_M12_M24_M35_M54::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15>(_impl_.f_7_);
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_7(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15_IsValid(value));
  _impl_.f_7_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.E16 f_8 = 13;
inline bool Message8_M2_M6_M12_M24_M35_M54::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M54::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 Message8_M2_M6_M12_M24_M35_M54::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_8)
  return _internal_f_8();
}
inline void Message8_M2_M6_M12_M24_M35_M54::set_f_8(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54.f_8)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 Message8_M2_M6_M12_M24_M35_M54::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16>(_impl_.f_8_);
}
inline void Message8_M2_M6_M12_M24_M35_M54::_internal_set_f_8(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16_IsValid(value));
  _impl_.f_8_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M62_M65

// optional string f_0 = 1;
inline bool Message8_M2_M6_M12_M24_M35_M62_M65::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M62_M65::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M62_M65::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_0)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M62_M65::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_0)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M62_M65::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M62_M65::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M62_M65::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_0)
}

// optional int64 f_1 = 2;
inline bool Message8_M2_M6_M12_M24_M35_M62_M65::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M2_M6_M12_M24_M35_M62_M65::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_1)
}
inline ::int64_t Message8_M2_M6_M12_M24_M35_M62_M65::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 3;
inline bool Message8_M2_M6_M12_M24_M35_M62_M65::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M62_M65::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65.f_2)
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M62_M65::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M65::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M62_M66

// optional int32 f_0 = 3;
inline bool Message8_M2_M6_M12_M24_M35_M62_M66::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M62_M66::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_0)
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M62_M66::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 5;
inline bool Message8_M2_M6_M12_M24_M35_M62_M66::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M62_M66::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M62_M66::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_1)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M62_M66::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_1)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M62_M66::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M62_M66::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M62_M66::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_1)
}

// optional bool f_2 = 6;
inline bool Message8_M2_M6_M12_M24_M35_M62_M66::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message8_M2_M6_M12_M24_M35_M62_M66::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66.f_2)
}
inline bool Message8_M2_M6_M12_M24_M35_M62_M66::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M2_M6_M12_M24_M35_M62_M66::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M62

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.E18 f_0 = 1;
inline bool Message8_M2_M6_M12_M24_M35_M62::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 Message8_M2_M6_M12_M24_M35_M62::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M35_M62::set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_0)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 Message8_M2_M6_M12_M24_M35_M62::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18>(_impl_.f_0_);
}
inline void Message8_M2_M6_M12_M24_M35_M62::_internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M65 f_1 = 2;
inline bool Message8_M2_M6_M12_M24_M35_M62::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65& Message8_M2_M6_M12_M24_M35_M62::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M35_M62_M65_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65& Message8_M2_M6_M12_M24_M35_M62::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M24_M35_M62::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_1)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* Message8_M2_M6_M12_M24_M35_M62::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* Message8_M2_M6_M12_M24_M35_M62::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* Message8_M2_M6_M12_M24_M35_M62::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* Message8_M2_M6_M12_M24_M35_M62::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_1)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M35_M62::set_allocated_f_1(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M65*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_1)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.M66 f_2 = 4;
inline bool Message8_M2_M6_M12_M24_M35_M62::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M62::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66& Message8_M2_M6_M12_M24_M35_M62::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M35_M62_M66_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66& Message8_M2_M6_M12_M24_M35_M62::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M6_M12_M24_M35_M62::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_2)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* Message8_M2_M6_M12_M24_M35_M62::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* Message8_M2_M6_M12_M24_M35_M62::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* Message8_M2_M6_M12_M24_M35_M62::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* Message8_M2_M6_M12_M24_M35_M62::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_2)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M35_M62::set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_M66*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62.f_2)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35_M63

// optional int32 f_0 = 1;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M63::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_0)
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M63::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 2;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message8_M2_M6_M12_M24_M35_M63::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_1)
}
inline ::int64_t Message8_M2_M6_M12_M24_M35_M63::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 3;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M63::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_2)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_2)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_2)
}

// optional string f_3 = 5;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M63::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_3)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_3)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_3)
}

// optional int32 f_4 = 6;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M63::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_4)
  return _internal_f_4();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_4(::int32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_4)
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M63::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional fixed32 f_5 = 7;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint32_t Message8_M2_M6_M12_M24_M35_M63::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_5)
  return _internal_f_5();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_5(::uint32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_5)
}
inline ::uint32_t Message8_M2_M6_M12_M24_M35_M63::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_5(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional string f_6 = 8;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_6)
  return _internal_f_6();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M63::set_f_6(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_6_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_6)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_6)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_6(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_6_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_6_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_6)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_6_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_6_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_allocated_f_6(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_6_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_6_.IsDefault()) {
          _impl_.f_6_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_6)
}

// optional string f_7 = 9;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M63::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_7_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_7)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_7)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_7)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_7)
}

// optional double f_8 = 11;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double Message8_M2_M6_M12_M24_M35_M63::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_8)
  return _internal_f_8();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_8(double value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_8)
}
inline double Message8_M2_M6_M12_M24_M35_M63::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_8(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional float f_9 = 13;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Message8_M2_M6_M12_M24_M35_M63::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_9)
  return _internal_f_9();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_9(float value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_9)
}
inline float Message8_M2_M6_M12_M24_M35_M63::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_9(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.E19 f_10 = 14;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 Message8_M2_M6_M12_M24_M35_M63::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_10)
  return _internal_f_10();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_10(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_10)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 Message8_M2_M6_M12_M24_M35_M63::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19>(_impl_.f_10_);
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_10(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19_IsValid(value));
  _impl_.f_10_ = value;
}

// optional string f_11 = 15;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::f_11() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_11)
  return _internal_f_11();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35_M63::set_f_11(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_11_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_11)
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_11)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35_M63::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_.Get();
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_11(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.f_11_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.f_11_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35_M63::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_11)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.f_11_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_11_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_allocated_f_11(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.f_11_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_11_.IsDefault()) {
          _impl_.f_11_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_11)
}

// optional int32 f_12 = 16;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M63::f_12() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_12)
  return _internal_f_12();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_12(::int32_t value) {
  _internal_set_f_12(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_12)
}
inline ::int32_t Message8_M2_M6_M12_M24_M35_M63::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_12(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_ = value;
}

// optional bool f_13 = 18;
inline bool Message8_M2_M6_M12_M24_M35_M63::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35_M63::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool Message8_M2_M6_M12_M24_M35_M63::f_13() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_13)
  return _internal_f_13();
}
inline void Message8_M2_M6_M12_M24_M35_M63::set_f_13(bool value) {
  _internal_set_f_13(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63.f_13)
}
inline bool Message8_M2_M6_M12_M24_M35_M63::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline void Message8_M2_M6_M12_M24_M35_M63::_internal_set_f_13(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M35

// optional string f_0 = 1;
inline bool Message8_M2_M6_M12_M24_M35::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M35::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M35::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M35::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_0)
}
inline std::string* Message8_M2_M6_M12_M24_M35::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_0)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M35::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2_M6_M12_M24_M35::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M35::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M35::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_0)
}

// repeated .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M52 f_1 = 3;
inline int Message8_M2_M6_M12_M24_M35::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M2_M6_M12_M24_M35::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M2_M6_M12_M24_M35::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52* Message8_M2_M6_M12_M24_M35::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>* Message8_M2_M6_M12_M24_M35::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52& Message8_M2_M6_M12_M24_M35::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52* Message8_M2_M6_M12_M24_M35::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>& Message8_M2_M6_M12_M24_M35::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>&
Message8_M2_M6_M12_M24_M35::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M52>*
Message8_M2_M6_M12_M24_M35::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M54 f_3 = 5;
inline bool Message8_M2_M6_M12_M24_M35::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M35::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54& Message8_M2_M6_M12_M24_M35::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M35_M54_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54& Message8_M2_M6_M12_M24_M35::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M6_M12_M24_M35::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_3)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* Message8_M2_M6_M12_M24_M35::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* Message8_M2_M6_M12_M24_M35::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* Message8_M2_M6_M12_M24_M35::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* Message8_M2_M6_M12_M24_M35::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_3)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M35::set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_3)
}

// repeated .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M62 f_5 = 7;
inline int Message8_M2_M6_M12_M24_M35::_internal_f_5_size() const {
  return _internal_f_5().size();
}
inline int Message8_M2_M6_M12_M24_M35::f_5_size() const {
  return _internal_f_5_size();
}
inline void Message8_M2_M6_M12_M24_M35::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62* Message8_M2_M6_M12_M24_M35::mutable_f_5(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_5)
  return _internal_mutable_f_5()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>* Message8_M2_M6_M12_M24_M35::mutable_f_5()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_5();
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62& Message8_M2_M6_M12_M24_M35::f_5(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_5)
  return _internal_f_5().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62* Message8_M2_M6_M12_M24_M35::add_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62* _add = _internal_mutable_f_5()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_5)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>& Message8_M2_M6_M12_M24_M35::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_5)
  return _internal_f_5();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>&
Message8_M2_M6_M12_M24_M35::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62>*
Message8_M2_M6_M12_M24_M35::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_5_;
}

// repeated .fleetbench.proto.Message8.M2.M6.M12.M24.M35.M63 f_7 = 8;
inline int Message8_M2_M6_M12_M24_M35::_internal_f_7_size() const {
  return _internal_f_7().size();
}
inline int Message8_M2_M6_M12_M24_M35::f_7_size() const {
  return _internal_f_7_size();
}
inline void Message8_M2_M6_M12_M24_M35::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63* Message8_M2_M6_M12_M24_M35::mutable_f_7(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_7)
  return _internal_mutable_f_7()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>* Message8_M2_M6_M12_M24_M35::mutable_f_7()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_7)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_7();
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63& Message8_M2_M6_M12_M24_M35::f_7(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_7)
  return _internal_f_7().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63* Message8_M2_M6_M12_M24_M35::add_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63* _add = _internal_mutable_f_7()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_7)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>& Message8_M2_M6_M12_M24_M35::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.M12.M24.M35.f_7)
  return _internal_f_7();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>&
Message8_M2_M6_M12_M24_M35::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63>*
Message8_M2_M6_M12_M24_M35::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_7_;
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M43_M49_M68

// optional string f_0 = 2;
inline bool Message8_M2_M6_M12_M24_M43_M49_M68::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M43_M49_M68::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M43_M49_M68::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M43_M49_M68::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68.f_0)
}
inline std::string* Message8_M2_M6_M12_M24_M43_M49_M68::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68.f_0)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M43_M49_M68::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2_M6_M12_M24_M43_M49_M68::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M43_M49_M68::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M43_M49_M68::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M43_M49_M68::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68.f_0)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M43_M49

// optional int64 f_0 = 2;
inline bool Message8_M2_M6_M12_M24_M43_M49::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M43_M49::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M2_M6_M12_M24_M43_M49::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M43_M49::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.f_0)
}
inline ::int64_t Message8_M2_M6_M12_M24_M43_M49::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12_M24_M43_M49::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.M68 f_2 = 3;
inline bool Message8_M2_M6_M12_M24_M43_M49::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M43_M49::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68& Message8_M2_M6_M12_M24_M43_M49::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M43_M49_M68_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68& Message8_M2_M6_M12_M24_M43_M49::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M6_M12_M24_M43_M49::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.f_2)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* Message8_M2_M6_M12_M24_M43_M49::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* Message8_M2_M6_M12_M24_M43_M49::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* Message8_M2_M6_M12_M24_M43_M49::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* Message8_M2_M6_M12_M24_M43_M49::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.f_2)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M43_M49::set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49_M68*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49.f_2)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M43_M51

// optional bytes f_0 = 2;
inline bool Message8_M2_M6_M12_M24_M43_M51::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M43_M51::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24_M43_M51::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24_M43_M51::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51.f_0)
}
inline std::string* Message8_M2_M6_M12_M24_M43_M51::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51.f_0)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24_M43_M51::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2_M6_M12_M24_M43_M51::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M43_M51::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24_M43_M51::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24_M43_M51::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51.f_0)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24_M43

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.E10 f_0 = 2;
inline bool Message8_M2_M6_M12_M24_M43::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24_M43::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 Message8_M2_M6_M12_M24_M43::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24_M43::set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_0)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 Message8_M2_M6_M12_M24_M43::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10>(_impl_.f_0_);
}
inline void Message8_M2_M6_M12_M24_M43::_internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.M49 f_2 = 3;
inline bool Message8_M2_M6_M12_M24_M43::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M43::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49& Message8_M2_M6_M12_M24_M43::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M43_M49_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49& Message8_M2_M6_M12_M24_M43::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M6_M12_M24_M43::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_2)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* Message8_M2_M6_M12_M24_M43::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* Message8_M2_M6_M12_M24_M43::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* Message8_M2_M6_M12_M24_M43::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* Message8_M2_M6_M12_M24_M43::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_2)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M43::set_allocated_f_2(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M49*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_2)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43.M51 f_3 = 5;
inline bool Message8_M2_M6_M12_M24_M43::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24_M43::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51& Message8_M2_M6_M12_M24_M43::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M43_M51_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51& Message8_M2_M6_M12_M24_M43::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M6_M12_M24_M43::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_3)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* Message8_M2_M6_M12_M24_M43::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* Message8_M2_M6_M12_M24_M43::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* Message8_M2_M6_M12_M24_M43::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* Message8_M2_M6_M12_M24_M43::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_3)
  return _msg;
}
inline void Message8_M2_M6_M12_M24_M43::set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_M51*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.M43.f_3)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12_M24

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.E7 f_0 = 2;
inline bool Message8_M2_M6_M12_M24::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_E7 Message8_M2_M6_M12_M24::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12_M24::set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_E7 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.f_0)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_E7 Message8_M2_M6_M12_M24::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_E7>(_impl_.f_0_);
}
inline void Message8_M2_M6_M12_M24::_internal_set_f_0(::fleetbench::proto::Message8_M2_M6_M12_M24_E7 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M6_M12_M24_E7_IsValid(value));
  _impl_.f_0_ = value;
}

// optional bool f_1 = 4;
inline bool Message8_M2_M6_M12_M24::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool Message8_M2_M6_M12_M24::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12_M24::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.f_1)
}
inline bool Message8_M2_M6_M12_M24::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M6_M12_M24::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 6;
inline bool Message8_M2_M6_M12_M24::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M6_M12_M24::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.f_2)
}
inline std::string* Message8_M2_M6_M12_M24::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.f_2)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message8_M2_M6_M12_M24::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.f_2)
}

// optional string f_3 = 7;
inline bool Message8_M2_M6_M12_M24::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message8_M2_M6_M12_M24::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.f_3)
}
inline std::string* Message8_M2_M6_M12_M24::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.f_3)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message8_M2_M6_M12_M24::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.f_3)
}

// optional string f_4 = 10;
inline bool Message8_M2_M6_M12_M24::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message8_M2_M6_M12_M24::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M6_M12_M24::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.f_4)
}
inline std::string* Message8_M2_M6_M12_M24::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.f_4)
  return _s;
}
inline const std::string& Message8_M2_M6_M12_M24::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message8_M2_M6_M12_M24::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message8_M2_M6_M12_M24::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message8_M2_M6_M12_M24::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.f_4)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M6_M12_M24::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.f_4)
}

// optional int64 f_5 = 12;
inline bool Message8_M2_M6_M12_M24::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message8_M2_M6_M12_M24::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_5)
  return _internal_f_5();
}
inline void Message8_M2_M6_M12_M24::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.f_5)
}
inline ::int64_t Message8_M2_M6_M12_M24::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8_M2_M6_M12_M24::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// repeated int64 f_6 = 14 [packed = true];
inline int Message8_M2_M6_M12_M24::_internal_f_6_size() const {
  return _internal_f_6().size();
}
inline int Message8_M2_M6_M12_M24::f_6_size() const {
  return _internal_f_6_size();
}
inline void Message8_M2_M6_M12_M24::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.Clear();
}
inline ::int64_t Message8_M2_M6_M12_M24::f_6(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_6)
  return _internal_f_6().Get(index);
}
inline void Message8_M2_M6_M12_M24::set_f_6(int index, ::int64_t value) {
  _internal_mutable_f_6()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.M24.f_6)
}
inline void Message8_M2_M6_M12_M24::add_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_6()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.M12.M24.f_6)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message8_M2_M6_M12_M24::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.M12.M24.f_6)
  return _internal_f_6();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M2_M6_M12_M24::mutable_f_6()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.M12.M24.f_6)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_6();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message8_M2_M6_M12_M24::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M2_M6_M12_M24::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_6_;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M35 f_14 = 15;
inline bool Message8_M2_M6_M12_M24::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_14_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ != nullptr) _impl_.f_14_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35& Message8_M2_M6_M12_M24::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* p = _impl_.f_14_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M35_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M35& Message8_M2_M6_M12_M24::f_14() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_14)
  return _internal_f_14();
}
inline void Message8_M2_M6_M12_M24::unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message8_M2_M6_M12_M24_M35* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_14_);
  }
  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.f_14)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* Message8_M2_M6_M12_M24::release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* released = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* Message8_M2_M6_M12_M24::unsafe_arena_release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.f_14)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* temp = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* Message8_M2_M6_M12_M24::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M35>(GetArena());
    _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35*>(p);
  }
  return _impl_.f_14_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* Message8_M2_M6_M12_M24::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M35* _msg = _internal_mutable_f_14();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.f_14)
  return _msg;
}
inline void Message8_M2_M6_M12_M24::set_allocated_f_14(::fleetbench::proto::Message8_M2_M6_M12_M24_M35* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_14_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M35*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.f_14)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24.M43 f_15 = 16;
inline bool Message8_M2_M6_M12_M24::has_f_15() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_15_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12_M24::clear_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_15_ != nullptr) _impl_.f_15_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43& Message8_M2_M6_M12_M24::_internal_f_15() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* p = _impl_.f_15_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_M43_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24_M43& Message8_M2_M6_M12_M24::f_15() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.M24.f_15)
  return _internal_f_15();
}
inline void Message8_M2_M6_M12_M24::unsafe_arena_set_allocated_f_15(::fleetbench::proto::Message8_M2_M6_M12_M24_M43* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_15_);
  }
  _impl_.f_15_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.f_15)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* Message8_M2_M6_M12_M24::release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* released = _impl_.f_15_;
  _impl_.f_15_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* Message8_M2_M6_M12_M24::unsafe_arena_release_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.M24.f_15)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* temp = _impl_.f_15_;
  _impl_.f_15_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* Message8_M2_M6_M12_M24::_internal_mutable_f_15() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_15_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24_M43>(GetArena());
    _impl_.f_15_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43*>(p);
  }
  return _impl_.f_15_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* Message8_M2_M6_M12_M24::mutable_f_15() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24_M43* _msg = _internal_mutable_f_15();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.M24.f_15)
  return _msg;
}
inline void Message8_M2_M6_M12_M24::set_allocated_f_15(::fleetbench::proto::Message8_M2_M6_M12_M24_M43* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_15_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_15_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24_M43*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.M24.f_15)
}

// -------------------------------------------------------------------

// Message8_M2_M6_M12

// optional bool f_0 = 1;
inline bool Message8_M2_M6_M12::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M2_M6_M12::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message8_M2_M6_M12::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6_M12::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.f_0)
}
inline bool Message8_M2_M6_M12::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6_M12::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 2;
inline bool Message8_M2_M6_M12::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M2_M6_M12::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message8_M2_M6_M12::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M6_M12::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.f_1)
}
inline ::int32_t Message8_M2_M6_M12::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M6_M12::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated .fleetbench.proto.Message8.M2.M6.M12.E3 f_2 = 3 [packed = true];
inline int Message8_M2_M6_M12::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message8_M2_M6_M12::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message8_M2_M6_M12::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M6_M12_E3 Message8_M2_M6_M12::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.f_2)
  return static_cast<::fleetbench::proto::Message8_M2_M6_M12_E3>(_internal_f_2().Get(index));
}
inline void Message8_M2_M6_M12::set_f_2(int index, ::fleetbench::proto::Message8_M2_M6_M12_E3 value) {
  assert(::fleetbench::proto::Message8_M2_M6_M12_E3_IsValid(value));
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.M12.f_2)
}
inline void Message8_M2_M6_M12::add_f_2(::fleetbench::proto::Message8_M2_M6_M12_E3 value) {
  assert(::fleetbench::proto::Message8_M2_M6_M12_E3_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.M12.f_2)
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M2_M6_M12::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.M12.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<int>* Message8_M2_M6_M12::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.M12.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<int>& Message8_M2_M6_M12::_internal_f_2()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<int>* Message8_M2_M6_M12::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M21 f_3 = 4;
inline bool Message8_M2_M6_M12::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M21& Message8_M2_M6_M12::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M21* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M21&>(::fleetbench::proto::_Message8_M2_M6_M12_M21_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M21& Message8_M2_M6_M12::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M6_M12::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.f_3)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21* Message8_M2_M6_M12::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21* Message8_M2_M6_M12::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21* Message8_M2_M6_M12::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M21>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M21* Message8_M2_M6_M12::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2_M6_M12_M21* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.f_3)
  return _msg;
}
inline void Message8_M2_M6_M12::set_allocated_f_3(::fleetbench::proto::Message8_M2_M6_M12_M21* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M21*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.f_3)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M22 f_4 = 5;
inline bool Message8_M2_M6_M12::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22& Message8_M2_M6_M12::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M22* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M22&>(::fleetbench::proto::_Message8_M2_M6_M12_M22_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M22& Message8_M2_M6_M12::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.f_4)
  return _internal_f_4();
}
inline void Message8_M2_M6_M12::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message8_M2_M6_M12_M22* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.f_4)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22* Message8_M2_M6_M12::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22* Message8_M2_M6_M12::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22* Message8_M2_M6_M12::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M22>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M22* Message8_M2_M6_M12::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M6_M12_M22* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.f_4)
  return _msg;
}
inline void Message8_M2_M6_M12::set_allocated_f_4(::fleetbench::proto::Message8_M2_M6_M12_M22* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M22*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.f_4)
}

// optional .fleetbench.proto.Message8.M2.M6.M12.M24 f_5 = 8;
inline bool Message8_M2_M6_M12::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message8_M2_M6_M12::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24& Message8_M2_M6_M12::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6_M12_M24* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6_M12_M24&>(::fleetbench::proto::_Message8_M2_M6_M12_M24_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6_M12_M24& Message8_M2_M6_M12::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.M12.f_5)
  return _internal_f_5();
}
inline void Message8_M2_M6_M12::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message8_M2_M6_M12_M24* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.M6.M12.f_5)
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24* Message8_M2_M6_M12::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24* Message8_M2_M6_M12::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M6.M12.f_5)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24* Message8_M2_M6_M12::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6_M12_M24>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message8_M2_M6_M12_M24* Message8_M2_M6_M12::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message8_M2_M6_M12_M24* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.M12.f_5)
  return _msg;
}
inline void Message8_M2_M6_M12::set_allocated_f_5(::fleetbench::proto::Message8_M2_M6_M12_M24* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6_M12_M24*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M6.M12.f_5)
}

// -------------------------------------------------------------------

// Message8_M2_M6

// optional uint32 f_0 = 2;
inline bool Message8_M2_M6::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M6::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message8_M2_M6::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M6::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M6.f_0)
}
inline ::uint32_t Message8_M2_M6::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M6::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message8.M2.M6.M12 f_2 = 5;
inline int Message8_M2_M6::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message8_M2_M6::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message8_M2_M6::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M6_M12* Message8_M2_M6::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M6.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>* Message8_M2_M6::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.M6.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message8_M2_M6_M12& Message8_M2_M6::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M6.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M6_M12* Message8_M2_M6::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M6_M12* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.M6.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>& Message8_M2_M6::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.M6.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>&
Message8_M2_M6::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M6_M12>*
Message8_M2_M6::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message8_M2_M7

// optional int64 f_0 = 2;
inline bool Message8_M2_M7::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M7::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message8_M2_M7::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M7.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M7::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M7.f_0)
}
inline ::int64_t Message8_M2_M7::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M7::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M8

// optional string f_0 = 1;
inline bool Message8_M2_M8::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M8::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M8::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M8.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M8::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M8.f_0)
}
inline std::string* Message8_M2_M8::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M8.f_0)
  return _s;
}
inline const std::string& Message8_M2_M8::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2_M8::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2_M8::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2_M8::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M8.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M8::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M8.f_0)
}

// optional int64 f_1 = 3;
inline bool Message8_M2_M8::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M8::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M2_M8::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M8.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M8::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M8.f_1)
}
inline ::int64_t Message8_M2_M8::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8_M2_M8::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional uint64 f_2 = 5;
inline bool Message8_M2_M8::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M8::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Message8_M2_M8::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M8.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M8::set_f_2(::uint64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M8.f_2)
}
inline ::uint64_t Message8_M2_M8::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M2_M8::_internal_set_f_2(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message8_M2_M10

// optional int64 f_0 = 1;
inline bool Message8_M2_M10::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message8_M2_M10::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_0)
  return _internal_f_0();
}
inline void Message8_M2_M10::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_0)
}
inline ::int64_t Message8_M2_M10::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8_M2_M10::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message8.M2.M10.E1 f_1 = 2;
inline bool Message8_M2_M10::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message8_M2_M10_E1 Message8_M2_M10::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_1)
  return _internal_f_1();
}
inline void Message8_M2_M10::set_f_1(::fleetbench::proto::Message8_M2_M10_E1 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_1)
}
inline ::fleetbench::proto::Message8_M2_M10_E1 Message8_M2_M10::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M10_E1>(_impl_.f_1_);
}
inline void Message8_M2_M10::_internal_set_f_1(::fleetbench::proto::Message8_M2_M10_E1 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M10_E1_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 4;
inline bool Message8_M2_M10::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message8_M2_M10::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_2)
  return _internal_f_2();
}
inline void Message8_M2_M10::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_2)
}
inline ::int64_t Message8_M2_M10::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M2_M10::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message8.M2.M10.E2 f_3 = 6;
inline bool Message8_M2_M10::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message8_M2_M10_E2 Message8_M2_M10::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_3)
  return _internal_f_3();
}
inline void Message8_M2_M10::set_f_3(::fleetbench::proto::Message8_M2_M10_E2 value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_3)
}
inline ::fleetbench::proto::Message8_M2_M10_E2 Message8_M2_M10::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message8_M2_M10_E2>(_impl_.f_3_);
}
inline void Message8_M2_M10::_internal_set_f_3(::fleetbench::proto::Message8_M2_M10_E2 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message8_M2_M10_E2_IsValid(value));
  _impl_.f_3_ = value;
}

// optional uint64 f_4 = 8;
inline bool Message8_M2_M10::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Message8_M2_M10::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_4)
  return _internal_f_4();
}
inline void Message8_M2_M10::set_f_4(::uint64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_4)
}
inline ::uint64_t Message8_M2_M10::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8_M2_M10::_internal_set_f_4(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional string f_5 = 10;
inline bool Message8_M2_M10::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2_M10::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2_M10::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_5)
}
inline std::string* Message8_M2_M10::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.M10.f_5)
  return _s;
}
inline const std::string& Message8_M2_M10::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message8_M2_M10::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message8_M2_M10::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message8_M2_M10::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.M10.f_5)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2_M10::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.M10.f_5)
}

// optional double f_6 = 12;
inline bool Message8_M2_M10::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double Message8_M2_M10::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_6)
  return _internal_f_6();
}
inline void Message8_M2_M10::set_f_6(double value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_6)
}
inline double Message8_M2_M10::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message8_M2_M10::_internal_set_f_6(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional int64 f_7 = 13;
inline bool Message8_M2_M10::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message8_M2_M10::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message8_M2_M10::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.M10.f_7)
  return _internal_f_7();
}
inline void Message8_M2_M10::set_f_7(::int64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.M10.f_7)
}
inline ::int64_t Message8_M2_M10::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message8_M2_M10::_internal_set_f_7(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// -------------------------------------------------------------------

// Message8_M2

// optional bytes f_0 = 1;
inline bool Message8_M2::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message8_M2::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message8_M2::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message8_M2::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.f_0)
}
inline std::string* Message8_M2::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.f_0)
  return _s;
}
inline const std::string& Message8_M2::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message8_M2::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message8_M2::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message8_M2::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message8_M2::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.f_0)
}

// repeated int64 f_1 = 2 [packed = true];
inline int Message8_M2::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message8_M2::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message8_M2::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::int64_t Message8_M2::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_1)
  return _internal_f_1().Get(index);
}
inline void Message8_M2::set_f_1(int index, ::int64_t value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.f_1)
}
inline void Message8_M2::add_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.f_1)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Message8_M2::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M2::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<::int64_t>&
Message8_M2::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Message8_M2::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional int64 f_2 = 3;
inline bool Message8_M2::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8_M2::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message8_M2::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_2)
  return _internal_f_2();
}
inline void Message8_M2::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.M2.f_2)
}
inline ::int64_t Message8_M2::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8_M2::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message8.M2.M3 f_3 = 5;
inline bool Message8_M2::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message8_M2::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message8_M2_M3& Message8_M2::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M3* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M3&>(::fleetbench::proto::_Message8_M2_M3_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M3& Message8_M2::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_3)
  return _internal_f_3();
}
inline void Message8_M2::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message8_M2_M3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.f_3)
}
inline ::fleetbench::proto::Message8_M2_M3* Message8_M2::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M3* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M3* Message8_M2::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message8_M2_M3* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M3* Message8_M2::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M3>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M3*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message8_M2_M3* Message8_M2::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message8_M2_M3* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.f_3)
  return _msg;
}
inline void Message8_M2::set_allocated_f_3(::fleetbench::proto::Message8_M2_M3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M3*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.f_3)
}

// repeated .fleetbench.proto.Message8.M2.M5 f_5 = 6;
inline int Message8_M2::_internal_f_5_size() const {
  return _internal_f_5().size();
}
inline int Message8_M2::f_5_size() const {
  return _internal_f_5_size();
}
inline void Message8_M2::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.Clear();
}
inline ::fleetbench::proto::Message8_M2_M5* Message8_M2::mutable_f_5(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.f_5)
  return _internal_mutable_f_5()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>* Message8_M2::mutable_f_5()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.M2.f_5)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_5();
}
inline const ::fleetbench::proto::Message8_M2_M5& Message8_M2::f_5(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_5)
  return _internal_f_5().Get(index);
}
inline ::fleetbench::proto::Message8_M2_M5* Message8_M2::add_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M2_M5* _add = _internal_mutable_f_5()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.M2.f_5)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>& Message8_M2::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.M2.f_5)
  return _internal_f_5();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>&
Message8_M2::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M2_M5>*
Message8_M2::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_5_;
}

// optional .fleetbench.proto.Message8.M2.M6 f_6 = 7;
inline bool Message8_M2::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message8_M2::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message8_M2_M6& Message8_M2::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M6* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M6&>(::fleetbench::proto::_Message8_M2_M6_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M6& Message8_M2::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_6)
  return _internal_f_6();
}
inline void Message8_M2::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message8_M2_M6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.f_6)
}
inline ::fleetbench::proto::Message8_M2_M6* Message8_M2::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M2_M6* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M6* Message8_M2::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.f_6)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message8_M2_M6* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M6* Message8_M2::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M6>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message8_M2_M6* Message8_M2::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message8_M2_M6* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.f_6)
  return _msg;
}
inline void Message8_M2::set_allocated_f_6(::fleetbench::proto::Message8_M2_M6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M6*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.f_6)
}

// optional .fleetbench.proto.Message8.M2.M7 f_7 = 8;
inline bool Message8_M2::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message8_M2::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message8_M2_M7& Message8_M2::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M7* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M7&>(::fleetbench::proto::_Message8_M2_M7_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M7& Message8_M2::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_7)
  return _internal_f_7();
}
inline void Message8_M2::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message8_M2_M7* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M7*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.f_7)
}
inline ::fleetbench::proto::Message8_M2_M7* Message8_M2::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M2_M7* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M7* Message8_M2::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.f_7)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message8_M2_M7* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M7* Message8_M2::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M7>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M7*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message8_M2_M7* Message8_M2::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message8_M2_M7* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.f_7)
  return _msg;
}
inline void Message8_M2::set_allocated_f_7(::fleetbench::proto::Message8_M2_M7* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M7*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.f_7)
}

// optional .fleetbench.proto.Message8.M2.M8 f_8 = 9;
inline bool Message8_M2::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message8_M2::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message8_M2_M8& Message8_M2::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M8* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M8&>(::fleetbench::proto::_Message8_M2_M8_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M8& Message8_M2::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_8)
  return _internal_f_8();
}
inline void Message8_M2::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message8_M2_M8* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M8*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.f_8)
}
inline ::fleetbench::proto::Message8_M2_M8* Message8_M2::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message8_M2_M8* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M8* Message8_M2::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.f_8)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message8_M2_M8* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M8* Message8_M2::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M8>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M8*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message8_M2_M8* Message8_M2::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message8_M2_M8* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.f_8)
  return _msg;
}
inline void Message8_M2::set_allocated_f_8(::fleetbench::proto::Message8_M2_M8* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M8*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.f_8)
}

// optional .fleetbench.proto.Message8.M2.M10 f_9 = 10;
inline bool Message8_M2::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_9_ != nullptr);
  return value;
}
inline void Message8_M2::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ != nullptr) _impl_.f_9_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message8_M2_M10& Message8_M2::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2_M10* p = _impl_.f_9_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2_M10&>(::fleetbench::proto::_Message8_M2_M10_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2_M10& Message8_M2::f_9() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.M2.f_9)
  return _internal_f_9();
}
inline void Message8_M2::unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message8_M2_M10* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_9_);
  }
  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M10*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.M2.f_9)
}
inline ::fleetbench::proto::Message8_M2_M10* Message8_M2::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message8_M2_M10* released = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2_M10* Message8_M2::unsafe_arena_release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.M2.f_9)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message8_M2_M10* temp = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2_M10* Message8_M2::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2_M10>(GetArena());
    _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M10*>(p);
  }
  return _impl_.f_9_;
}
inline ::fleetbench::proto::Message8_M2_M10* Message8_M2::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message8_M2_M10* _msg = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.M2.f_9)
  return _msg;
}
inline void Message8_M2::set_allocated_f_9(::fleetbench::proto::Message8_M2_M10* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_9_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message8_M2_M10*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.M2.f_9)
}

// -------------------------------------------------------------------

// Message8

// optional uint64 f_0 = 2;
inline bool Message8::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message8::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message8::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_0)
  return _internal_f_0();
}
inline void Message8::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.f_0)
}
inline ::uint64_t Message8::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message8::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional uint64 f_1 = 3;
inline bool Message8::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message8::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint64_t Message8::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_1)
  return _internal_f_1();
}
inline void Message8::set_f_1(::uint64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.f_1)
}
inline ::uint64_t Message8::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message8::_internal_set_f_1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional bool f_2 = 6;
inline bool Message8::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message8::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message8::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_2)
  return _internal_f_2();
}
inline void Message8::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.f_2)
}
inline bool Message8::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message8::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int32 f_3 = 8;
inline bool Message8::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message8::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message8::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_3)
  return _internal_f_3();
}
inline void Message8::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.f_3)
}
inline ::int32_t Message8::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message8::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional double f_4 = 9;
inline bool Message8::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message8::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Message8::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_4)
  return _internal_f_4();
}
inline void Message8::set_f_4(double value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.f_4)
}
inline double Message8::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message8::_internal_set_f_4(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 10;
inline bool Message8::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message8::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message8::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_5)
  return _internal_f_5();
}
inline void Message8::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message8.f_5)
}
inline ::int64_t Message8::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message8::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// repeated .fleetbench.proto.Message8.M1 f_10 = 11;
inline int Message8::_internal_f_10_size() const {
  return _internal_f_10().size();
}
inline int Message8::f_10_size() const {
  return _internal_f_10_size();
}
inline void Message8::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.Clear();
}
inline ::fleetbench::proto::Message8_M1* Message8::mutable_f_10(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.f_10)
  return _internal_mutable_f_10()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>* Message8::mutable_f_10()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message8.f_10)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_10();
}
inline const ::fleetbench::proto::Message8_M1& Message8::f_10(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_10)
  return _internal_f_10().Get(index);
}
inline ::fleetbench::proto::Message8_M1* Message8::add_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message8_M1* _add = _internal_mutable_f_10()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message8.f_10)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>& Message8::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message8.f_10)
  return _internal_f_10();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>&
Message8::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message8_M1>*
Message8::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_10_;
}

// optional .fleetbench.proto.Message8.M2 f_11 = 12;
inline bool Message8::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_11_ != nullptr);
  return value;
}
inline void Message8::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ != nullptr) _impl_.f_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message8_M2& Message8::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message8_M2* p = _impl_.f_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message8_M2&>(::fleetbench::proto::_Message8_M2_default_instance_);
}
inline const ::fleetbench::proto::Message8_M2& Message8::f_11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message8.f_11)
  return _internal_f_11();
}
inline void Message8::unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message8_M2* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_11_);
  }
  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message8_M2*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message8.f_11)
}
inline ::fleetbench::proto::Message8_M2* Message8::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2* released = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message8_M2* Message8::unsafe_arena_release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message8.f_11)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message8_M2* temp = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message8_M2* Message8::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message8_M2>(GetArena());
    _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message8_M2*>(p);
  }
  return _impl_.f_11_;
}
inline ::fleetbench::proto::Message8_M2* Message8::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message8_M2* _msg = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message8.f_11)
  return _msg;
}
inline void Message8::set_allocated_f_11(::fleetbench::proto::Message8_M2* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message8_M2*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message8.f_11)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace fleetbench


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M20_M46_E11_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E35_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E36_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E37_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E38_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E39_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E40_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E41_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E42_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E43_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E44_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E45_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E46_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E47_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E48_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E49_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E50_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E51_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E52_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E53_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E54_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E55_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E56_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E57_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E58_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_M83_M88_M90_M91_M92_M93_E59_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M81_E30_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E31_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E32_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M75_M82_E33_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_M80_M85_E34_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E21_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E22_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E23_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E24_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E25_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E26_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E27_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E28_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_M48_M73_M79_E29_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9>() {
  return ::fleetbench::proto::Message8_M1_M4_M15_M23_M40_E9_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8>() {
  return ::fleetbench::proto::Message8_M1_M11_M14_M27_M32_E8_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M11_M14_E4> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M11_M14_E4>() {
  return ::fleetbench::proto::Message8_M1_M11_M14_E4_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M1_M11_M14_E5> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M1_M11_M14_E5>() {
  return ::fleetbench::proto::Message8_M1_M11_M14_E5_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20>() {
  return ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_M72_E20_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13>() {
  return ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M50_E13_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17>() {
  return ::fleetbench::proto::Message8_M2_M5_M13_M17_M29_M61_E17_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12>() {
  return ::fleetbench::proto::Message8_M2_M5_M13_M26_M47_E12_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M21_E6> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M21_E6>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M21_E6_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E14_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E15_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M54_E16_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M62_E18_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M24_M35_M63_E19_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M24_M43_E10_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_M24_E7> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_M24_E7>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_M24_E7_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M6_M12_E3> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M6_M12_E3>() {
  return ::fleetbench::proto::Message8_M2_M6_M12_E3_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M10_E1> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M10_E1>() {
  return ::fleetbench::proto::Message8_M2_M10_E1_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message8_M2_M10_E2> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message8_M2_M10_E2>() {
  return ::fleetbench::proto::Message8_M2_M10_E2_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage8_2eproto_2epb_2eh
