// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protos/Message4.proto
// Protobuf C++ Version: 5.27.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage4_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage4_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5027000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_protos_2fMessage4_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fMessage4_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_protos_2fMessage4_2eproto;
namespace fleetbench {
namespace proto {
class Message4;
struct Message4DefaultTypeInternal;
extern Message4DefaultTypeInternal _Message4_default_instance_;
class Message4_M1;
struct Message4_M1DefaultTypeInternal;
extern Message4_M1DefaultTypeInternal _Message4_M1_default_instance_;
class Message4_M1_M13;
struct Message4_M1_M13DefaultTypeInternal;
extern Message4_M1_M13DefaultTypeInternal _Message4_M1_M13_default_instance_;
class Message4_M2;
struct Message4_M2DefaultTypeInternal;
extern Message4_M2DefaultTypeInternal _Message4_M2_default_instance_;
class Message4_M3;
struct Message4_M3DefaultTypeInternal;
extern Message4_M3DefaultTypeInternal _Message4_M3_default_instance_;
class Message4_M3_M9;
struct Message4_M3_M9DefaultTypeInternal;
extern Message4_M3_M9DefaultTypeInternal _Message4_M3_M9_default_instance_;
class Message4_M3_M9_M21;
struct Message4_M3_M9_M21DefaultTypeInternal;
extern Message4_M3_M9_M21DefaultTypeInternal _Message4_M3_M9_M21_default_instance_;
class Message4_M3_M9_M25;
struct Message4_M3_M9_M25DefaultTypeInternal;
extern Message4_M3_M9_M25DefaultTypeInternal _Message4_M3_M9_M25_default_instance_;
class Message4_M3_M9_M25_M38;
struct Message4_M3_M9_M25_M38DefaultTypeInternal;
extern Message4_M3_M9_M25_M38DefaultTypeInternal _Message4_M3_M9_M25_M38_default_instance_;
class Message4_M3_M9_M25_M38_M45;
struct Message4_M3_M9_M25_M38_M45DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M45DefaultTypeInternal _Message4_M3_M9_M25_M38_M45_default_instance_;
class Message4_M3_M9_M25_M38_M47;
struct Message4_M3_M9_M25_M38_M47DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M47DefaultTypeInternal _Message4_M3_M9_M25_M38_M47_default_instance_;
class Message4_M3_M9_M25_M38_M47_M53;
struct Message4_M3_M9_M25_M38_M47_M53DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M47_M53DefaultTypeInternal _Message4_M3_M9_M25_M38_M47_M53_default_instance_;
class Message4_M3_M9_M25_M38_M47_M53_M71;
struct Message4_M3_M9_M25_M38_M47_M53_M71DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M47_M53_M71DefaultTypeInternal _Message4_M3_M9_M25_M38_M47_M53_M71_default_instance_;
class Message4_M3_M9_M25_M38_M47_M53_M71_M74;
struct Message4_M3_M9_M25_M38_M47_M53_M71_M74DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M47_M53_M71_M74DefaultTypeInternal _Message4_M3_M9_M25_M38_M47_M53_M71_M74_default_instance_;
class Message4_M3_M9_M25_M38_M47_M60;
struct Message4_M3_M9_M25_M38_M47_M60DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M47_M60DefaultTypeInternal _Message4_M3_M9_M25_M38_M47_M60_default_instance_;
class Message4_M3_M9_M25_M38_M47_M60_M67;
struct Message4_M3_M9_M25_M38_M47_M60_M67DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M47_M60_M67DefaultTypeInternal _Message4_M3_M9_M25_M38_M47_M60_M67_default_instance_;
class Message4_M3_M9_M25_M38_M48;
struct Message4_M3_M9_M25_M38_M48DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M48DefaultTypeInternal _Message4_M3_M9_M25_M38_M48_default_instance_;
class Message4_M3_M9_M25_M38_M49;
struct Message4_M3_M9_M25_M38_M49DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M49DefaultTypeInternal _Message4_M3_M9_M25_M38_M49_default_instance_;
class Message4_M3_M9_M25_M38_M49_M59;
struct Message4_M3_M9_M25_M38_M49_M59DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M49_M59DefaultTypeInternal _Message4_M3_M9_M25_M38_M49_M59_default_instance_;
class Message4_M3_M9_M25_M38_M49_M64;
struct Message4_M3_M9_M25_M38_M49_M64DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M49_M64DefaultTypeInternal _Message4_M3_M9_M25_M38_M49_M64_default_instance_;
class Message4_M3_M9_M25_M38_M49_M65;
struct Message4_M3_M9_M25_M38_M49_M65DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M49_M65DefaultTypeInternal _Message4_M3_M9_M25_M38_M49_M65_default_instance_;
class Message4_M3_M9_M25_M38_M49_M65_M69;
struct Message4_M3_M9_M25_M38_M49_M65_M69DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M49_M65_M69DefaultTypeInternal _Message4_M3_M9_M25_M38_M49_M65_M69_default_instance_;
class Message4_M3_M9_M25_M38_M49_M65_M69_M72;
struct Message4_M3_M9_M25_M38_M49_M65_M69_M72DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M49_M65_M69_M72DefaultTypeInternal _Message4_M3_M9_M25_M38_M49_M65_M69_M72_default_instance_;
class Message4_M3_M9_M25_M38_M49_M65_M69_M75;
struct Message4_M3_M9_M25_M38_M49_M65_M69_M75DefaultTypeInternal;
extern Message4_M3_M9_M25_M38_M49_M65_M69_M75DefaultTypeInternal _Message4_M3_M9_M25_M38_M49_M65_M69_M75_default_instance_;
class Message4_M4;
struct Message4_M4DefaultTypeInternal;
extern Message4_M4DefaultTypeInternal _Message4_M4_default_instance_;
class Message4_M4_M12;
struct Message4_M4_M12DefaultTypeInternal;
extern Message4_M4_M12DefaultTypeInternal _Message4_M4_M12_default_instance_;
class Message4_M4_M12_M23;
struct Message4_M4_M12_M23DefaultTypeInternal;
extern Message4_M4_M12_M23DefaultTypeInternal _Message4_M4_M12_M23_default_instance_;
class Message4_M4_M12_M23_M37;
struct Message4_M4_M12_M23_M37DefaultTypeInternal;
extern Message4_M4_M12_M23_M37DefaultTypeInternal _Message4_M4_M12_M23_M37_default_instance_;
class Message4_M5;
struct Message4_M5DefaultTypeInternal;
extern Message4_M5DefaultTypeInternal _Message4_M5_default_instance_;
class Message4_M5_M10;
struct Message4_M5_M10DefaultTypeInternal;
extern Message4_M5_M10DefaultTypeInternal _Message4_M5_M10_default_instance_;
class Message4_M5_M17;
struct Message4_M5_M17DefaultTypeInternal;
extern Message4_M5_M17DefaultTypeInternal _Message4_M5_M17_default_instance_;
class Message4_M6;
struct Message4_M6DefaultTypeInternal;
extern Message4_M6DefaultTypeInternal _Message4_M6_default_instance_;
class Message4_M6_M11;
struct Message4_M6_M11DefaultTypeInternal;
extern Message4_M6_M11DefaultTypeInternal _Message4_M6_M11_default_instance_;
class Message4_M6_M19;
struct Message4_M6_M19DefaultTypeInternal;
extern Message4_M6_M19DefaultTypeInternal _Message4_M6_M19_default_instance_;
class Message4_M6_M19_M20;
struct Message4_M6_M19_M20DefaultTypeInternal;
extern Message4_M6_M19_M20DefaultTypeInternal _Message4_M6_M19_M20_default_instance_;
class Message4_M6_M19_M24;
struct Message4_M6_M19_M24DefaultTypeInternal;
extern Message4_M6_M19_M24DefaultTypeInternal _Message4_M6_M19_M24_default_instance_;
class Message4_M6_M19_M24_M33;
struct Message4_M6_M19_M24_M33DefaultTypeInternal;
extern Message4_M6_M19_M24_M33DefaultTypeInternal _Message4_M6_M19_M24_M33_default_instance_;
class Message4_M6_M19_M24_M33_M44;
struct Message4_M6_M19_M24_M33_M44DefaultTypeInternal;
extern Message4_M6_M19_M24_M33_M44DefaultTypeInternal _Message4_M6_M19_M24_M33_M44_default_instance_;
class Message4_M6_M19_M24_M33_M44_M55;
struct Message4_M6_M19_M24_M33_M44_M55DefaultTypeInternal;
extern Message4_M6_M19_M24_M33_M44_M55DefaultTypeInternal _Message4_M6_M19_M24_M33_M44_M55_default_instance_;
class Message4_M6_M19_M24_M33_M44_M56;
struct Message4_M6_M19_M24_M33_M44_M56DefaultTypeInternal;
extern Message4_M6_M19_M24_M33_M44_M56DefaultTypeInternal _Message4_M6_M19_M24_M33_M44_M56_default_instance_;
class Message4_M6_M19_M24_M33_M50;
struct Message4_M6_M19_M24_M33_M50DefaultTypeInternal;
extern Message4_M6_M19_M24_M33_M50DefaultTypeInternal _Message4_M6_M19_M24_M33_M50_default_instance_;
class Message4_M6_M19_M24_M33_M50_M63;
struct Message4_M6_M19_M24_M33_M50_M63DefaultTypeInternal;
extern Message4_M6_M19_M24_M33_M50_M63DefaultTypeInternal _Message4_M6_M19_M24_M33_M50_M63_default_instance_;
class Message4_M6_M19_M26;
struct Message4_M6_M19_M26DefaultTypeInternal;
extern Message4_M6_M19_M26DefaultTypeInternal _Message4_M6_M19_M26_default_instance_;
class Message4_M6_M19_M27;
struct Message4_M6_M19_M27DefaultTypeInternal;
extern Message4_M6_M19_M27DefaultTypeInternal _Message4_M6_M19_M27_default_instance_;
class Message4_M6_M19_M27_M31;
struct Message4_M6_M19_M27_M31DefaultTypeInternal;
extern Message4_M6_M19_M27_M31DefaultTypeInternal _Message4_M6_M19_M27_M31_default_instance_;
class Message4_M6_M19_M27_M31_M42;
struct Message4_M6_M19_M27_M31_M42DefaultTypeInternal;
extern Message4_M6_M19_M27_M31_M42DefaultTypeInternal _Message4_M6_M19_M27_M31_M42_default_instance_;
class Message4_M6_M19_M27_M31_M42_M54;
struct Message4_M6_M19_M27_M31_M42_M54DefaultTypeInternal;
extern Message4_M6_M19_M27_M31_M42_M54DefaultTypeInternal _Message4_M6_M19_M27_M31_M42_M54_default_instance_;
class Message4_M6_M19_M30;
struct Message4_M6_M19_M30DefaultTypeInternal;
extern Message4_M6_M19_M30DefaultTypeInternal _Message4_M6_M19_M30_default_instance_;
class Message4_M6_M19_M30_M32;
struct Message4_M6_M19_M30_M32DefaultTypeInternal;
extern Message4_M6_M19_M30_M32DefaultTypeInternal _Message4_M6_M19_M30_M32_default_instance_;
class Message4_M6_M19_M30_M39;
struct Message4_M6_M19_M30_M39DefaultTypeInternal;
extern Message4_M6_M19_M30_M39DefaultTypeInternal _Message4_M6_M19_M30_M39_default_instance_;
class Message4_M7;
struct Message4_M7DefaultTypeInternal;
extern Message4_M7DefaultTypeInternal _Message4_M7_default_instance_;
class Message4_M7_M14;
struct Message4_M7_M14DefaultTypeInternal;
extern Message4_M7_M14DefaultTypeInternal _Message4_M7_M14_default_instance_;
class Message4_M7_M14_M29;
struct Message4_M7_M14_M29DefaultTypeInternal;
extern Message4_M7_M14_M29DefaultTypeInternal _Message4_M7_M14_M29_default_instance_;
class Message4_M7_M14_M29_M34;
struct Message4_M7_M14_M29_M34DefaultTypeInternal;
extern Message4_M7_M14_M29_M34DefaultTypeInternal _Message4_M7_M14_M29_M34_default_instance_;
class Message4_M7_M14_M29_M34_M41;
struct Message4_M7_M14_M29_M34_M41DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58;
struct Message4_M7_M14_M29_M34_M41_M58DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66;
struct Message4_M7_M14_M29_M34_M41_M58_M66DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91_default_instance_;
class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92;
struct Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92_default_instance_;
class Message4_M7_M14_M29_M34_M41_M61;
struct Message4_M7_M14_M29_M34_M41_M61DefaultTypeInternal;
extern Message4_M7_M14_M29_M34_M41_M61DefaultTypeInternal _Message4_M7_M14_M29_M34_M41_M61_default_instance_;
class Message4_M7_M15;
struct Message4_M7_M15DefaultTypeInternal;
extern Message4_M7_M15DefaultTypeInternal _Message4_M7_M15_default_instance_;
class Message4_M7_M16;
struct Message4_M7_M16DefaultTypeInternal;
extern Message4_M7_M16DefaultTypeInternal _Message4_M7_M16_default_instance_;
class Message4_M7_M16_M28;
struct Message4_M7_M16_M28DefaultTypeInternal;
extern Message4_M7_M16_M28DefaultTypeInternal _Message4_M7_M16_M28_default_instance_;
class Message4_M7_M16_M28_M35;
struct Message4_M7_M16_M28_M35DefaultTypeInternal;
extern Message4_M7_M16_M28_M35DefaultTypeInternal _Message4_M7_M16_M28_M35_default_instance_;
class Message4_M7_M16_M28_M35_M40;
struct Message4_M7_M16_M28_M35_M40DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M40DefaultTypeInternal _Message4_M7_M16_M28_M35_M40_default_instance_;
class Message4_M7_M16_M28_M35_M43;
struct Message4_M7_M16_M28_M35_M43DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M43DefaultTypeInternal _Message4_M7_M16_M28_M35_M43_default_instance_;
class Message4_M7_M16_M28_M35_M43_M62;
struct Message4_M7_M16_M28_M35_M43_M62DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M43_M62DefaultTypeInternal _Message4_M7_M16_M28_M35_M43_M62_default_instance_;
class Message4_M7_M16_M28_M35_M43_M62_M68;
struct Message4_M7_M16_M28_M35_M43_M62_M68DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M43_M62_M68DefaultTypeInternal _Message4_M7_M16_M28_M35_M43_M62_M68_default_instance_;
class Message4_M7_M16_M28_M35_M43_M62_M70;
struct Message4_M7_M16_M28_M35_M43_M62_M70DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M43_M62_M70DefaultTypeInternal _Message4_M7_M16_M28_M35_M43_M62_M70_default_instance_;
class Message4_M7_M16_M28_M35_M46;
struct Message4_M7_M16_M28_M35_M46DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M46DefaultTypeInternal _Message4_M7_M16_M28_M35_M46_default_instance_;
class Message4_M7_M16_M28_M35_M51;
struct Message4_M7_M16_M28_M35_M51DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M51DefaultTypeInternal _Message4_M7_M16_M28_M35_M51_default_instance_;
class Message4_M7_M16_M28_M35_M52;
struct Message4_M7_M16_M28_M35_M52DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M52DefaultTypeInternal _Message4_M7_M16_M28_M35_M52_default_instance_;
class Message4_M7_M16_M28_M35_M52_M57;
struct Message4_M7_M16_M28_M35_M52_M57DefaultTypeInternal;
extern Message4_M7_M16_M28_M35_M52_M57DefaultTypeInternal _Message4_M7_M16_M28_M35_M52_M57_default_instance_;
class Message4_M7_M18;
struct Message4_M7_M18DefaultTypeInternal;
extern Message4_M7_M18DefaultTypeInternal _Message4_M7_M18_default_instance_;
class Message4_M7_M18_M22;
struct Message4_M7_M18_M22DefaultTypeInternal;
extern Message4_M7_M18_M22DefaultTypeInternal _Message4_M7_M18_M22_default_instance_;
class Message4_M7_M18_M22_M36;
struct Message4_M7_M18_M22_M36DefaultTypeInternal;
extern Message4_M7_M18_M22_M36DefaultTypeInternal _Message4_M7_M18_M22_M36_default_instance_;
class Message4_M8;
struct Message4_M8DefaultTypeInternal;
extern Message4_M8DefaultTypeInternal _Message4_M8_default_instance_;
}  // namespace proto
}  // namespace fleetbench
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace fleetbench {
namespace proto {
enum Message4_M3_M9_M25_M38_M45_E18 : int {
  Message4_M3_M9_M25_M38_M45_E18_E18_UNSPECIFIED = 0,
  Message4_M3_M9_M25_M38_M45_E18_E18_CONST_1 = 40,
  Message4_M3_M9_M25_M38_M45_E18_E18_CONST_2 = 74,
  Message4_M3_M9_M25_M38_M45_E18_E18_CONST_3 = 98,
  Message4_M3_M9_M25_M38_M45_E18_E18_CONST_4 = 4,
  Message4_M3_M9_M25_M38_M45_E18_E18_CONST_5 = 28,
};

bool Message4_M3_M9_M25_M38_M45_E18_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_M38_M45_E18_internal_data_[];
constexpr Message4_M3_M9_M25_M38_M45_E18 Message4_M3_M9_M25_M38_M45_E18_E18_MIN = static_cast<Message4_M3_M9_M25_M38_M45_E18>(0);
constexpr Message4_M3_M9_M25_M38_M45_E18 Message4_M3_M9_M25_M38_M45_E18_E18_MAX = static_cast<Message4_M3_M9_M25_M38_M45_E18>(98);
constexpr int Message4_M3_M9_M25_M38_M45_E18_E18_ARRAYSIZE = 98 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_M38_M45_E18_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_M38_M45_E18_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_M38_M45_E18>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E18_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_M38_M45_E18_descriptor(), value);
}
inline bool Message4_M3_M9_M25_M38_M45_E18_Parse(absl::string_view name, Message4_M3_M9_M25_M38_M45_E18* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_M38_M45_E18>(
      Message4_M3_M9_M25_M38_M45_E18_descriptor(), name, value);
}
enum Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 : int {
  Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_UNSPECIFIED = 0,
  Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_1 = 116,
  Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_2 = 48,
  Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_3 = 67,
  Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_4 = 42,
  Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_5 = 110,
};

bool Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_internal_data_[];
constexpr Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_MIN = static_cast<Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26>(0);
constexpr Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_MAX = static_cast<Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26>(116);
constexpr int Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E26_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_descriptor(), value);
}
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_Parse(absl::string_view name, Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26>(
      Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_descriptor(), name, value);
}
enum Message4_M3_M9_M25_M38_M47_M53_M71_E24 : int {
  Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_UNSPECIFIED = 0,
  Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_1 = 77,
  Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_2 = 60,
  Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_3 = 56,
  Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_4 = 104,
  Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_5 = 125,
};

bool Message4_M3_M9_M25_M38_M47_M53_M71_E24_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_M38_M47_M53_M71_E24_internal_data_[];
constexpr Message4_M3_M9_M25_M38_M47_M53_M71_E24 Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_MIN = static_cast<Message4_M3_M9_M25_M38_M47_M53_M71_E24>(0);
constexpr Message4_M3_M9_M25_M38_M47_M53_M71_E24 Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_MAX = static_cast<Message4_M3_M9_M25_M38_M47_M53_M71_E24>(125);
constexpr int Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_M38_M47_M53_M71_E24_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_M38_M47_M53_M71_E24_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_M38_M47_M53_M71_E24>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E24_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_M38_M47_M53_M71_E24_descriptor(), value);
}
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_E24_Parse(absl::string_view name, Message4_M3_M9_M25_M38_M47_M53_M71_E24* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_M38_M47_M53_M71_E24>(
      Message4_M3_M9_M25_M38_M47_M53_M71_E24_descriptor(), name, value);
}
enum Message4_M3_M9_M25_M38_M47_M53_M71_E25 : int {
  Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_UNSPECIFIED = 0,
  Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_1 = 71,
  Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_2 = 51,
  Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_3 = 53,
  Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_4 = 118,
  Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_5 = 124,
};

bool Message4_M3_M9_M25_M38_M47_M53_M71_E25_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_M38_M47_M53_M71_E25_internal_data_[];
constexpr Message4_M3_M9_M25_M38_M47_M53_M71_E25 Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_MIN = static_cast<Message4_M3_M9_M25_M38_M47_M53_M71_E25>(0);
constexpr Message4_M3_M9_M25_M38_M47_M53_M71_E25 Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_MAX = static_cast<Message4_M3_M9_M25_M38_M47_M53_M71_E25>(124);
constexpr int Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_ARRAYSIZE = 124 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_M38_M47_M53_M71_E25_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_M38_M47_M53_M71_E25_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_M38_M47_M53_M71_E25>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E25_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_M38_M47_M53_M71_E25_descriptor(), value);
}
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_E25_Parse(absl::string_view name, Message4_M3_M9_M25_M38_M47_M53_M71_E25* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_M38_M47_M53_M71_E25>(
      Message4_M3_M9_M25_M38_M47_M53_M71_E25_descriptor(), name, value);
}
enum Message4_M3_M9_M25_M38_M49_M59_E20 : int {
  Message4_M3_M9_M25_M38_M49_M59_E20_E20_UNSPECIFIED = 0,
  Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_1 = 73,
  Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_2 = 6,
  Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_3 = 80,
  Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_4 = 84,
  Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_5 = 33,
};

bool Message4_M3_M9_M25_M38_M49_M59_E20_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_M38_M49_M59_E20_internal_data_[];
constexpr Message4_M3_M9_M25_M38_M49_M59_E20 Message4_M3_M9_M25_M38_M49_M59_E20_E20_MIN = static_cast<Message4_M3_M9_M25_M38_M49_M59_E20>(0);
constexpr Message4_M3_M9_M25_M38_M49_M59_E20 Message4_M3_M9_M25_M38_M49_M59_E20_E20_MAX = static_cast<Message4_M3_M9_M25_M38_M49_M59_E20>(84);
constexpr int Message4_M3_M9_M25_M38_M49_M59_E20_E20_ARRAYSIZE = 84 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_M38_M49_M59_E20_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_M38_M49_M59_E20_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_M38_M49_M59_E20>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E20_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_M38_M49_M59_E20_descriptor(), value);
}
inline bool Message4_M3_M9_M25_M38_M49_M59_E20_Parse(absl::string_view name, Message4_M3_M9_M25_M38_M49_M59_E20* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_M38_M49_M59_E20>(
      Message4_M3_M9_M25_M38_M49_M59_E20_descriptor(), name, value);
}
enum Message4_M3_M9_M25_M38_M49_M65_E22 : int {
  Message4_M3_M9_M25_M38_M49_M65_E22_E22_UNSPECIFIED = 0,
  Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_1 = 11,
  Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_2 = 126,
  Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_3 = 86,
  Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_4 = 56,
  Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_5 = 61,
};

bool Message4_M3_M9_M25_M38_M49_M65_E22_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_M38_M49_M65_E22_internal_data_[];
constexpr Message4_M3_M9_M25_M38_M49_M65_E22 Message4_M3_M9_M25_M38_M49_M65_E22_E22_MIN = static_cast<Message4_M3_M9_M25_M38_M49_M65_E22>(0);
constexpr Message4_M3_M9_M25_M38_M49_M65_E22 Message4_M3_M9_M25_M38_M49_M65_E22_E22_MAX = static_cast<Message4_M3_M9_M25_M38_M49_M65_E22>(126);
constexpr int Message4_M3_M9_M25_M38_M49_M65_E22_E22_ARRAYSIZE = 126 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_M38_M49_M65_E22_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_M38_M49_M65_E22_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_M38_M49_M65_E22>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E22_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_M38_M49_M65_E22_descriptor(), value);
}
inline bool Message4_M3_M9_M25_M38_M49_M65_E22_Parse(absl::string_view name, Message4_M3_M9_M25_M38_M49_M65_E22* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_M38_M49_M65_E22>(
      Message4_M3_M9_M25_M38_M49_M65_E22_descriptor(), name, value);
}
enum Message4_M3_M9_M25_M38_M49_M65_E23 : int {
  Message4_M3_M9_M25_M38_M49_M65_E23_E23_UNSPECIFIED = 0,
  Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_1 = 106,
  Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_2 = 41,
  Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_3 = 3,
  Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_4 = 40,
  Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_5 = 28,
};

bool Message4_M3_M9_M25_M38_M49_M65_E23_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_M38_M49_M65_E23_internal_data_[];
constexpr Message4_M3_M9_M25_M38_M49_M65_E23 Message4_M3_M9_M25_M38_M49_M65_E23_E23_MIN = static_cast<Message4_M3_M9_M25_M38_M49_M65_E23>(0);
constexpr Message4_M3_M9_M25_M38_M49_M65_E23 Message4_M3_M9_M25_M38_M49_M65_E23_E23_MAX = static_cast<Message4_M3_M9_M25_M38_M49_M65_E23>(106);
constexpr int Message4_M3_M9_M25_M38_M49_M65_E23_E23_ARRAYSIZE = 106 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_M38_M49_M65_E23_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_M38_M49_M65_E23_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_M38_M49_M65_E23>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E23_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_M38_M49_M65_E23_descriptor(), value);
}
inline bool Message4_M3_M9_M25_M38_M49_M65_E23_Parse(absl::string_view name, Message4_M3_M9_M25_M38_M49_M65_E23* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_M38_M49_M65_E23>(
      Message4_M3_M9_M25_M38_M49_M65_E23_descriptor(), name, value);
}
enum Message4_M3_M9_M25_E11 : int {
  Message4_M3_M9_M25_E11_E11_UNSPECIFIED = 0,
  Message4_M3_M9_M25_E11_E11_CONST_1 = 67,
  Message4_M3_M9_M25_E11_E11_CONST_2 = 96,
  Message4_M3_M9_M25_E11_E11_CONST_3 = 43,
  Message4_M3_M9_M25_E11_E11_CONST_4 = 24,
  Message4_M3_M9_M25_E11_E11_CONST_5 = 25,
};

bool Message4_M3_M9_M25_E11_IsValid(int value);
extern const uint32_t Message4_M3_M9_M25_E11_internal_data_[];
constexpr Message4_M3_M9_M25_E11 Message4_M3_M9_M25_E11_E11_MIN = static_cast<Message4_M3_M9_M25_E11>(0);
constexpr Message4_M3_M9_M25_E11 Message4_M3_M9_M25_E11_E11_MAX = static_cast<Message4_M3_M9_M25_E11>(96);
constexpr int Message4_M3_M9_M25_E11_E11_ARRAYSIZE = 96 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M3_M9_M25_E11_descriptor();
template <typename T>
const std::string& Message4_M3_M9_M25_E11_Name(T value) {
  static_assert(std::is_same<T, Message4_M3_M9_M25_E11>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E11_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M3_M9_M25_E11_descriptor(), value);
}
inline bool Message4_M3_M9_M25_E11_Parse(absl::string_view name, Message4_M3_M9_M25_E11* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M3_M9_M25_E11>(
      Message4_M3_M9_M25_E11_descriptor(), name, value);
}
enum Message4_M5_M17_E5 : int {
  Message4_M5_M17_E5_E5_UNSPECIFIED = 0,
  Message4_M5_M17_E5_E5_CONST_1 = 18,
  Message4_M5_M17_E5_E5_CONST_2 = 94,
  Message4_M5_M17_E5_E5_CONST_3 = 114,
  Message4_M5_M17_E5_E5_CONST_4 = 103,
  Message4_M5_M17_E5_E5_CONST_5 = 122,
};

bool Message4_M5_M17_E5_IsValid(int value);
extern const uint32_t Message4_M5_M17_E5_internal_data_[];
constexpr Message4_M5_M17_E5 Message4_M5_M17_E5_E5_MIN = static_cast<Message4_M5_M17_E5>(0);
constexpr Message4_M5_M17_E5 Message4_M5_M17_E5_E5_MAX = static_cast<Message4_M5_M17_E5>(122);
constexpr int Message4_M5_M17_E5_E5_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M5_M17_E5_descriptor();
template <typename T>
const std::string& Message4_M5_M17_E5_Name(T value) {
  static_assert(std::is_same<T, Message4_M5_M17_E5>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E5_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M5_M17_E5_descriptor(), value);
}
inline bool Message4_M5_M17_E5_Parse(absl::string_view name, Message4_M5_M17_E5* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M5_M17_E5>(
      Message4_M5_M17_E5_descriptor(), name, value);
}
enum Message4_M5_M17_E6 : int {
  Message4_M5_M17_E6_E6_UNSPECIFIED = 0,
  Message4_M5_M17_E6_E6_CONST_1 = 116,
  Message4_M5_M17_E6_E6_CONST_2 = 94,
  Message4_M5_M17_E6_E6_CONST_3 = 89,
  Message4_M5_M17_E6_E6_CONST_4 = 11,
  Message4_M5_M17_E6_E6_CONST_5 = 9,
};

bool Message4_M5_M17_E6_IsValid(int value);
extern const uint32_t Message4_M5_M17_E6_internal_data_[];
constexpr Message4_M5_M17_E6 Message4_M5_M17_E6_E6_MIN = static_cast<Message4_M5_M17_E6>(0);
constexpr Message4_M5_M17_E6 Message4_M5_M17_E6_E6_MAX = static_cast<Message4_M5_M17_E6>(116);
constexpr int Message4_M5_M17_E6_E6_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M5_M17_E6_descriptor();
template <typename T>
const std::string& Message4_M5_M17_E6_Name(T value) {
  static_assert(std::is_same<T, Message4_M5_M17_E6>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E6_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M5_M17_E6_descriptor(), value);
}
inline bool Message4_M5_M17_E6_Parse(absl::string_view name, Message4_M5_M17_E6* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M5_M17_E6>(
      Message4_M5_M17_E6_descriptor(), name, value);
}
enum Message4_M5_M17_E7 : int {
  Message4_M5_M17_E7_E7_UNSPECIFIED = 0,
  Message4_M5_M17_E7_E7_CONST_1 = 4,
  Message4_M5_M17_E7_E7_CONST_2 = 36,
  Message4_M5_M17_E7_E7_CONST_3 = 121,
  Message4_M5_M17_E7_E7_CONST_4 = 96,
  Message4_M5_M17_E7_E7_CONST_5 = 70,
};

bool Message4_M5_M17_E7_IsValid(int value);
extern const uint32_t Message4_M5_M17_E7_internal_data_[];
constexpr Message4_M5_M17_E7 Message4_M5_M17_E7_E7_MIN = static_cast<Message4_M5_M17_E7>(0);
constexpr Message4_M5_M17_E7 Message4_M5_M17_E7_E7_MAX = static_cast<Message4_M5_M17_E7>(121);
constexpr int Message4_M5_M17_E7_E7_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M5_M17_E7_descriptor();
template <typename T>
const std::string& Message4_M5_M17_E7_Name(T value) {
  static_assert(std::is_same<T, Message4_M5_M17_E7>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E7_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M5_M17_E7_descriptor(), value);
}
inline bool Message4_M5_M17_E7_Parse(absl::string_view name, Message4_M5_M17_E7* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M5_M17_E7>(
      Message4_M5_M17_E7_descriptor(), name, value);
}
enum Message4_M6_M19_M20_E9 : int {
  Message4_M6_M19_M20_E9_E9_UNSPECIFIED = 0,
  Message4_M6_M19_M20_E9_E9_CONST_1 = 55,
  Message4_M6_M19_M20_E9_E9_CONST_2 = 97,
  Message4_M6_M19_M20_E9_E9_CONST_3 = 40,
  Message4_M6_M19_M20_E9_E9_CONST_4 = 45,
  Message4_M6_M19_M20_E9_E9_CONST_5 = 9,
};

bool Message4_M6_M19_M20_E9_IsValid(int value);
extern const uint32_t Message4_M6_M19_M20_E9_internal_data_[];
constexpr Message4_M6_M19_M20_E9 Message4_M6_M19_M20_E9_E9_MIN = static_cast<Message4_M6_M19_M20_E9>(0);
constexpr Message4_M6_M19_M20_E9 Message4_M6_M19_M20_E9_E9_MAX = static_cast<Message4_M6_M19_M20_E9>(97);
constexpr int Message4_M6_M19_M20_E9_E9_ARRAYSIZE = 97 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M6_M19_M20_E9_descriptor();
template <typename T>
const std::string& Message4_M6_M19_M20_E9_Name(T value) {
  static_assert(std::is_same<T, Message4_M6_M19_M20_E9>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E9_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M6_M19_M20_E9_descriptor(), value);
}
inline bool Message4_M6_M19_M20_E9_Parse(absl::string_view name, Message4_M6_M19_M20_E9* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M6_M19_M20_E9>(
      Message4_M6_M19_M20_E9_descriptor(), name, value);
}
enum Message4_M6_M19_M20_E10 : int {
  Message4_M6_M19_M20_E10_E10_UNSPECIFIED = 0,
  Message4_M6_M19_M20_E10_E10_CONST_1 = 125,
  Message4_M6_M19_M20_E10_E10_CONST_2 = 83,
  Message4_M6_M19_M20_E10_E10_CONST_3 = 63,
  Message4_M6_M19_M20_E10_E10_CONST_4 = 14,
  Message4_M6_M19_M20_E10_E10_CONST_5 = 75,
};

bool Message4_M6_M19_M20_E10_IsValid(int value);
extern const uint32_t Message4_M6_M19_M20_E10_internal_data_[];
constexpr Message4_M6_M19_M20_E10 Message4_M6_M19_M20_E10_E10_MIN = static_cast<Message4_M6_M19_M20_E10>(0);
constexpr Message4_M6_M19_M20_E10 Message4_M6_M19_M20_E10_E10_MAX = static_cast<Message4_M6_M19_M20_E10>(125);
constexpr int Message4_M6_M19_M20_E10_E10_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M6_M19_M20_E10_descriptor();
template <typename T>
const std::string& Message4_M6_M19_M20_E10_Name(T value) {
  static_assert(std::is_same<T, Message4_M6_M19_M20_E10>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E10_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M6_M19_M20_E10_descriptor(), value);
}
inline bool Message4_M6_M19_M20_E10_Parse(absl::string_view name, Message4_M6_M19_M20_E10* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M6_M19_M20_E10>(
      Message4_M6_M19_M20_E10_descriptor(), name, value);
}
enum Message4_M6_M19_M24_M33_M50_M63_E21 : int {
  Message4_M6_M19_M24_M33_M50_M63_E21_E21_UNSPECIFIED = 0,
  Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_1 = 122,
  Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_2 = 26,
  Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_3 = 3,
  Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_4 = 106,
  Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_5 = 37,
};

bool Message4_M6_M19_M24_M33_M50_M63_E21_IsValid(int value);
extern const uint32_t Message4_M6_M19_M24_M33_M50_M63_E21_internal_data_[];
constexpr Message4_M6_M19_M24_M33_M50_M63_E21 Message4_M6_M19_M24_M33_M50_M63_E21_E21_MIN = static_cast<Message4_M6_M19_M24_M33_M50_M63_E21>(0);
constexpr Message4_M6_M19_M24_M33_M50_M63_E21 Message4_M6_M19_M24_M33_M50_M63_E21_E21_MAX = static_cast<Message4_M6_M19_M24_M33_M50_M63_E21>(122);
constexpr int Message4_M6_M19_M24_M33_M50_M63_E21_E21_ARRAYSIZE = 122 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M6_M19_M24_M33_M50_M63_E21_descriptor();
template <typename T>
const std::string& Message4_M6_M19_M24_M33_M50_M63_E21_Name(T value) {
  static_assert(std::is_same<T, Message4_M6_M19_M24_M33_M50_M63_E21>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E21_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M6_M19_M24_M33_M50_M63_E21_descriptor(), value);
}
inline bool Message4_M6_M19_M24_M33_M50_M63_E21_Parse(absl::string_view name, Message4_M6_M19_M24_M33_M50_M63_E21* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M6_M19_M24_M33_M50_M63_E21>(
      Message4_M6_M19_M24_M33_M50_M63_E21_descriptor(), name, value);
}
enum Message4_M6_M19_M27_M31_M42_M54_E19 : int {
  Message4_M6_M19_M27_M31_M42_M54_E19_E19_UNSPECIFIED = 0,
  Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_1 = 22,
  Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_2 = 39,
  Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_3 = 56,
  Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_4 = 83,
  Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_5 = 117,
};

bool Message4_M6_M19_M27_M31_M42_M54_E19_IsValid(int value);
extern const uint32_t Message4_M6_M19_M27_M31_M42_M54_E19_internal_data_[];
constexpr Message4_M6_M19_M27_M31_M42_M54_E19 Message4_M6_M19_M27_M31_M42_M54_E19_E19_MIN = static_cast<Message4_M6_M19_M27_M31_M42_M54_E19>(0);
constexpr Message4_M6_M19_M27_M31_M42_M54_E19 Message4_M6_M19_M27_M31_M42_M54_E19_E19_MAX = static_cast<Message4_M6_M19_M27_M31_M42_M54_E19>(117);
constexpr int Message4_M6_M19_M27_M31_M42_M54_E19_E19_ARRAYSIZE = 117 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M6_M19_M27_M31_M42_M54_E19_descriptor();
template <typename T>
const std::string& Message4_M6_M19_M27_M31_M42_M54_E19_Name(T value) {
  static_assert(std::is_same<T, Message4_M6_M19_M27_M31_M42_M54_E19>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E19_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M6_M19_M27_M31_M42_M54_E19_descriptor(), value);
}
inline bool Message4_M6_M19_M27_M31_M42_M54_E19_Parse(absl::string_view name, Message4_M6_M19_M27_M31_M42_M54_E19* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M6_M19_M27_M31_M42_M54_E19>(
      Message4_M6_M19_M27_M31_M42_M54_E19_descriptor(), name, value);
}
enum Message4_M6_M19_M27_E12 : int {
  Message4_M6_M19_M27_E12_E12_UNSPECIFIED = 0,
  Message4_M6_M19_M27_E12_E12_CONST_1 = 113,
  Message4_M6_M19_M27_E12_E12_CONST_2 = 50,
  Message4_M6_M19_M27_E12_E12_CONST_3 = 87,
  Message4_M6_M19_M27_E12_E12_CONST_4 = 95,
  Message4_M6_M19_M27_E12_E12_CONST_5 = 23,
};

bool Message4_M6_M19_M27_E12_IsValid(int value);
extern const uint32_t Message4_M6_M19_M27_E12_internal_data_[];
constexpr Message4_M6_M19_M27_E12 Message4_M6_M19_M27_E12_E12_MIN = static_cast<Message4_M6_M19_M27_E12>(0);
constexpr Message4_M6_M19_M27_E12 Message4_M6_M19_M27_E12_E12_MAX = static_cast<Message4_M6_M19_M27_E12>(113);
constexpr int Message4_M6_M19_M27_E12_E12_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M6_M19_M27_E12_descriptor();
template <typename T>
const std::string& Message4_M6_M19_M27_E12_Name(T value) {
  static_assert(std::is_same<T, Message4_M6_M19_M27_E12>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E12_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M6_M19_M27_E12_descriptor(), value);
}
inline bool Message4_M6_M19_M27_E12_Parse(absl::string_view name, Message4_M6_M19_M27_E12* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M6_M19_M27_E12>(
      Message4_M6_M19_M27_E12_descriptor(), name, value);
}
enum Message4_M6_M19_M30_M32_E14 : int {
  Message4_M6_M19_M30_M32_E14_E14_UNSPECIFIED = 0,
  Message4_M6_M19_M30_M32_E14_E14_CONST_1 = 112,
  Message4_M6_M19_M30_M32_E14_E14_CONST_2 = 67,
  Message4_M6_M19_M30_M32_E14_E14_CONST_3 = 52,
  Message4_M6_M19_M30_M32_E14_E14_CONST_4 = 23,
  Message4_M6_M19_M30_M32_E14_E14_CONST_5 = 51,
};

bool Message4_M6_M19_M30_M32_E14_IsValid(int value);
extern const uint32_t Message4_M6_M19_M30_M32_E14_internal_data_[];
constexpr Message4_M6_M19_M30_M32_E14 Message4_M6_M19_M30_M32_E14_E14_MIN = static_cast<Message4_M6_M19_M30_M32_E14>(0);
constexpr Message4_M6_M19_M30_M32_E14 Message4_M6_M19_M30_M32_E14_E14_MAX = static_cast<Message4_M6_M19_M30_M32_E14>(112);
constexpr int Message4_M6_M19_M30_M32_E14_E14_ARRAYSIZE = 112 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M6_M19_M30_M32_E14_descriptor();
template <typename T>
const std::string& Message4_M6_M19_M30_M32_E14_Name(T value) {
  static_assert(std::is_same<T, Message4_M6_M19_M30_M32_E14>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E14_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M6_M19_M30_M32_E14_descriptor(), value);
}
inline bool Message4_M6_M19_M30_M32_E14_Parse(absl::string_view name, Message4_M6_M19_M30_M32_E14* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M6_M19_M30_M32_E14>(
      Message4_M6_M19_M30_M32_E14_descriptor(), name, value);
}
enum Message4_M6_M19_M30_E13 : int {
  Message4_M6_M19_M30_E13_E13_UNSPECIFIED = 0,
  Message4_M6_M19_M30_E13_E13_CONST_1 = 27,
  Message4_M6_M19_M30_E13_E13_CONST_2 = 121,
  Message4_M6_M19_M30_E13_E13_CONST_3 = 52,
  Message4_M6_M19_M30_E13_E13_CONST_4 = 42,
  Message4_M6_M19_M30_E13_E13_CONST_5 = 93,
};

bool Message4_M6_M19_M30_E13_IsValid(int value);
extern const uint32_t Message4_M6_M19_M30_E13_internal_data_[];
constexpr Message4_M6_M19_M30_E13 Message4_M6_M19_M30_E13_E13_MIN = static_cast<Message4_M6_M19_M30_E13>(0);
constexpr Message4_M6_M19_M30_E13 Message4_M6_M19_M30_E13_E13_MAX = static_cast<Message4_M6_M19_M30_E13>(121);
constexpr int Message4_M6_M19_M30_E13_E13_ARRAYSIZE = 121 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M6_M19_M30_E13_descriptor();
template <typename T>
const std::string& Message4_M6_M19_M30_E13_Name(T value) {
  static_assert(std::is_same<T, Message4_M6_M19_M30_E13>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E13_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M6_M19_M30_E13_descriptor(), value);
}
inline bool Message4_M6_M19_M30_E13_Parse(absl::string_view name, Message4_M6_M19_M30_E13* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M6_M19_M30_E13>(
      Message4_M6_M19_M30_E13_descriptor(), name, value);
}
enum Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 : int {
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_UNSPECIFIED = 0,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_1 = 16,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_2 = 42,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_3 = 94,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_4 = 41,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_5 = 18,
};

bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_IsValid(int value);
extern const uint32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_internal_data_[];
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_MIN = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27>(0);
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_MAX = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27>(94);
constexpr int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_ARRAYSIZE = 94 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_descriptor();
template <typename T>
const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E27_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_descriptor(), value);
}
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_Parse(absl::string_view name, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27>(
      Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_descriptor(), name, value);
}
enum Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 : int {
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_UNSPECIFIED = 0,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_1 = 123,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_2 = 2,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_3 = 110,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_4 = 81,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_5 = 21,
};

bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_IsValid(int value);
extern const uint32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_internal_data_[];
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_MIN = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30>(0);
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_MAX = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30>(123);
constexpr int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_ARRAYSIZE = 123 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_descriptor();
template <typename T>
const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E30_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_descriptor(), value);
}
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_Parse(absl::string_view name, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30>(
      Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_descriptor(), name, value);
}
enum Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 : int {
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_UNSPECIFIED = 0,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_1 = 84,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_2 = 100,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_3 = 32,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_4 = 31,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_5 = 101,
};

bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_IsValid(int value);
extern const uint32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_internal_data_[];
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_MIN = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29>(0);
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_MAX = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29>(101);
constexpr int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_ARRAYSIZE = 101 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_descriptor();
template <typename T>
const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E29_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_descriptor(), value);
}
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_Parse(absl::string_view name, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29>(
      Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_descriptor(), name, value);
}
enum Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 : int {
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_UNSPECIFIED = 0,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_1 = 24,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_2 = 113,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_3 = 97,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_4 = 20,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_5 = 58,
};

bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_IsValid(int value);
extern const uint32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_internal_data_[];
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_MIN = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31>(0);
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_MAX = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31>(113);
constexpr int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_ARRAYSIZE = 113 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_descriptor();
template <typename T>
const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E31_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_descriptor(), value);
}
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_Parse(absl::string_view name, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31>(
      Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_descriptor(), name, value);
}
enum Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 : int {
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_UNSPECIFIED = 0,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_1 = 84,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_2 = 72,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_3 = 77,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_4 = 43,
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_5 = 107,
};

bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_IsValid(int value);
extern const uint32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_internal_data_[];
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_MIN = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28>(0);
constexpr Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_MAX = static_cast<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28>(107);
constexpr int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_ARRAYSIZE = 107 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_descriptor();
template <typename T>
const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E28_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_descriptor(), value);
}
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_Parse(absl::string_view name, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28>(
      Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_descriptor(), name, value);
}
enum Message4_M7_M14_M29_M34_M41_E17 : int {
  Message4_M7_M14_M29_M34_M41_E17_E17_UNSPECIFIED = 0,
  Message4_M7_M14_M29_M34_M41_E17_E17_CONST_1 = 2,
  Message4_M7_M14_M29_M34_M41_E17_E17_CONST_2 = 119,
  Message4_M7_M14_M29_M34_M41_E17_E17_CONST_3 = 97,
  Message4_M7_M14_M29_M34_M41_E17_E17_CONST_4 = 30,
  Message4_M7_M14_M29_M34_M41_E17_E17_CONST_5 = 29,
};

bool Message4_M7_M14_M29_M34_M41_E17_IsValid(int value);
extern const uint32_t Message4_M7_M14_M29_M34_M41_E17_internal_data_[];
constexpr Message4_M7_M14_M29_M34_M41_E17 Message4_M7_M14_M29_M34_M41_E17_E17_MIN = static_cast<Message4_M7_M14_M29_M34_M41_E17>(0);
constexpr Message4_M7_M14_M29_M34_M41_E17 Message4_M7_M14_M29_M34_M41_E17_E17_MAX = static_cast<Message4_M7_M14_M29_M34_M41_E17>(119);
constexpr int Message4_M7_M14_M29_M34_M41_E17_E17_ARRAYSIZE = 119 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M14_M29_M34_M41_E17_descriptor();
template <typename T>
const std::string& Message4_M7_M14_M29_M34_M41_E17_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M14_M29_M34_M41_E17>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E17_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M14_M29_M34_M41_E17_descriptor(), value);
}
inline bool Message4_M7_M14_M29_M34_M41_E17_Parse(absl::string_view name, Message4_M7_M14_M29_M34_M41_E17* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M14_M29_M34_M41_E17>(
      Message4_M7_M14_M29_M34_M41_E17_descriptor(), name, value);
}
enum Message4_M7_M15_E3 : int {
  Message4_M7_M15_E3_E3_UNSPECIFIED = 0,
  Message4_M7_M15_E3_E3_CONST_1 = 118,
  Message4_M7_M15_E3_E3_CONST_2 = 6,
  Message4_M7_M15_E3_E3_CONST_3 = 19,
  Message4_M7_M15_E3_E3_CONST_4 = 77,
  Message4_M7_M15_E3_E3_CONST_5 = 45,
};

bool Message4_M7_M15_E3_IsValid(int value);
extern const uint32_t Message4_M7_M15_E3_internal_data_[];
constexpr Message4_M7_M15_E3 Message4_M7_M15_E3_E3_MIN = static_cast<Message4_M7_M15_E3>(0);
constexpr Message4_M7_M15_E3 Message4_M7_M15_E3_E3_MAX = static_cast<Message4_M7_M15_E3>(118);
constexpr int Message4_M7_M15_E3_E3_ARRAYSIZE = 118 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M15_E3_descriptor();
template <typename T>
const std::string& Message4_M7_M15_E3_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M15_E3>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E3_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M15_E3_descriptor(), value);
}
inline bool Message4_M7_M15_E3_Parse(absl::string_view name, Message4_M7_M15_E3* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M15_E3>(
      Message4_M7_M15_E3_descriptor(), name, value);
}
enum Message4_M7_M15_E4 : int {
  Message4_M7_M15_E4_E4_UNSPECIFIED = 0,
  Message4_M7_M15_E4_E4_CONST_1 = 112,
  Message4_M7_M15_E4_E4_CONST_2 = 51,
  Message4_M7_M15_E4_E4_CONST_3 = 48,
  Message4_M7_M15_E4_E4_CONST_4 = 38,
  Message4_M7_M15_E4_E4_CONST_5 = 68,
};

bool Message4_M7_M15_E4_IsValid(int value);
extern const uint32_t Message4_M7_M15_E4_internal_data_[];
constexpr Message4_M7_M15_E4 Message4_M7_M15_E4_E4_MIN = static_cast<Message4_M7_M15_E4>(0);
constexpr Message4_M7_M15_E4 Message4_M7_M15_E4_E4_MAX = static_cast<Message4_M7_M15_E4>(112);
constexpr int Message4_M7_M15_E4_E4_ARRAYSIZE = 112 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M15_E4_descriptor();
template <typename T>
const std::string& Message4_M7_M15_E4_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M15_E4>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E4_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M15_E4_descriptor(), value);
}
inline bool Message4_M7_M15_E4_Parse(absl::string_view name, Message4_M7_M15_E4* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M15_E4>(
      Message4_M7_M15_E4_descriptor(), name, value);
}
enum Message4_M7_M16_M28_M35_E15 : int {
  Message4_M7_M16_M28_M35_E15_E15_UNSPECIFIED = 0,
  Message4_M7_M16_M28_M35_E15_E15_CONST_1 = 28,
  Message4_M7_M16_M28_M35_E15_E15_CONST_2 = 96,
  Message4_M7_M16_M28_M35_E15_E15_CONST_3 = 35,
  Message4_M7_M16_M28_M35_E15_E15_CONST_4 = 57,
  Message4_M7_M16_M28_M35_E15_E15_CONST_5 = 71,
};

bool Message4_M7_M16_M28_M35_E15_IsValid(int value);
extern const uint32_t Message4_M7_M16_M28_M35_E15_internal_data_[];
constexpr Message4_M7_M16_M28_M35_E15 Message4_M7_M16_M28_M35_E15_E15_MIN = static_cast<Message4_M7_M16_M28_M35_E15>(0);
constexpr Message4_M7_M16_M28_M35_E15 Message4_M7_M16_M28_M35_E15_E15_MAX = static_cast<Message4_M7_M16_M28_M35_E15>(96);
constexpr int Message4_M7_M16_M28_M35_E15_E15_ARRAYSIZE = 96 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M16_M28_M35_E15_descriptor();
template <typename T>
const std::string& Message4_M7_M16_M28_M35_E15_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M16_M28_M35_E15>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E15_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M16_M28_M35_E15_descriptor(), value);
}
inline bool Message4_M7_M16_M28_M35_E15_Parse(absl::string_view name, Message4_M7_M16_M28_M35_E15* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M16_M28_M35_E15>(
      Message4_M7_M16_M28_M35_E15_descriptor(), name, value);
}
enum Message4_M7_M18_M22_M36_E16 : int {
  Message4_M7_M18_M22_M36_E16_E16_UNSPECIFIED = 0,
  Message4_M7_M18_M22_M36_E16_E16_CONST_1 = 90,
  Message4_M7_M18_M22_M36_E16_E16_CONST_2 = 116,
  Message4_M7_M18_M22_M36_E16_E16_CONST_3 = 77,
  Message4_M7_M18_M22_M36_E16_E16_CONST_4 = 28,
  Message4_M7_M18_M22_M36_E16_E16_CONST_5 = 33,
};

bool Message4_M7_M18_M22_M36_E16_IsValid(int value);
extern const uint32_t Message4_M7_M18_M22_M36_E16_internal_data_[];
constexpr Message4_M7_M18_M22_M36_E16 Message4_M7_M18_M22_M36_E16_E16_MIN = static_cast<Message4_M7_M18_M22_M36_E16>(0);
constexpr Message4_M7_M18_M22_M36_E16 Message4_M7_M18_M22_M36_E16_E16_MAX = static_cast<Message4_M7_M18_M22_M36_E16>(116);
constexpr int Message4_M7_M18_M22_M36_E16_E16_ARRAYSIZE = 116 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M18_M22_M36_E16_descriptor();
template <typename T>
const std::string& Message4_M7_M18_M22_M36_E16_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M18_M22_M36_E16>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E16_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M18_M22_M36_E16_descriptor(), value);
}
inline bool Message4_M7_M18_M22_M36_E16_Parse(absl::string_view name, Message4_M7_M18_M22_M36_E16* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M18_M22_M36_E16>(
      Message4_M7_M18_M22_M36_E16_descriptor(), name, value);
}
enum Message4_M7_M18_E8 : int {
  Message4_M7_M18_E8_E8_UNSPECIFIED = 0,
  Message4_M7_M18_E8_E8_CONST_1 = 68,
  Message4_M7_M18_E8_E8_CONST_2 = 96,
  Message4_M7_M18_E8_E8_CONST_3 = 18,
  Message4_M7_M18_E8_E8_CONST_4 = 108,
  Message4_M7_M18_E8_E8_CONST_5 = 79,
};

bool Message4_M7_M18_E8_IsValid(int value);
extern const uint32_t Message4_M7_M18_E8_internal_data_[];
constexpr Message4_M7_M18_E8 Message4_M7_M18_E8_E8_MIN = static_cast<Message4_M7_M18_E8>(0);
constexpr Message4_M7_M18_E8 Message4_M7_M18_E8_E8_MAX = static_cast<Message4_M7_M18_E8>(108);
constexpr int Message4_M7_M18_E8_E8_ARRAYSIZE = 108 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M7_M18_E8_descriptor();
template <typename T>
const std::string& Message4_M7_M18_E8_Name(T value) {
  static_assert(std::is_same<T, Message4_M7_M18_E8>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E8_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M7_M18_E8_descriptor(), value);
}
inline bool Message4_M7_M18_E8_Parse(absl::string_view name, Message4_M7_M18_E8* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M7_M18_E8>(
      Message4_M7_M18_E8_descriptor(), name, value);
}
enum Message4_M8_E2 : int {
  Message4_M8_E2_E2_UNSPECIFIED = 0,
  Message4_M8_E2_E2_CONST_1 = 110,
  Message4_M8_E2_E2_CONST_2 = 23,
  Message4_M8_E2_E2_CONST_3 = 102,
  Message4_M8_E2_E2_CONST_4 = 50,
  Message4_M8_E2_E2_CONST_5 = 2,
};

bool Message4_M8_E2_IsValid(int value);
extern const uint32_t Message4_M8_E2_internal_data_[];
constexpr Message4_M8_E2 Message4_M8_E2_E2_MIN = static_cast<Message4_M8_E2>(0);
constexpr Message4_M8_E2 Message4_M8_E2_E2_MAX = static_cast<Message4_M8_E2>(110);
constexpr int Message4_M8_E2_E2_ARRAYSIZE = 110 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_M8_E2_descriptor();
template <typename T>
const std::string& Message4_M8_E2_Name(T value) {
  static_assert(std::is_same<T, Message4_M8_E2>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E2_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_M8_E2_descriptor(), value);
}
inline bool Message4_M8_E2_Parse(absl::string_view name, Message4_M8_E2* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_M8_E2>(
      Message4_M8_E2_descriptor(), name, value);
}
enum Message4_E1 : int {
  Message4_E1_E1_UNSPECIFIED = 0,
  Message4_E1_E1_CONST_1 = 125,
  Message4_E1_E1_CONST_2 = 32,
  Message4_E1_E1_CONST_3 = 11,
  Message4_E1_E1_CONST_4 = 12,
  Message4_E1_E1_CONST_5 = 99,
};

bool Message4_E1_IsValid(int value);
extern const uint32_t Message4_E1_internal_data_[];
constexpr Message4_E1 Message4_E1_E1_MIN = static_cast<Message4_E1>(0);
constexpr Message4_E1 Message4_E1_E1_MAX = static_cast<Message4_E1>(125);
constexpr int Message4_E1_E1_ARRAYSIZE = 125 + 1;
const ::google::protobuf::EnumDescriptor*
Message4_E1_descriptor();
template <typename T>
const std::string& Message4_E1_Name(T value) {
  static_assert(std::is_same<T, Message4_E1>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to E1_Name().");
  return ::google::protobuf::internal::NameOfEnum(Message4_E1_descriptor(), value);
}
inline bool Message4_E1_Parse(absl::string_view name, Message4_E1* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message4_E1>(
      Message4_E1_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Message4_M8 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M8) */ {
 public:
  inline Message4_M8() : Message4_M8(nullptr) {}
  ~Message4_M8() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M8(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M8(const Message4_M8& from) : Message4_M8(nullptr, from) {}
  inline Message4_M8(Message4_M8&& from) noexcept
      : Message4_M8(nullptr, std::move(from)) {}
  inline Message4_M8& operator=(const Message4_M8& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M8& operator=(Message4_M8&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M8& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M8* internal_default_instance() {
    return reinterpret_cast<const Message4_M8*>(
        &_Message4_M8_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 91;
  friend void swap(Message4_M8& a, Message4_M8& b) { a.Swap(&b); }
  inline void Swap(Message4_M8* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M8* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M8* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M8>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M8& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M8& from) { Message4_M8::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M8* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M8"; }

 protected:
  explicit Message4_M8(::google::protobuf::Arena* arena);
  Message4_M8(::google::protobuf::Arena* arena, const Message4_M8& from);
  Message4_M8(::google::protobuf::Arena* arena, Message4_M8&& from) noexcept
      : Message4_M8(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E2 = Message4_M8_E2;
  static constexpr E2 E2_UNSPECIFIED = Message4_M8_E2_E2_UNSPECIFIED;
  static constexpr E2 E2_CONST_1 = Message4_M8_E2_E2_CONST_1;
  static constexpr E2 E2_CONST_2 = Message4_M8_E2_E2_CONST_2;
  static constexpr E2 E2_CONST_3 = Message4_M8_E2_E2_CONST_3;
  static constexpr E2 E2_CONST_4 = Message4_M8_E2_E2_CONST_4;
  static constexpr E2 E2_CONST_5 = Message4_M8_E2_E2_CONST_5;
  static inline bool E2_IsValid(int value) {
    return Message4_M8_E2_IsValid(value);
  }
  static constexpr E2 E2_MIN = Message4_M8_E2_E2_MIN;
  static constexpr E2 E2_MAX = Message4_M8_E2_E2_MAX;
  static constexpr int E2_ARRAYSIZE = Message4_M8_E2_E2_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E2_descriptor() {
    return Message4_M8_E2_descriptor();
  }
  template <typename T>
  static inline const std::string& E2_Name(T value) {
    return Message4_M8_E2_Name(value);
  }
  static inline bool E2_Parse(absl::string_view name, E2* value) {
    return Message4_M8_E2_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M8.E2 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M8_E2 f_1() const;
  void set_f_1(::fleetbench::proto::Message4_M8_E2 value);

  private:
  ::fleetbench::proto::Message4_M8_E2 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message4_M8_E2 value);

  public:
  // optional bool f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M8)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      40, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M8_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    int f_1_;
    bool f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M18_M22_M36 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M18.M22.M36) */ {
 public:
  inline Message4_M7_M18_M22_M36() : Message4_M7_M18_M22_M36(nullptr) {}
  ~Message4_M7_M18_M22_M36() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M18_M22_M36(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M18_M22_M36(const Message4_M7_M18_M22_M36& from) : Message4_M7_M18_M22_M36(nullptr, from) {}
  inline Message4_M7_M18_M22_M36(Message4_M7_M18_M22_M36&& from) noexcept
      : Message4_M7_M18_M22_M36(nullptr, std::move(from)) {}
  inline Message4_M7_M18_M22_M36& operator=(const Message4_M7_M18_M22_M36& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M18_M22_M36& operator=(Message4_M7_M18_M22_M36&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M18_M22_M36& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M18_M22_M36* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M18_M22_M36*>(
        &_Message4_M7_M18_M22_M36_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 87;
  friend void swap(Message4_M7_M18_M22_M36& a, Message4_M7_M18_M22_M36& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M18_M22_M36* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M18_M22_M36* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M18_M22_M36* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M18_M22_M36>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M18_M22_M36& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M18_M22_M36& from) { Message4_M7_M18_M22_M36::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M18_M22_M36* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M18.M22.M36"; }

 protected:
  explicit Message4_M7_M18_M22_M36(::google::protobuf::Arena* arena);
  Message4_M7_M18_M22_M36(::google::protobuf::Arena* arena, const Message4_M7_M18_M22_M36& from);
  Message4_M7_M18_M22_M36(::google::protobuf::Arena* arena, Message4_M7_M18_M22_M36&& from) noexcept
      : Message4_M7_M18_M22_M36(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E16 = Message4_M7_M18_M22_M36_E16;
  static constexpr E16 E16_UNSPECIFIED = Message4_M7_M18_M22_M36_E16_E16_UNSPECIFIED;
  static constexpr E16 E16_CONST_1 = Message4_M7_M18_M22_M36_E16_E16_CONST_1;
  static constexpr E16 E16_CONST_2 = Message4_M7_M18_M22_M36_E16_E16_CONST_2;
  static constexpr E16 E16_CONST_3 = Message4_M7_M18_M22_M36_E16_E16_CONST_3;
  static constexpr E16 E16_CONST_4 = Message4_M7_M18_M22_M36_E16_E16_CONST_4;
  static constexpr E16 E16_CONST_5 = Message4_M7_M18_M22_M36_E16_E16_CONST_5;
  static inline bool E16_IsValid(int value) {
    return Message4_M7_M18_M22_M36_E16_IsValid(value);
  }
  static constexpr E16 E16_MIN = Message4_M7_M18_M22_M36_E16_E16_MIN;
  static constexpr E16 E16_MAX = Message4_M7_M18_M22_M36_E16_E16_MAX;
  static constexpr int E16_ARRAYSIZE = Message4_M7_M18_M22_M36_E16_E16_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E16_descriptor() {
    return Message4_M7_M18_M22_M36_E16_descriptor();
  }
  template <typename T>
  static inline const std::string& E16_Name(T value) {
    return Message4_M7_M18_M22_M36_E16_Name(value);
  }
  static inline bool E16_Parse(absl::string_view name, E16* value) {
    return Message4_M7_M18_M22_M36_E16_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M7.M18.M22.M36.E16 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M18_M22_M36_E16 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M18_M22_M36_E16 value);

  private:
  ::fleetbench::proto::Message4_M7_M18_M22_M36_E16 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M18_M22_M36_E16 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M18.M22.M36)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M18_M22_M36_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M52_M57 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57) */ {
 public:
  inline Message4_M7_M16_M28_M35_M52_M57() : Message4_M7_M16_M28_M35_M52_M57(nullptr) {}
  ~Message4_M7_M16_M28_M35_M52_M57() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M52_M57(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M52_M57(const Message4_M7_M16_M28_M35_M52_M57& from) : Message4_M7_M16_M28_M35_M52_M57(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M52_M57(Message4_M7_M16_M28_M35_M52_M57&& from) noexcept
      : Message4_M7_M16_M28_M35_M52_M57(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M52_M57& operator=(const Message4_M7_M16_M28_M35_M52_M57& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M52_M57& operator=(Message4_M7_M16_M28_M35_M52_M57&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M52_M57& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M52_M57* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M52_M57*>(
        &_Message4_M7_M16_M28_M35_M52_M57_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 82;
  friend void swap(Message4_M7_M16_M28_M35_M52_M57& a, Message4_M7_M16_M28_M35_M52_M57& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M52_M57* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M52_M57* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M52_M57* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M52_M57>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M52_M57& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M52_M57& from) { Message4_M7_M16_M28_M35_M52_M57::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M52_M57* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M52_M57(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M52_M57(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M52_M57& from);
  Message4_M7_M16_M28_M35_M52_M57(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M52_M57&& from) noexcept
      : Message4_M7_M16_M28_M35_M52_M57(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M52_M57_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M51 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M51) */ {
 public:
  inline Message4_M7_M16_M28_M35_M51() : Message4_M7_M16_M28_M35_M51(nullptr) {}
  ~Message4_M7_M16_M28_M35_M51() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M51(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M51(const Message4_M7_M16_M28_M35_M51& from) : Message4_M7_M16_M28_M35_M51(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M51(Message4_M7_M16_M28_M35_M51&& from) noexcept
      : Message4_M7_M16_M28_M35_M51(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M51& operator=(const Message4_M7_M16_M28_M35_M51& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M51& operator=(Message4_M7_M16_M28_M35_M51&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M51& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M51* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M51*>(
        &_Message4_M7_M16_M28_M35_M51_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 81;
  friend void swap(Message4_M7_M16_M28_M35_M51& a, Message4_M7_M16_M28_M35_M51& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M51* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M51* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M51* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M51>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M51& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M51& from) { Message4_M7_M16_M28_M35_M51::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M51* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M51"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M51(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M51(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M51& from);
  Message4_M7_M16_M28_M35_M51(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M51&& from) noexcept
      : Message4_M7_M16_M28_M35_M51(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 5,
    kF2FieldNumber = 6,
    kF0FieldNumber = 1,
  };
  // optional string f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M51)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 0,
      59, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M51_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M46 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M46) */ {
 public:
  inline Message4_M7_M16_M28_M35_M46() : Message4_M7_M16_M28_M35_M46(nullptr) {}
  ~Message4_M7_M16_M28_M35_M46() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M46(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M46(const Message4_M7_M16_M28_M35_M46& from) : Message4_M7_M16_M28_M35_M46(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M46(Message4_M7_M16_M28_M35_M46&& from) noexcept
      : Message4_M7_M16_M28_M35_M46(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M46& operator=(const Message4_M7_M16_M28_M35_M46& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M46& operator=(Message4_M7_M16_M28_M35_M46&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M46& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M46* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M46*>(
        &_Message4_M7_M16_M28_M35_M46_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 80;
  friend void swap(Message4_M7_M16_M28_M35_M46& a, Message4_M7_M16_M28_M35_M46& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M46* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M46* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M46* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M46>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M46& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M46& from) { Message4_M7_M16_M28_M35_M46::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M46* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M46"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M46(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M46(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M46& from);
  Message4_M7_M16_M28_M35_M46(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M46&& from) noexcept
      : Message4_M7_M16_M28_M35_M46(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M46)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M46_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M43_M62_M70 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70) */ {
 public:
  inline Message4_M7_M16_M28_M35_M43_M62_M70() : Message4_M7_M16_M28_M35_M43_M62_M70(nullptr) {}
  ~Message4_M7_M16_M28_M35_M43_M62_M70() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M43_M62_M70(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M43_M62_M70(const Message4_M7_M16_M28_M35_M43_M62_M70& from) : Message4_M7_M16_M28_M35_M43_M62_M70(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M43_M62_M70(Message4_M7_M16_M28_M35_M43_M62_M70&& from) noexcept
      : Message4_M7_M16_M28_M35_M43_M62_M70(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M43_M62_M70& operator=(const Message4_M7_M16_M28_M35_M43_M62_M70& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M43_M62_M70& operator=(Message4_M7_M16_M28_M35_M43_M62_M70&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M43_M62_M70& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M43_M62_M70* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M43_M62_M70*>(
        &_Message4_M7_M16_M28_M35_M43_M62_M70_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 77;
  friend void swap(Message4_M7_M16_M28_M35_M43_M62_M70& a, Message4_M7_M16_M28_M35_M43_M62_M70& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M43_M62_M70* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M43_M62_M70* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M43_M62_M70* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M43_M62_M70>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M43_M62_M70& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M43_M62_M70& from) { Message4_M7_M16_M28_M35_M43_M62_M70::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M43_M62_M70* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M43_M62_M70(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M43_M62_M70(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M43_M62_M70& from);
  Message4_M7_M16_M28_M35_M43_M62_M70(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M43_M62_M70&& from) noexcept
      : Message4_M7_M16_M28_M35_M43_M62_M70(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      64, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M43_M62_M70_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M43_M62_M68 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M68) */ {
 public:
  inline Message4_M7_M16_M28_M35_M43_M62_M68() : Message4_M7_M16_M28_M35_M43_M62_M68(nullptr) {}
  ~Message4_M7_M16_M28_M35_M43_M62_M68() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M43_M62_M68(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M43_M62_M68(const Message4_M7_M16_M28_M35_M43_M62_M68& from) : Message4_M7_M16_M28_M35_M43_M62_M68(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M43_M62_M68(Message4_M7_M16_M28_M35_M43_M62_M68&& from) noexcept
      : Message4_M7_M16_M28_M35_M43_M62_M68(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M43_M62_M68& operator=(const Message4_M7_M16_M28_M35_M43_M62_M68& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M43_M62_M68& operator=(Message4_M7_M16_M28_M35_M43_M62_M68&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M43_M62_M68& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M43_M62_M68* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M43_M62_M68*>(
        &_Message4_M7_M16_M28_M35_M43_M62_M68_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 76;
  friend void swap(Message4_M7_M16_M28_M35_M43_M62_M68& a, Message4_M7_M16_M28_M35_M43_M62_M68& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M43_M62_M68* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M43_M62_M68* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M43_M62_M68* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M43_M62_M68>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M43_M62_M68& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M43_M62_M68& from) { Message4_M7_M16_M28_M35_M43_M62_M68::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M43_M62_M68* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M68"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M43_M62_M68(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M43_M62_M68(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M43_M62_M68& from);
  Message4_M7_M16_M28_M35_M43_M62_M68(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M43_M62_M68&& from) noexcept
      : Message4_M7_M16_M28_M35_M43_M62_M68(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M68)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M43_M62_M68_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M40 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M40) */ {
 public:
  inline Message4_M7_M16_M28_M35_M40() : Message4_M7_M16_M28_M35_M40(nullptr) {}
  ~Message4_M7_M16_M28_M35_M40() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M40(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M40(const Message4_M7_M16_M28_M35_M40& from) : Message4_M7_M16_M28_M35_M40(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M40(Message4_M7_M16_M28_M35_M40&& from) noexcept
      : Message4_M7_M16_M28_M35_M40(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M40& operator=(const Message4_M7_M16_M28_M35_M40& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M40& operator=(Message4_M7_M16_M28_M35_M40&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M40& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M40* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M40*>(
        &_Message4_M7_M16_M28_M35_M40_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 75;
  friend void swap(Message4_M7_M16_M28_M35_M40& a, Message4_M7_M16_M28_M35_M40& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M40* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M40* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M40* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M40>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M40& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M40& from) { Message4_M7_M16_M28_M35_M40::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M40* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M40"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M40(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M40(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M40& from);
  Message4_M7_M16_M28_M35_M40(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M40&& from) noexcept
      : Message4_M7_M16_M28_M35_M40(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_6())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_6()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      sizes.push_back(end_addr - start_addr + sizeof(f_6()));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF4FieldNumber = 5,
    kF5FieldNumber = 7,
    kF6FieldNumber = 8,
  };
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional bool f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional bool f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional uint32 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // optional float f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  float f_4() const;
  void set_f_4(float value);

  private:
  float _internal_f_4() const;
  void _internal_set_f_4(float value);

  public:
  // optional uint32 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  ::uint32_t f_5() const;
  void set_f_5(::uint32_t value);

  private:
  ::uint32_t _internal_f_5() const;
  void _internal_set_f_5(::uint32_t value);

  public:
  // optional int32 f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int32_t f_6() const;
  void set_f_6(::int32_t value);

  private:
  ::int32_t _internal_f_6() const;
  void _internal_set_f_6(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M40)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M40_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    bool f_1_;
    bool f_2_;
    ::uint32_t f_3_;
    float f_4_;
    ::uint32_t f_5_;
    ::int32_t f_6_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M15 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M15) */ {
 public:
  inline Message4_M7_M15() : Message4_M7_M15(nullptr) {}
  ~Message4_M7_M15() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M15(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M15(const Message4_M7_M15& from) : Message4_M7_M15(nullptr, from) {}
  inline Message4_M7_M15(Message4_M7_M15&& from) noexcept
      : Message4_M7_M15(nullptr, std::move(from)) {}
  inline Message4_M7_M15& operator=(const Message4_M7_M15& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M15& operator=(Message4_M7_M15&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M15& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M15* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M15*>(
        &_Message4_M7_M15_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 74;
  friend void swap(Message4_M7_M15& a, Message4_M7_M15& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M15* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M15* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M15* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M15>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M15& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M15& from) { Message4_M7_M15::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M15* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M15"; }

 protected:
  explicit Message4_M7_M15(::google::protobuf::Arena* arena);
  Message4_M7_M15(::google::protobuf::Arena* arena, const Message4_M7_M15& from);
  Message4_M7_M15(::google::protobuf::Arena* arena, Message4_M7_M15&& from) noexcept
      : Message4_M7_M15(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E3 = Message4_M7_M15_E3;
  static constexpr E3 E3_UNSPECIFIED = Message4_M7_M15_E3_E3_UNSPECIFIED;
  static constexpr E3 E3_CONST_1 = Message4_M7_M15_E3_E3_CONST_1;
  static constexpr E3 E3_CONST_2 = Message4_M7_M15_E3_E3_CONST_2;
  static constexpr E3 E3_CONST_3 = Message4_M7_M15_E3_E3_CONST_3;
  static constexpr E3 E3_CONST_4 = Message4_M7_M15_E3_E3_CONST_4;
  static constexpr E3 E3_CONST_5 = Message4_M7_M15_E3_E3_CONST_5;
  static inline bool E3_IsValid(int value) {
    return Message4_M7_M15_E3_IsValid(value);
  }
  static constexpr E3 E3_MIN = Message4_M7_M15_E3_E3_MIN;
  static constexpr E3 E3_MAX = Message4_M7_M15_E3_E3_MAX;
  static constexpr int E3_ARRAYSIZE = Message4_M7_M15_E3_E3_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E3_descriptor() {
    return Message4_M7_M15_E3_descriptor();
  }
  template <typename T>
  static inline const std::string& E3_Name(T value) {
    return Message4_M7_M15_E3_Name(value);
  }
  static inline bool E3_Parse(absl::string_view name, E3* value) {
    return Message4_M7_M15_E3_Parse(name, value);
  }
  using E4 = Message4_M7_M15_E4;
  static constexpr E4 E4_UNSPECIFIED = Message4_M7_M15_E4_E4_UNSPECIFIED;
  static constexpr E4 E4_CONST_1 = Message4_M7_M15_E4_E4_CONST_1;
  static constexpr E4 E4_CONST_2 = Message4_M7_M15_E4_E4_CONST_2;
  static constexpr E4 E4_CONST_3 = Message4_M7_M15_E4_E4_CONST_3;
  static constexpr E4 E4_CONST_4 = Message4_M7_M15_E4_E4_CONST_4;
  static constexpr E4 E4_CONST_5 = Message4_M7_M15_E4_E4_CONST_5;
  static inline bool E4_IsValid(int value) {
    return Message4_M7_M15_E4_IsValid(value);
  }
  static constexpr E4 E4_MIN = Message4_M7_M15_E4_E4_MIN;
  static constexpr E4 E4_MAX = Message4_M7_M15_E4_E4_MAX;
  static constexpr int E4_ARRAYSIZE = Message4_M7_M15_E4_E4_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E4_descriptor() {
    return Message4_M7_M15_E4_descriptor();
  }
  template <typename T>
  static inline const std::string& E4_Name(T value) {
    return Message4_M7_M15_E4_Name(value);
  }
  static inline bool E4_Parse(absl::string_view name, E4* value) {
    return Message4_M7_M15_E4_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_5().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF5FieldNumber = 8,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
    kF4FieldNumber = 6,
    kF3FieldNumber = 4,
  };
  // optional string f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional int64 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional .fleetbench.proto.Message4.M7.M15.E3 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M15_E3 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M15_E3 value);

  private:
  ::fleetbench::proto::Message4_M7_M15_E3 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M15_E3 value);

  public:
  // optional .fleetbench.proto.Message4.M7.M15.E4 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message4_M7_M15_E4 f_4() const;
  void set_f_4(::fleetbench::proto::Message4_M7_M15_E4 value);

  private:
  ::fleetbench::proto::Message4_M7_M15_E4 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message4_M7_M15_E4 value);

  public:
  // optional uint64 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint64_t f_3() const;
  void set_f_3(::uint64_t value);

  private:
  ::uint64_t _internal_f_3() const;
  void _internal_set_f_3(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M15)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M15_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    ::int64_t f_1_;
    ::int64_t f_2_;
    int f_0_;
    int f_4_;
    ::uint64_t f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M61 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M61) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M61() : Message4_M7_M14_M29_M34_M41_M61(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M61() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M61(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M61(const Message4_M7_M14_M29_M34_M41_M61& from) : Message4_M7_M14_M29_M34_M41_M61(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M61(Message4_M7_M14_M29_M34_M41_M61&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M61(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M61& operator=(const Message4_M7_M14_M29_M34_M41_M61& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M61& operator=(Message4_M7_M14_M29_M34_M41_M61&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M61& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M61* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M61*>(
        &_Message4_M7_M14_M29_M34_M41_M61_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 69;
  friend void swap(Message4_M7_M14_M29_M34_M41_M61& a, Message4_M7_M14_M29_M34_M41_M61& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M61* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M61* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M61* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M61>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M61& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M61& from) { Message4_M7_M14_M29_M34_M41_M61::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M61* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M61"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M61(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M61(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M61& from);
  Message4_M7_M14_M29_M34_M41_M61(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M61&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M61(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M61)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M61_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M92) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 56;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M92"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M92)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M91) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 55;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M91"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M91)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 52;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E30 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30;
  static constexpr E30 E30_UNSPECIFIED = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_UNSPECIFIED;
  static constexpr E30 E30_CONST_1 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_1;
  static constexpr E30 E30_CONST_2 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_2;
  static constexpr E30 E30_CONST_3 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_3;
  static constexpr E30 E30_CONST_4 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_4;
  static constexpr E30 E30_CONST_5 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_CONST_5;
  static inline bool E30_IsValid(int value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_IsValid(value);
  }
  static constexpr E30 E30_MIN = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_MIN;
  static constexpr E30 E30_MAX = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_MAX;
  static constexpr int E30_ARRAYSIZE = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_E30_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E30_descriptor() {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_descriptor();
  }
  template <typename T>
  static inline const std::string& E30_Name(T value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_Name(value);
  }
  static inline bool E30_Parse(absl::string_view name, E30* value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85.E30 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 value);

  private:
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 50;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      80, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 49;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E27 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27;
  static constexpr E27 E27_UNSPECIFIED = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_UNSPECIFIED;
  static constexpr E27 E27_CONST_1 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_1;
  static constexpr E27 E27_CONST_2 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_2;
  static constexpr E27 E27_CONST_3 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_3;
  static constexpr E27 E27_CONST_4 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_4;
  static constexpr E27 E27_CONST_5 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_CONST_5;
  static inline bool E27_IsValid(int value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_IsValid(value);
  }
  static constexpr E27 E27_MIN = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_MIN;
  static constexpr E27 E27_MAX = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_MAX;
  static constexpr int E27_ARRAYSIZE = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_E27_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E27_descriptor() {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_descriptor();
  }
  template <typename T>
  static inline const std::string& E27_Name(T value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_Name(value);
  }
  static inline bool E27_Parse(absl::string_view name, E27* value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76.E27 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 value);

  private:
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M30_M39 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M30.M39) */ {
 public:
  inline Message4_M6_M19_M30_M39() : Message4_M6_M19_M30_M39(nullptr) {}
  ~Message4_M6_M19_M30_M39() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M30_M39(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M30_M39(const Message4_M6_M19_M30_M39& from) : Message4_M6_M19_M30_M39(nullptr, from) {}
  inline Message4_M6_M19_M30_M39(Message4_M6_M19_M30_M39&& from) noexcept
      : Message4_M6_M19_M30_M39(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M30_M39& operator=(const Message4_M6_M19_M30_M39& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M30_M39& operator=(Message4_M6_M19_M30_M39&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M30_M39& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M30_M39* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M30_M39*>(
        &_Message4_M6_M19_M30_M39_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(Message4_M6_M19_M30_M39& a, Message4_M6_M19_M30_M39& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M30_M39* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M30_M39* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M30_M39* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M30_M39>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M30_M39& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M30_M39& from) { Message4_M6_M19_M30_M39::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M30_M39* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M30.M39"; }

 protected:
  explicit Message4_M6_M19_M30_M39(::google::protobuf::Arena* arena);
  Message4_M6_M19_M30_M39(::google::protobuf::Arena* arena, const Message4_M6_M19_M30_M39& from);
  Message4_M6_M19_M30_M39(::google::protobuf::Arena* arena, Message4_M6_M19_M30_M39&& from) noexcept
      : Message4_M6_M19_M30_M39(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_3().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 6,
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
    kF2FieldNumber = 5,
    kF4FieldNumber = 7,
  };
  // optional string f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional fixed64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint64_t f_1() const;
  void set_f_1(::uint64_t value);

  private:
  ::uint64_t _internal_f_1() const;
  void _internal_set_f_1(::uint64_t value);

  public:
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // optional bool f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional bool f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  bool f_4() const;
  void set_f_4(bool value);

  private:
  bool _internal_f_4() const;
  void _internal_set_f_4(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M30.M39)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M30_M39_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::uint64_t f_1_;
    bool f_0_;
    bool f_2_;
    bool f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M30_M32 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M30.M32) */ {
 public:
  inline Message4_M6_M19_M30_M32() : Message4_M6_M19_M30_M32(nullptr) {}
  ~Message4_M6_M19_M30_M32() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M30_M32(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M30_M32(const Message4_M6_M19_M30_M32& from) : Message4_M6_M19_M30_M32(nullptr, from) {}
  inline Message4_M6_M19_M30_M32(Message4_M6_M19_M30_M32&& from) noexcept
      : Message4_M6_M19_M30_M32(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M30_M32& operator=(const Message4_M6_M19_M30_M32& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M30_M32& operator=(Message4_M6_M19_M30_M32&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M30_M32& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M30_M32* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M30_M32*>(
        &_Message4_M6_M19_M30_M32_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(Message4_M6_M19_M30_M32& a, Message4_M6_M19_M30_M32& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M30_M32* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M30_M32* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M30_M32* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M30_M32>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M30_M32& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M30_M32& from) { Message4_M6_M19_M30_M32::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M30_M32* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M30.M32"; }

 protected:
  explicit Message4_M6_M19_M30_M32(::google::protobuf::Arena* arena);
  Message4_M6_M19_M30_M32(::google::protobuf::Arena* arena, const Message4_M6_M19_M30_M32& from);
  Message4_M6_M19_M30_M32(::google::protobuf::Arena* arena, Message4_M6_M19_M30_M32&& from) noexcept
      : Message4_M6_M19_M30_M32(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E14 = Message4_M6_M19_M30_M32_E14;
  static constexpr E14 E14_UNSPECIFIED = Message4_M6_M19_M30_M32_E14_E14_UNSPECIFIED;
  static constexpr E14 E14_CONST_1 = Message4_M6_M19_M30_M32_E14_E14_CONST_1;
  static constexpr E14 E14_CONST_2 = Message4_M6_M19_M30_M32_E14_E14_CONST_2;
  static constexpr E14 E14_CONST_3 = Message4_M6_M19_M30_M32_E14_E14_CONST_3;
  static constexpr E14 E14_CONST_4 = Message4_M6_M19_M30_M32_E14_E14_CONST_4;
  static constexpr E14 E14_CONST_5 = Message4_M6_M19_M30_M32_E14_E14_CONST_5;
  static inline bool E14_IsValid(int value) {
    return Message4_M6_M19_M30_M32_E14_IsValid(value);
  }
  static constexpr E14 E14_MIN = Message4_M6_M19_M30_M32_E14_E14_MIN;
  static constexpr E14 E14_MAX = Message4_M6_M19_M30_M32_E14_E14_MAX;
  static constexpr int E14_ARRAYSIZE = Message4_M6_M19_M30_M32_E14_E14_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E14_descriptor() {
    return Message4_M6_M19_M30_M32_E14_descriptor();
  }
  template <typename T>
  static inline const std::string& E14_Name(T value) {
    return Message4_M6_M19_M30_M32_E14_Name(value);
  }
  static inline bool E14_Parse(absl::string_view name, E14* value) {
    return Message4_M6_M19_M30_M32_E14_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_6())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_6()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      sizes.push_back(end_addr - start_addr + sizeof(f_6()));
      sizes.push_back(f_0().size());
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
    kF2FieldNumber = 5,
    kF1FieldNumber = 4,
    kF3FieldNumber = 7,
    kF4FieldNumber = 9,
    kF5FieldNumber = 11,
    kF6FieldNumber = 13,
  };
  // optional string f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional int32 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional bool f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M30.M32.E14 f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message4_M6_M19_M30_M32_E14 f_4() const;
  void set_f_4(::fleetbench::proto::Message4_M6_M19_M30_M32_E14 value);

  private:
  ::fleetbench::proto::Message4_M6_M19_M30_M32_E14 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message4_M6_M19_M30_M32_E14 value);

  public:
  // optional int32 f_5 = 11;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional int64 f_6 = 13;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M30.M32)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      55, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M30_M32_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::int32_t f_1_;
    bool f_3_;
    int f_4_;
    ::int32_t f_5_;
    ::int64_t f_6_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M27_M31_M42_M54 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54) */ {
 public:
  inline Message4_M6_M19_M27_M31_M42_M54() : Message4_M6_M19_M27_M31_M42_M54(nullptr) {}
  ~Message4_M6_M19_M27_M31_M42_M54() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M27_M31_M42_M54(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M27_M31_M42_M54(const Message4_M6_M19_M27_M31_M42_M54& from) : Message4_M6_M19_M27_M31_M42_M54(nullptr, from) {}
  inline Message4_M6_M19_M27_M31_M42_M54(Message4_M6_M19_M27_M31_M42_M54&& from) noexcept
      : Message4_M6_M19_M27_M31_M42_M54(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M27_M31_M42_M54& operator=(const Message4_M6_M19_M27_M31_M42_M54& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M27_M31_M42_M54& operator=(Message4_M6_M19_M27_M31_M42_M54&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M27_M31_M42_M54& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M27_M31_M42_M54* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M27_M31_M42_M54*>(
        &_Message4_M6_M19_M27_M31_M42_M54_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(Message4_M6_M19_M27_M31_M42_M54& a, Message4_M6_M19_M27_M31_M42_M54& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M27_M31_M42_M54* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M27_M31_M42_M54* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M27_M31_M42_M54* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M27_M31_M42_M54>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M27_M31_M42_M54& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M27_M31_M42_M54& from) { Message4_M6_M19_M27_M31_M42_M54::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M27_M31_M42_M54* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54"; }

 protected:
  explicit Message4_M6_M19_M27_M31_M42_M54(::google::protobuf::Arena* arena);
  Message4_M6_M19_M27_M31_M42_M54(::google::protobuf::Arena* arena, const Message4_M6_M19_M27_M31_M42_M54& from);
  Message4_M6_M19_M27_M31_M42_M54(::google::protobuf::Arena* arena, Message4_M6_M19_M27_M31_M42_M54&& from) noexcept
      : Message4_M6_M19_M27_M31_M42_M54(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E19 = Message4_M6_M19_M27_M31_M42_M54_E19;
  static constexpr E19 E19_UNSPECIFIED = Message4_M6_M19_M27_M31_M42_M54_E19_E19_UNSPECIFIED;
  static constexpr E19 E19_CONST_1 = Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_1;
  static constexpr E19 E19_CONST_2 = Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_2;
  static constexpr E19 E19_CONST_3 = Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_3;
  static constexpr E19 E19_CONST_4 = Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_4;
  static constexpr E19 E19_CONST_5 = Message4_M6_M19_M27_M31_M42_M54_E19_E19_CONST_5;
  static inline bool E19_IsValid(int value) {
    return Message4_M6_M19_M27_M31_M42_M54_E19_IsValid(value);
  }
  static constexpr E19 E19_MIN = Message4_M6_M19_M27_M31_M42_M54_E19_E19_MIN;
  static constexpr E19 E19_MAX = Message4_M6_M19_M27_M31_M42_M54_E19_E19_MAX;
  static constexpr int E19_ARRAYSIZE = Message4_M6_M19_M27_M31_M42_M54_E19_E19_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E19_descriptor() {
    return Message4_M6_M19_M27_M31_M42_M54_E19_descriptor();
  }
  template <typename T>
  static inline const std::string& E19_Name(T value) {
    return Message4_M6_M19_M27_M31_M42_M54_E19_Name(value);
  }
  static inline bool E19_Parse(absl::string_view name, E19* value) {
    return Message4_M6_M19_M27_M31_M42_M54_E19_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54.E19 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 value);

  private:
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M27_M31_M42_M54_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M26 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M26) */ {
 public:
  inline Message4_M6_M19_M26() : Message4_M6_M19_M26(nullptr) {}
  ~Message4_M6_M19_M26() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M26(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M26(const Message4_M6_M19_M26& from) : Message4_M6_M19_M26(nullptr, from) {}
  inline Message4_M6_M19_M26(Message4_M6_M19_M26&& from) noexcept
      : Message4_M6_M19_M26(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M26& operator=(const Message4_M6_M19_M26& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M26& operator=(Message4_M6_M19_M26&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M26& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M26* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M26*>(
        &_Message4_M6_M19_M26_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(Message4_M6_M19_M26& a, Message4_M6_M19_M26& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M26* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M26* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M26* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M26>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M26& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M26& from) { Message4_M6_M19_M26::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M26* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M26"; }

 protected:
  explicit Message4_M6_M19_M26(::google::protobuf::Arena* arena);
  Message4_M6_M19_M26(::google::protobuf::Arena* arena, const Message4_M6_M19_M26& from);
  Message4_M6_M19_M26(::google::protobuf::Arena* arena, Message4_M6_M19_M26&& from) noexcept
      : Message4_M6_M19_M26(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M26)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M26_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M24_M33_M50_M63 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63) */ {
 public:
  inline Message4_M6_M19_M24_M33_M50_M63() : Message4_M6_M19_M24_M33_M50_M63(nullptr) {}
  ~Message4_M6_M19_M24_M33_M50_M63() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M24_M33_M50_M63(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M24_M33_M50_M63(const Message4_M6_M19_M24_M33_M50_M63& from) : Message4_M6_M19_M24_M33_M50_M63(nullptr, from) {}
  inline Message4_M6_M19_M24_M33_M50_M63(Message4_M6_M19_M24_M33_M50_M63&& from) noexcept
      : Message4_M6_M19_M24_M33_M50_M63(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M24_M33_M50_M63& operator=(const Message4_M6_M19_M24_M33_M50_M63& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M24_M33_M50_M63& operator=(Message4_M6_M19_M24_M33_M50_M63&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M24_M33_M50_M63& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M24_M33_M50_M63* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M24_M33_M50_M63*>(
        &_Message4_M6_M19_M24_M33_M50_M63_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(Message4_M6_M19_M24_M33_M50_M63& a, Message4_M6_M19_M24_M33_M50_M63& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M24_M33_M50_M63* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M24_M33_M50_M63* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M24_M33_M50_M63* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M24_M33_M50_M63>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M24_M33_M50_M63& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M24_M33_M50_M63& from) { Message4_M6_M19_M24_M33_M50_M63::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M24_M33_M50_M63* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63"; }

 protected:
  explicit Message4_M6_M19_M24_M33_M50_M63(::google::protobuf::Arena* arena);
  Message4_M6_M19_M24_M33_M50_M63(::google::protobuf::Arena* arena, const Message4_M6_M19_M24_M33_M50_M63& from);
  Message4_M6_M19_M24_M33_M50_M63(::google::protobuf::Arena* arena, Message4_M6_M19_M24_M33_M50_M63&& from) noexcept
      : Message4_M6_M19_M24_M33_M50_M63(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E21 = Message4_M6_M19_M24_M33_M50_M63_E21;
  static constexpr E21 E21_UNSPECIFIED = Message4_M6_M19_M24_M33_M50_M63_E21_E21_UNSPECIFIED;
  static constexpr E21 E21_CONST_1 = Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_1;
  static constexpr E21 E21_CONST_2 = Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_2;
  static constexpr E21 E21_CONST_3 = Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_3;
  static constexpr E21 E21_CONST_4 = Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_4;
  static constexpr E21 E21_CONST_5 = Message4_M6_M19_M24_M33_M50_M63_E21_E21_CONST_5;
  static inline bool E21_IsValid(int value) {
    return Message4_M6_M19_M24_M33_M50_M63_E21_IsValid(value);
  }
  static constexpr E21 E21_MIN = Message4_M6_M19_M24_M33_M50_M63_E21_E21_MIN;
  static constexpr E21 E21_MAX = Message4_M6_M19_M24_M33_M50_M63_E21_E21_MAX;
  static constexpr int E21_ARRAYSIZE = Message4_M6_M19_M24_M33_M50_M63_E21_E21_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E21_descriptor() {
    return Message4_M6_M19_M24_M33_M50_M63_E21_descriptor();
  }
  template <typename T>
  static inline const std::string& E21_Name(T value) {
    return Message4_M6_M19_M24_M33_M50_M63_E21_Name(value);
  }
  static inline bool E21_Parse(absl::string_view name, E21* value) {
    return Message4_M6_M19_M24_M33_M50_M63_E21_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63.E21 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 value);

  private:
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M24_M33_M50_M63_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M24_M33_M44_M56 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M56) */ {
 public:
  inline Message4_M6_M19_M24_M33_M44_M56() : Message4_M6_M19_M24_M33_M44_M56(nullptr) {}
  ~Message4_M6_M19_M24_M33_M44_M56() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M24_M33_M44_M56(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M24_M33_M44_M56(const Message4_M6_M19_M24_M33_M44_M56& from) : Message4_M6_M19_M24_M33_M44_M56(nullptr, from) {}
  inline Message4_M6_M19_M24_M33_M44_M56(Message4_M6_M19_M24_M33_M44_M56&& from) noexcept
      : Message4_M6_M19_M24_M33_M44_M56(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M24_M33_M44_M56& operator=(const Message4_M6_M19_M24_M33_M44_M56& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M24_M33_M44_M56& operator=(Message4_M6_M19_M24_M33_M44_M56&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M24_M33_M44_M56& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M24_M33_M44_M56* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M24_M33_M44_M56*>(
        &_Message4_M6_M19_M24_M33_M44_M56_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(Message4_M6_M19_M24_M33_M44_M56& a, Message4_M6_M19_M24_M33_M44_M56& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M24_M33_M44_M56* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M24_M33_M44_M56* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M24_M33_M44_M56* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M24_M33_M44_M56>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M24_M33_M44_M56& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M24_M33_M44_M56& from) { Message4_M6_M19_M24_M33_M44_M56::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M24_M33_M44_M56* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M24.M33.M44.M56"; }

 protected:
  explicit Message4_M6_M19_M24_M33_M44_M56(::google::protobuf::Arena* arena);
  Message4_M6_M19_M24_M33_M44_M56(::google::protobuf::Arena* arena, const Message4_M6_M19_M24_M33_M44_M56& from);
  Message4_M6_M19_M24_M33_M44_M56(::google::protobuf::Arena* arena, Message4_M6_M19_M24_M33_M44_M56&& from) noexcept
      : Message4_M6_M19_M24_M33_M44_M56(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional uint32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M56)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M24_M33_M44_M56_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M24_M33_M44_M55 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M55) */ {
 public:
  inline Message4_M6_M19_M24_M33_M44_M55() : Message4_M6_M19_M24_M33_M44_M55(nullptr) {}
  ~Message4_M6_M19_M24_M33_M44_M55() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M24_M33_M44_M55(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M24_M33_M44_M55(const Message4_M6_M19_M24_M33_M44_M55& from) : Message4_M6_M19_M24_M33_M44_M55(nullptr, from) {}
  inline Message4_M6_M19_M24_M33_M44_M55(Message4_M6_M19_M24_M33_M44_M55&& from) noexcept
      : Message4_M6_M19_M24_M33_M44_M55(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M24_M33_M44_M55& operator=(const Message4_M6_M19_M24_M33_M44_M55& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M24_M33_M44_M55& operator=(Message4_M6_M19_M24_M33_M44_M55&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M24_M33_M44_M55& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M24_M33_M44_M55* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M24_M33_M44_M55*>(
        &_Message4_M6_M19_M24_M33_M44_M55_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(Message4_M6_M19_M24_M33_M44_M55& a, Message4_M6_M19_M24_M33_M44_M55& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M24_M33_M44_M55* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M24_M33_M44_M55* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M24_M33_M44_M55* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M24_M33_M44_M55>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M24_M33_M44_M55& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M24_M33_M44_M55& from) { Message4_M6_M19_M24_M33_M44_M55::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M24_M33_M44_M55* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M24.M33.M44.M55"; }

 protected:
  explicit Message4_M6_M19_M24_M33_M44_M55(::google::protobuf::Arena* arena);
  Message4_M6_M19_M24_M33_M44_M55(::google::protobuf::Arena* arena, const Message4_M6_M19_M24_M33_M44_M55& from);
  Message4_M6_M19_M24_M33_M44_M55(::google::protobuf::Arena* arena, Message4_M6_M19_M24_M33_M44_M55&& from) noexcept
      : Message4_M6_M19_M24_M33_M44_M55(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional double f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M55)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M24_M33_M44_M55_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M20 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M20) */ {
 public:
  inline Message4_M6_M19_M20() : Message4_M6_M19_M20(nullptr) {}
  ~Message4_M6_M19_M20() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M20(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M20(const Message4_M6_M19_M20& from) : Message4_M6_M19_M20(nullptr, from) {}
  inline Message4_M6_M19_M20(Message4_M6_M19_M20&& from) noexcept
      : Message4_M6_M19_M20(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M20& operator=(const Message4_M6_M19_M20& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M20& operator=(Message4_M6_M19_M20&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M20& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M20* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M20*>(
        &_Message4_M6_M19_M20_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(Message4_M6_M19_M20& a, Message4_M6_M19_M20& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M20* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M20* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M20* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M20>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M20& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M20& from) { Message4_M6_M19_M20::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M20* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M20"; }

 protected:
  explicit Message4_M6_M19_M20(::google::protobuf::Arena* arena);
  Message4_M6_M19_M20(::google::protobuf::Arena* arena, const Message4_M6_M19_M20& from);
  Message4_M6_M19_M20(::google::protobuf::Arena* arena, Message4_M6_M19_M20&& from) noexcept
      : Message4_M6_M19_M20(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E9 = Message4_M6_M19_M20_E9;
  static constexpr E9 E9_UNSPECIFIED = Message4_M6_M19_M20_E9_E9_UNSPECIFIED;
  static constexpr E9 E9_CONST_1 = Message4_M6_M19_M20_E9_E9_CONST_1;
  static constexpr E9 E9_CONST_2 = Message4_M6_M19_M20_E9_E9_CONST_2;
  static constexpr E9 E9_CONST_3 = Message4_M6_M19_M20_E9_E9_CONST_3;
  static constexpr E9 E9_CONST_4 = Message4_M6_M19_M20_E9_E9_CONST_4;
  static constexpr E9 E9_CONST_5 = Message4_M6_M19_M20_E9_E9_CONST_5;
  static inline bool E9_IsValid(int value) {
    return Message4_M6_M19_M20_E9_IsValid(value);
  }
  static constexpr E9 E9_MIN = Message4_M6_M19_M20_E9_E9_MIN;
  static constexpr E9 E9_MAX = Message4_M6_M19_M20_E9_E9_MAX;
  static constexpr int E9_ARRAYSIZE = Message4_M6_M19_M20_E9_E9_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E9_descriptor() {
    return Message4_M6_M19_M20_E9_descriptor();
  }
  template <typename T>
  static inline const std::string& E9_Name(T value) {
    return Message4_M6_M19_M20_E9_Name(value);
  }
  static inline bool E9_Parse(absl::string_view name, E9* value) {
    return Message4_M6_M19_M20_E9_Parse(name, value);
  }
  using E10 = Message4_M6_M19_M20_E10;
  static constexpr E10 E10_UNSPECIFIED = Message4_M6_M19_M20_E10_E10_UNSPECIFIED;
  static constexpr E10 E10_CONST_1 = Message4_M6_M19_M20_E10_E10_CONST_1;
  static constexpr E10 E10_CONST_2 = Message4_M6_M19_M20_E10_E10_CONST_2;
  static constexpr E10 E10_CONST_3 = Message4_M6_M19_M20_E10_E10_CONST_3;
  static constexpr E10 E10_CONST_4 = Message4_M6_M19_M20_E10_E10_CONST_4;
  static constexpr E10 E10_CONST_5 = Message4_M6_M19_M20_E10_E10_CONST_5;
  static inline bool E10_IsValid(int value) {
    return Message4_M6_M19_M20_E10_IsValid(value);
  }
  static constexpr E10 E10_MIN = Message4_M6_M19_M20_E10_E10_MIN;
  static constexpr E10 E10_MAX = Message4_M6_M19_M20_E10_E10_MAX;
  static constexpr int E10_ARRAYSIZE = Message4_M6_M19_M20_E10_E10_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E10_descriptor() {
    return Message4_M6_M19_M20_E10_descriptor();
  }
  template <typename T>
  static inline const std::string& E10_Name(T value) {
    return Message4_M6_M19_M20_E10_Name(value);
  }
  static inline bool E10_Parse(absl::string_view name, E10* value) {
    return Message4_M6_M19_M20_E10_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_2().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
  };
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional double f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M20.E9 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::fleetbench::proto::Message4_M6_M19_M20_E9 f_3() const;
  void set_f_3(::fleetbench::proto::Message4_M6_M19_M20_E9 value);

  private:
  ::fleetbench::proto::Message4_M6_M19_M20_E9 _internal_f_3() const;
  void _internal_set_f_3(::fleetbench::proto::Message4_M6_M19_M20_E9 value);

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M20.E10 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::fleetbench::proto::Message4_M6_M19_M20_E10 f_4() const;
  void set_f_4(::fleetbench::proto::Message4_M6_M19_M20_E10 value);

  private:
  ::fleetbench::proto::Message4_M6_M19_M20_E10 _internal_f_4() const;
  void _internal_set_f_4(::fleetbench::proto::Message4_M6_M19_M20_E10 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M20)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M20_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    double f_0_;
    ::int64_t f_1_;
    int f_3_;
    int f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M11 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M11) */ {
 public:
  inline Message4_M6_M11() : Message4_M6_M11(nullptr) {}
  ~Message4_M6_M11() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M11(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M11(const Message4_M6_M11& from) : Message4_M6_M11(nullptr, from) {}
  inline Message4_M6_M11(Message4_M6_M11&& from) noexcept
      : Message4_M6_M11(nullptr, std::move(from)) {}
  inline Message4_M6_M11& operator=(const Message4_M6_M11& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M11& operator=(Message4_M6_M11&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M11& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M11* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M11*>(
        &_Message4_M6_M11_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(Message4_M6_M11& a, Message4_M6_M11& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M11* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M11* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M11* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M11>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M11& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M11& from) { Message4_M6_M11::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M11* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M11"; }

 protected:
  explicit Message4_M6_M11(::google::protobuf::Arena* arena);
  Message4_M6_M11(::google::protobuf::Arena* arena, const Message4_M6_M11& from);
  Message4_M6_M11(::google::protobuf::Arena* arena, Message4_M6_M11&& from) noexcept
      : Message4_M6_M11(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional fixed32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M11)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M11_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M5_M17 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M5.M17) */ {
 public:
  inline Message4_M5_M17() : Message4_M5_M17(nullptr) {}
  ~Message4_M5_M17() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M5_M17(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M5_M17(const Message4_M5_M17& from) : Message4_M5_M17(nullptr, from) {}
  inline Message4_M5_M17(Message4_M5_M17&& from) noexcept
      : Message4_M5_M17(nullptr, std::move(from)) {}
  inline Message4_M5_M17& operator=(const Message4_M5_M17& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M5_M17& operator=(Message4_M5_M17&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M5_M17& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M5_M17* internal_default_instance() {
    return reinterpret_cast<const Message4_M5_M17*>(
        &_Message4_M5_M17_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(Message4_M5_M17& a, Message4_M5_M17& b) { a.Swap(&b); }
  inline void Swap(Message4_M5_M17* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M5_M17* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M5_M17* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M5_M17>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M5_M17& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M5_M17& from) { Message4_M5_M17::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M5_M17* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M5.M17"; }

 protected:
  explicit Message4_M5_M17(::google::protobuf::Arena* arena);
  Message4_M5_M17(::google::protobuf::Arena* arena, const Message4_M5_M17& from);
  Message4_M5_M17(::google::protobuf::Arena* arena, Message4_M5_M17&& from) noexcept
      : Message4_M5_M17(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E5 = Message4_M5_M17_E5;
  static constexpr E5 E5_UNSPECIFIED = Message4_M5_M17_E5_E5_UNSPECIFIED;
  static constexpr E5 E5_CONST_1 = Message4_M5_M17_E5_E5_CONST_1;
  static constexpr E5 E5_CONST_2 = Message4_M5_M17_E5_E5_CONST_2;
  static constexpr E5 E5_CONST_3 = Message4_M5_M17_E5_E5_CONST_3;
  static constexpr E5 E5_CONST_4 = Message4_M5_M17_E5_E5_CONST_4;
  static constexpr E5 E5_CONST_5 = Message4_M5_M17_E5_E5_CONST_5;
  static inline bool E5_IsValid(int value) {
    return Message4_M5_M17_E5_IsValid(value);
  }
  static constexpr E5 E5_MIN = Message4_M5_M17_E5_E5_MIN;
  static constexpr E5 E5_MAX = Message4_M5_M17_E5_E5_MAX;
  static constexpr int E5_ARRAYSIZE = Message4_M5_M17_E5_E5_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E5_descriptor() {
    return Message4_M5_M17_E5_descriptor();
  }
  template <typename T>
  static inline const std::string& E5_Name(T value) {
    return Message4_M5_M17_E5_Name(value);
  }
  static inline bool E5_Parse(absl::string_view name, E5* value) {
    return Message4_M5_M17_E5_Parse(name, value);
  }
  using E6 = Message4_M5_M17_E6;
  static constexpr E6 E6_UNSPECIFIED = Message4_M5_M17_E6_E6_UNSPECIFIED;
  static constexpr E6 E6_CONST_1 = Message4_M5_M17_E6_E6_CONST_1;
  static constexpr E6 E6_CONST_2 = Message4_M5_M17_E6_E6_CONST_2;
  static constexpr E6 E6_CONST_3 = Message4_M5_M17_E6_E6_CONST_3;
  static constexpr E6 E6_CONST_4 = Message4_M5_M17_E6_E6_CONST_4;
  static constexpr E6 E6_CONST_5 = Message4_M5_M17_E6_E6_CONST_5;
  static inline bool E6_IsValid(int value) {
    return Message4_M5_M17_E6_IsValid(value);
  }
  static constexpr E6 E6_MIN = Message4_M5_M17_E6_E6_MIN;
  static constexpr E6 E6_MAX = Message4_M5_M17_E6_E6_MAX;
  static constexpr int E6_ARRAYSIZE = Message4_M5_M17_E6_E6_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E6_descriptor() {
    return Message4_M5_M17_E6_descriptor();
  }
  template <typename T>
  static inline const std::string& E6_Name(T value) {
    return Message4_M5_M17_E6_Name(value);
  }
  static inline bool E6_Parse(absl::string_view name, E6* value) {
    return Message4_M5_M17_E6_Parse(name, value);
  }
  using E7 = Message4_M5_M17_E7;
  static constexpr E7 E7_UNSPECIFIED = Message4_M5_M17_E7_E7_UNSPECIFIED;
  static constexpr E7 E7_CONST_1 = Message4_M5_M17_E7_E7_CONST_1;
  static constexpr E7 E7_CONST_2 = Message4_M5_M17_E7_E7_CONST_2;
  static constexpr E7 E7_CONST_3 = Message4_M5_M17_E7_E7_CONST_3;
  static constexpr E7 E7_CONST_4 = Message4_M5_M17_E7_E7_CONST_4;
  static constexpr E7 E7_CONST_5 = Message4_M5_M17_E7_E7_CONST_5;
  static inline bool E7_IsValid(int value) {
    return Message4_M5_M17_E7_IsValid(value);
  }
  static constexpr E7 E7_MIN = Message4_M5_M17_E7_E7_MIN;
  static constexpr E7 E7_MAX = Message4_M5_M17_E7_E7_MAX;
  static constexpr int E7_ARRAYSIZE = Message4_M5_M17_E7_E7_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E7_descriptor() {
    return Message4_M5_M17_E7_descriptor();
  }
  template <typename T>
  static inline const std::string& E7_Name(T value) {
    return Message4_M5_M17_E7_Name(value);
  }
  static inline bool E7_Parse(absl::string_view name, E7* value) {
    return Message4_M5_M17_E7_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_6())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_6()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      sizes.push_back(end_addr - start_addr + sizeof(f_6()));
      sizes.push_back(f_4().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 7,
    kF0FieldNumber = 2,
    kF1FieldNumber = 4,
    kF2FieldNumber = 5,
    kF3FieldNumber = 6,
    kF5FieldNumber = 8,
    kF6FieldNumber = 9,
  };
  // optional string f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message4.M5.M17.E5 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M5_M17_E5 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M5_M17_E5 value);

  private:
  ::fleetbench::proto::Message4_M5_M17_E5 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M5_M17_E5 value);

  public:
  // optional .fleetbench.proto.Message4.M5.M17.E6 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M5_M17_E6 f_1() const;
  void set_f_1(::fleetbench::proto::Message4_M5_M17_E6 value);

  private:
  ::fleetbench::proto::Message4_M5_M17_E6 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message4_M5_M17_E6 value);

  public:
  // optional int64 f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional float f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional int32 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // optional .fleetbench.proto.Message4.M5.M17.E7 f_6 = 9;
  bool has_f_6() const;
  void clear_f_6() ;
  ::fleetbench::proto::Message4_M5_M17_E7 f_6() const;
  void set_f_6(::fleetbench::proto::Message4_M5_M17_E7 value);

  private:
  ::fleetbench::proto::Message4_M5_M17_E7 _internal_f_6() const;
  void _internal_set_f_6(::fleetbench::proto::Message4_M5_M17_E7 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M5.M17)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M5_M17_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    int f_0_;
    int f_1_;
    ::int64_t f_2_;
    float f_3_;
    ::int32_t f_5_;
    int f_6_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M5_M10 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M5.M10) */ {
 public:
  inline Message4_M5_M10() : Message4_M5_M10(nullptr) {}
  ~Message4_M5_M10() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M5_M10(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M5_M10(const Message4_M5_M10& from) : Message4_M5_M10(nullptr, from) {}
  inline Message4_M5_M10(Message4_M5_M10&& from) noexcept
      : Message4_M5_M10(nullptr, std::move(from)) {}
  inline Message4_M5_M10& operator=(const Message4_M5_M10& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M5_M10& operator=(Message4_M5_M10&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M5_M10& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M5_M10* internal_default_instance() {
    return reinterpret_cast<const Message4_M5_M10*>(
        &_Message4_M5_M10_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(Message4_M5_M10& a, Message4_M5_M10& b) { a.Swap(&b); }
  inline void Swap(Message4_M5_M10* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M5_M10* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M5_M10* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M5_M10>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M5_M10& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M5_M10& from) { Message4_M5_M10::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M5_M10* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M5.M10"; }

 protected:
  explicit Message4_M5_M10(::google::protobuf::Arena* arena);
  Message4_M5_M10(::google::protobuf::Arena* arena, const Message4_M5_M10& from);
  Message4_M5_M10(::google::protobuf::Arena* arena, Message4_M5_M10&& from) noexcept
      : Message4_M5_M10(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M5.M10)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M5_M10_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M4_M12_M23_M37 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M4.M12.M23.M37) */ {
 public:
  inline Message4_M4_M12_M23_M37() : Message4_M4_M12_M23_M37(nullptr) {}
  ~Message4_M4_M12_M23_M37() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M4_M12_M23_M37(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M4_M12_M23_M37(const Message4_M4_M12_M23_M37& from) : Message4_M4_M12_M23_M37(nullptr, from) {}
  inline Message4_M4_M12_M23_M37(Message4_M4_M12_M23_M37&& from) noexcept
      : Message4_M4_M12_M23_M37(nullptr, std::move(from)) {}
  inline Message4_M4_M12_M23_M37& operator=(const Message4_M4_M12_M23_M37& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M4_M12_M23_M37& operator=(Message4_M4_M12_M23_M37&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M4_M12_M23_M37& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M4_M12_M23_M37* internal_default_instance() {
    return reinterpret_cast<const Message4_M4_M12_M23_M37*>(
        &_Message4_M4_M12_M23_M37_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(Message4_M4_M12_M23_M37& a, Message4_M4_M12_M23_M37& b) { a.Swap(&b); }
  inline void Swap(Message4_M4_M12_M23_M37* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M4_M12_M23_M37* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M4_M12_M23_M37* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M4_M12_M23_M37>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M4_M12_M23_M37& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M4_M12_M23_M37& from) { Message4_M4_M12_M23_M37::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M4_M12_M23_M37* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M4.M12.M23.M37"; }

 protected:
  explicit Message4_M4_M12_M23_M37(::google::protobuf::Arena* arena);
  Message4_M4_M12_M23_M37(::google::protobuf::Arena* arena, const Message4_M4_M12_M23_M37& from);
  Message4_M4_M12_M23_M37(::google::protobuf::Arena* arena, Message4_M4_M12_M23_M37&& from) noexcept
      : Message4_M4_M12_M23_M37(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M4.M12.M23.M37)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M4_M12_M23_M37_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M49_M65_M69_M75 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75) */ {
 public:
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M75() : Message4_M3_M9_M25_M38_M49_M65_M69_M75(nullptr) {}
  ~Message4_M3_M9_M25_M38_M49_M65_M69_M75() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M49_M65_M69_M75(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M49_M65_M69_M75(const Message4_M3_M9_M25_M38_M49_M65_M69_M75& from) : Message4_M3_M9_M25_M38_M49_M65_M69_M75(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M75(Message4_M3_M9_M25_M38_M49_M65_M69_M75&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65_M69_M75(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M75& operator=(const Message4_M3_M9_M25_M38_M49_M65_M69_M75& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M75& operator=(Message4_M3_M9_M25_M38_M49_M65_M69_M75&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M49_M65_M69_M75& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M49_M65_M69_M75* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M49_M65_M69_M75*>(
        &_Message4_M3_M9_M25_M38_M49_M65_M69_M75_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(Message4_M3_M9_M25_M38_M49_M65_M69_M75& a, Message4_M3_M9_M25_M38_M49_M65_M69_M75& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M49_M65_M69_M75* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M49_M65_M69_M75* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M49_M65_M69_M75* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M49_M65_M69_M75>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M49_M65_M69_M75& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M49_M65_M69_M75& from) { Message4_M3_M9_M25_M38_M49_M65_M69_M75::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M49_M65_M69_M75* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M49_M65_M69_M75(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M49_M65_M69_M75(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M49_M65_M69_M75& from);
  Message4_M3_M9_M25_M38_M49_M65_M69_M75(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M49_M65_M69_M75&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65_M69_M75(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M49_M65_M69_M75_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M49_M65_M69_M72 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72) */ {
 public:
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M72() : Message4_M3_M9_M25_M38_M49_M65_M69_M72(nullptr) {}
  ~Message4_M3_M9_M25_M38_M49_M65_M69_M72() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M49_M65_M69_M72(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M49_M65_M69_M72(const Message4_M3_M9_M25_M38_M49_M65_M69_M72& from) : Message4_M3_M9_M25_M38_M49_M65_M69_M72(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M72(Message4_M3_M9_M25_M38_M49_M65_M69_M72&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65_M69_M72(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M72& operator=(const Message4_M3_M9_M25_M38_M49_M65_M69_M72& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M49_M65_M69_M72& operator=(Message4_M3_M9_M25_M38_M49_M65_M69_M72&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M49_M65_M69_M72& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M49_M65_M69_M72* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M49_M65_M69_M72*>(
        &_Message4_M3_M9_M25_M38_M49_M65_M69_M72_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(Message4_M3_M9_M25_M38_M49_M65_M69_M72& a, Message4_M3_M9_M25_M38_M49_M65_M69_M72& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M49_M65_M69_M72* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M49_M65_M69_M72* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M49_M65_M69_M72* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M49_M65_M69_M72>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M49_M65_M69_M72& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M49_M65_M69_M72& from) { Message4_M3_M9_M25_M38_M49_M65_M69_M72::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M49_M65_M69_M72* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M49_M65_M69_M72(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M49_M65_M69_M72(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M49_M65_M69_M72& from);
  Message4_M3_M9_M25_M38_M49_M65_M69_M72(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M49_M65_M69_M72&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65_M69_M72(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 3,
    kF1FieldNumber = 5,
  };
  // optional fixed32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional float f_1 = 5;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M49_M65_M69_M72_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t f_0_;
    float f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M49_M64 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M64) */ {
 public:
  inline Message4_M3_M9_M25_M38_M49_M64() : Message4_M3_M9_M25_M38_M49_M64(nullptr) {}
  ~Message4_M3_M9_M25_M38_M49_M64() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M49_M64(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M49_M64(const Message4_M3_M9_M25_M38_M49_M64& from) : Message4_M3_M9_M25_M38_M49_M64(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M49_M64(Message4_M3_M9_M25_M38_M49_M64&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M64(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M49_M64& operator=(const Message4_M3_M9_M25_M38_M49_M64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M49_M64& operator=(Message4_M3_M9_M25_M38_M49_M64&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M49_M64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M49_M64* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M49_M64*>(
        &_Message4_M3_M9_M25_M38_M49_M64_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(Message4_M3_M9_M25_M38_M49_M64& a, Message4_M3_M9_M25_M38_M49_M64& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M49_M64* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M49_M64* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M49_M64* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M49_M64>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M49_M64& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M49_M64& from) { Message4_M3_M9_M25_M38_M49_M64::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M49_M64* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M49.M64"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M49_M64(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M49_M64(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M49_M64& from);
  Message4_M3_M9_M25_M38_M49_M64(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M49_M64&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M64(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional uint64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M64)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M49_M64_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M49_M59 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59) */ {
 public:
  inline Message4_M3_M9_M25_M38_M49_M59() : Message4_M3_M9_M25_M38_M49_M59(nullptr) {}
  ~Message4_M3_M9_M25_M38_M49_M59() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M49_M59(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M49_M59(const Message4_M3_M9_M25_M38_M49_M59& from) : Message4_M3_M9_M25_M38_M49_M59(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M49_M59(Message4_M3_M9_M25_M38_M49_M59&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M59(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M49_M59& operator=(const Message4_M3_M9_M25_M38_M49_M59& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M49_M59& operator=(Message4_M3_M9_M25_M38_M49_M59&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M49_M59& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M49_M59* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M49_M59*>(
        &_Message4_M3_M9_M25_M38_M49_M59_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Message4_M3_M9_M25_M38_M49_M59& a, Message4_M3_M9_M25_M38_M49_M59& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M49_M59* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M49_M59* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M49_M59* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M49_M59>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M49_M59& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M49_M59& from) { Message4_M3_M9_M25_M38_M49_M59::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M49_M59* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M49_M59(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M49_M59(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M49_M59& from);
  Message4_M3_M9_M25_M38_M49_M59(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M49_M59&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M59(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E20 = Message4_M3_M9_M25_M38_M49_M59_E20;
  static constexpr E20 E20_UNSPECIFIED = Message4_M3_M9_M25_M38_M49_M59_E20_E20_UNSPECIFIED;
  static constexpr E20 E20_CONST_1 = Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_1;
  static constexpr E20 E20_CONST_2 = Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_2;
  static constexpr E20 E20_CONST_3 = Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_3;
  static constexpr E20 E20_CONST_4 = Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_4;
  static constexpr E20 E20_CONST_5 = Message4_M3_M9_M25_M38_M49_M59_E20_E20_CONST_5;
  static inline bool E20_IsValid(int value) {
    return Message4_M3_M9_M25_M38_M49_M59_E20_IsValid(value);
  }
  static constexpr E20 E20_MIN = Message4_M3_M9_M25_M38_M49_M59_E20_E20_MIN;
  static constexpr E20 E20_MAX = Message4_M3_M9_M25_M38_M49_M59_E20_E20_MAX;
  static constexpr int E20_ARRAYSIZE = Message4_M3_M9_M25_M38_M49_M59_E20_E20_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E20_descriptor() {
    return Message4_M3_M9_M25_M38_M49_M59_E20_descriptor();
  }
  template <typename T>
  static inline const std::string& E20_Name(T value) {
    return Message4_M3_M9_M25_M38_M49_M59_E20_Name(value);
  }
  static inline bool E20_Parse(absl::string_view name, E20* value) {
    return Message4_M3_M9_M25_M38_M49_M59_E20_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59.E20 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M49_M59_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M48 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M48) */ {
 public:
  inline Message4_M3_M9_M25_M38_M48() : Message4_M3_M9_M25_M38_M48(nullptr) {}
  ~Message4_M3_M9_M25_M38_M48() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M48(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M48(const Message4_M3_M9_M25_M38_M48& from) : Message4_M3_M9_M25_M38_M48(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M48(Message4_M3_M9_M25_M38_M48&& from) noexcept
      : Message4_M3_M9_M25_M38_M48(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M48& operator=(const Message4_M3_M9_M25_M38_M48& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M48& operator=(Message4_M3_M9_M25_M38_M48&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M48& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M48* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M48*>(
        &_Message4_M3_M9_M25_M38_M48_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(Message4_M3_M9_M25_M38_M48& a, Message4_M3_M9_M25_M38_M48& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M48* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M48* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M48* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M48>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M48& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M48& from) { Message4_M3_M9_M25_M38_M48::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M48* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M48"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M48(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M48(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M48& from);
  Message4_M3_M9_M25_M38_M48(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M48&& from) noexcept
      : Message4_M3_M9_M25_M38_M48(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M48)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M48_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M47_M60_M67 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67) */ {
 public:
  inline Message4_M3_M9_M25_M38_M47_M60_M67() : Message4_M3_M9_M25_M38_M47_M60_M67(nullptr) {}
  ~Message4_M3_M9_M25_M38_M47_M60_M67() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M47_M60_M67(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M47_M60_M67(const Message4_M3_M9_M25_M38_M47_M60_M67& from) : Message4_M3_M9_M25_M38_M47_M60_M67(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M47_M60_M67(Message4_M3_M9_M25_M38_M47_M60_M67&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M60_M67(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M47_M60_M67& operator=(const Message4_M3_M9_M25_M38_M47_M60_M67& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M47_M60_M67& operator=(Message4_M3_M9_M25_M38_M47_M60_M67&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M47_M60_M67& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M47_M60_M67* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M47_M60_M67*>(
        &_Message4_M3_M9_M25_M38_M47_M60_M67_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Message4_M3_M9_M25_M38_M47_M60_M67& a, Message4_M3_M9_M25_M38_M47_M60_M67& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M47_M60_M67* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M47_M60_M67* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M47_M60_M67* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M47_M60_M67>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M47_M60_M67& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M47_M60_M67& from) { Message4_M3_M9_M25_M38_M47_M60_M67::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M47_M60_M67* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M47_M60_M67(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M47_M60_M67(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M47_M60_M67& from);
  Message4_M3_M9_M25_M38_M47_M60_M67(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M47_M60_M67&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M60_M67(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      63, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M47_M60_M67_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M47_M53_M71_M74 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74) */ {
 public:
  inline Message4_M3_M9_M25_M38_M47_M53_M71_M74() : Message4_M3_M9_M25_M38_M47_M53_M71_M74(nullptr) {}
  ~Message4_M3_M9_M25_M38_M47_M53_M71_M74() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M47_M53_M71_M74(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M47_M53_M71_M74(const Message4_M3_M9_M25_M38_M47_M53_M71_M74& from) : Message4_M3_M9_M25_M38_M47_M53_M71_M74(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M47_M53_M71_M74(Message4_M3_M9_M25_M38_M47_M53_M71_M74&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M53_M71_M74(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M47_M53_M71_M74& operator=(const Message4_M3_M9_M25_M38_M47_M53_M71_M74& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M47_M53_M71_M74& operator=(Message4_M3_M9_M25_M38_M47_M53_M71_M74&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M47_M53_M71_M74& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M47_M53_M71_M74* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M47_M53_M71_M74*>(
        &_Message4_M3_M9_M25_M38_M47_M53_M71_M74_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Message4_M3_M9_M25_M38_M47_M53_M71_M74& a, Message4_M3_M9_M25_M38_M47_M53_M71_M74& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M47_M53_M71_M74* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M47_M53_M71_M74* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M47_M53_M71_M74* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M47_M53_M71_M74>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M47_M53_M71_M74& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M47_M53_M71_M74& from) { Message4_M3_M9_M25_M38_M47_M53_M71_M74::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M47_M53_M71_M74* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M47_M53_M71_M74(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M47_M53_M71_M74(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M47_M53_M71_M74& from);
  Message4_M3_M9_M25_M38_M47_M53_M71_M74(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M47_M53_M71_M74&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M53_M71_M74(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E26 = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26;
  static constexpr E26 E26_UNSPECIFIED = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_UNSPECIFIED;
  static constexpr E26 E26_CONST_1 = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_1;
  static constexpr E26 E26_CONST_2 = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_2;
  static constexpr E26 E26_CONST_3 = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_3;
  static constexpr E26 E26_CONST_4 = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_4;
  static constexpr E26 E26_CONST_5 = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_CONST_5;
  static inline bool E26_IsValid(int value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_IsValid(value);
  }
  static constexpr E26 E26_MIN = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_MIN;
  static constexpr E26 E26_MAX = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_MAX;
  static constexpr int E26_ARRAYSIZE = Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_E26_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E26_descriptor() {
    return Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_descriptor();
  }
  template <typename T>
  static inline const std::string& E26_Name(T value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_Name(value);
  }
  static inline bool E26_Parse(absl::string_view name, E26* value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_3())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_3()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      sizes.push_back(end_addr - start_addr + sizeof(f_3()));
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF4FieldNumber = 7,
    kF3FieldNumber = 5,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional uint32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint32_t f_1() const;
  void set_f_1(::uint32_t value);

  private:
  ::uint32_t _internal_f_1() const;
  void _internal_set_f_1(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.E26 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 f_2() const;
  void set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 value);

  public:
  // optional int64 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional int32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int32_t f_3() const;
  void set_f_3(::int32_t value);

  private:
  ::int32_t _internal_f_3() const;
  void _internal_set_f_3(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      67, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M47_M53_M71_M74_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::uint32_t f_1_;
    int f_2_;
    ::int64_t f_4_;
    ::int32_t f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M45 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M45) */ {
 public:
  inline Message4_M3_M9_M25_M38_M45() : Message4_M3_M9_M25_M38_M45(nullptr) {}
  ~Message4_M3_M9_M25_M38_M45() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M45(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M45(const Message4_M3_M9_M25_M38_M45& from) : Message4_M3_M9_M25_M38_M45(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M45(Message4_M3_M9_M25_M38_M45&& from) noexcept
      : Message4_M3_M9_M25_M38_M45(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M45& operator=(const Message4_M3_M9_M25_M38_M45& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M45& operator=(Message4_M3_M9_M25_M38_M45&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M45& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M45* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M45*>(
        &_Message4_M3_M9_M25_M38_M45_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Message4_M3_M9_M25_M38_M45& a, Message4_M3_M9_M25_M38_M45& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M45* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M45* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M45* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M45>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M45& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M45& from) { Message4_M3_M9_M25_M38_M45::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M45* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M45"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M45(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M45(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M45& from);
  Message4_M3_M9_M25_M38_M45(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M45&& from) noexcept
      : Message4_M3_M9_M25_M38_M45(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using E18 = Message4_M3_M9_M25_M38_M45_E18;
  static constexpr E18 E18_UNSPECIFIED = Message4_M3_M9_M25_M38_M45_E18_E18_UNSPECIFIED;
  static constexpr E18 E18_CONST_1 = Message4_M3_M9_M25_M38_M45_E18_E18_CONST_1;
  static constexpr E18 E18_CONST_2 = Message4_M3_M9_M25_M38_M45_E18_E18_CONST_2;
  static constexpr E18 E18_CONST_3 = Message4_M3_M9_M25_M38_M45_E18_E18_CONST_3;
  static constexpr E18 E18_CONST_4 = Message4_M3_M9_M25_M38_M45_E18_E18_CONST_4;
  static constexpr E18 E18_CONST_5 = Message4_M3_M9_M25_M38_M45_E18_E18_CONST_5;
  static inline bool E18_IsValid(int value) {
    return Message4_M3_M9_M25_M38_M45_E18_IsValid(value);
  }
  static constexpr E18 E18_MIN = Message4_M3_M9_M25_M38_M45_E18_E18_MIN;
  static constexpr E18 E18_MAX = Message4_M3_M9_M25_M38_M45_E18_E18_MAX;
  static constexpr int E18_ARRAYSIZE = Message4_M3_M9_M25_M38_M45_E18_E18_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E18_descriptor() {
    return Message4_M3_M9_M25_M38_M45_E18_descriptor();
  }
  template <typename T>
  static inline const std::string& E18_Name(T value) {
    return Message4_M3_M9_M25_M38_M45_E18_Name(value);
  }
  static inline bool E18_Parse(absl::string_view name, E18* value) {
    return Message4_M3_M9_M25_M38_M45_E18_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M45.E18 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M45)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M45_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M21 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M21) */ {
 public:
  inline Message4_M3_M9_M21() : Message4_M3_M9_M21(nullptr) {}
  ~Message4_M3_M9_M21() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M21(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M21(const Message4_M3_M9_M21& from) : Message4_M3_M9_M21(nullptr, from) {}
  inline Message4_M3_M9_M21(Message4_M3_M9_M21&& from) noexcept
      : Message4_M3_M9_M21(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M21& operator=(const Message4_M3_M9_M21& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M21& operator=(Message4_M3_M9_M21&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M21& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M21* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M21*>(
        &_Message4_M3_M9_M21_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Message4_M3_M9_M21& a, Message4_M3_M9_M21& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M21* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M21* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M21* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M21>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M21& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M21& from) { Message4_M3_M9_M21::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M21* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M21"; }

 protected:
  explicit Message4_M3_M9_M21(::google::protobuf::Arena* arena);
  Message4_M3_M9_M21(::google::protobuf::Arena* arena, const Message4_M3_M9_M21& from);
  Message4_M3_M9_M21(::google::protobuf::Arena* arena, Message4_M3_M9_M21&& from) noexcept
      : Message4_M3_M9_M21(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M21)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M21_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M2 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M2) */ {
 public:
  inline Message4_M2() : Message4_M2(nullptr) {}
  ~Message4_M2() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M2(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M2(const Message4_M2& from) : Message4_M2(nullptr, from) {}
  inline Message4_M2(Message4_M2&& from) noexcept
      : Message4_M2(nullptr, std::move(from)) {}
  inline Message4_M2& operator=(const Message4_M2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M2& operator=(Message4_M2&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M2* internal_default_instance() {
    return reinterpret_cast<const Message4_M2*>(
        &_Message4_M2_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Message4_M2& a, Message4_M2& b) { a.Swap(&b); }
  inline void Swap(Message4_M2* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M2* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M2* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M2>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M2& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M2& from) { Message4_M2::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M2* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M2"; }

 protected:
  explicit Message4_M2(::google::protobuf::Arena* arena);
  Message4_M2(::google::protobuf::Arena* arena, const Message4_M2& from);
  Message4_M2(::google::protobuf::Arena* arena, Message4_M2&& from) noexcept
      : Message4_M2(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional int64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M2)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M2_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M1_M13 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M1.M13) */ {
 public:
  inline Message4_M1_M13() : Message4_M1_M13(nullptr) {}
  ~Message4_M1_M13() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M1_M13(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M1_M13(const Message4_M1_M13& from) : Message4_M1_M13(nullptr, from) {}
  inline Message4_M1_M13(Message4_M1_M13&& from) noexcept
      : Message4_M1_M13(nullptr, std::move(from)) {}
  inline Message4_M1_M13& operator=(const Message4_M1_M13& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M1_M13& operator=(Message4_M1_M13&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M1_M13& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M1_M13* internal_default_instance() {
    return reinterpret_cast<const Message4_M1_M13*>(
        &_Message4_M1_M13_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Message4_M1_M13& a, Message4_M1_M13& b) { a.Swap(&b); }
  inline void Swap(Message4_M1_M13* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M1_M13* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M1_M13* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M1_M13>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M1_M13& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M1_M13& from) { Message4_M1_M13::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M1_M13* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M1.M13"; }

 protected:
  explicit Message4_M1_M13(::google::protobuf::Arena* arena);
  Message4_M1_M13(::google::protobuf::Arena* arena, const Message4_M1_M13& from);
  Message4_M1_M13(::google::protobuf::Arena* arena, Message4_M1_M13&& from) noexcept
      : Message4_M1_M13(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M1.M13)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M1_M13_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M18_M22 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M18.M22) */ {
 public:
  inline Message4_M7_M18_M22() : Message4_M7_M18_M22(nullptr) {}
  ~Message4_M7_M18_M22() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M18_M22(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M18_M22(const Message4_M7_M18_M22& from) : Message4_M7_M18_M22(nullptr, from) {}
  inline Message4_M7_M18_M22(Message4_M7_M18_M22&& from) noexcept
      : Message4_M7_M18_M22(nullptr, std::move(from)) {}
  inline Message4_M7_M18_M22& operator=(const Message4_M7_M18_M22& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M18_M22& operator=(Message4_M7_M18_M22&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M18_M22& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M18_M22* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M18_M22*>(
        &_Message4_M7_M18_M22_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 88;
  friend void swap(Message4_M7_M18_M22& a, Message4_M7_M18_M22& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M18_M22* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M18_M22* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M18_M22* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M18_M22>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M18_M22& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M18_M22& from) { Message4_M7_M18_M22::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M18_M22* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M18.M22"; }

 protected:
  explicit Message4_M7_M18_M22(::google::protobuf::Arena* arena);
  Message4_M7_M18_M22(::google::protobuf::Arena* arena, const Message4_M7_M18_M22& from);
  Message4_M7_M18_M22(::google::protobuf::Arena* arena, Message4_M7_M18_M22&& from) noexcept
      : Message4_M7_M18_M22(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M36 = Message4_M7_M18_M22_M36;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message4.M7.M18.M22.M36 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M7_M18_M22_M36* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message4_M7_M18_M22_M36& f_1(int index) const;
  ::fleetbench::proto::Message4_M7_M18_M22_M36* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>& f_1() const;
  // optional bool f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  bool f_0() const;
  void set_f_0(bool value);

  private:
  bool _internal_f_0() const;
  void _internal_set_f_0(bool value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M18.M22)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M18_M22_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M18_M22_M36 > f_1_;
    bool f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M52 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M52) */ {
 public:
  inline Message4_M7_M16_M28_M35_M52() : Message4_M7_M16_M28_M35_M52(nullptr) {}
  ~Message4_M7_M16_M28_M35_M52() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M52(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M52(const Message4_M7_M16_M28_M35_M52& from) : Message4_M7_M16_M28_M35_M52(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M52(Message4_M7_M16_M28_M35_M52&& from) noexcept
      : Message4_M7_M16_M28_M35_M52(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M52& operator=(const Message4_M7_M16_M28_M35_M52& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M52& operator=(Message4_M7_M16_M28_M35_M52&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M52& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M52* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M52*>(
        &_Message4_M7_M16_M28_M35_M52_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 83;
  friend void swap(Message4_M7_M16_M28_M35_M52& a, Message4_M7_M16_M28_M35_M52& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M52* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M52* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M52* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M52>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M52& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M52& from) { Message4_M7_M16_M28_M35_M52::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M52* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M52"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M52(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M52(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M52& from);
  Message4_M7_M16_M28_M35_M52(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M52&& from) noexcept
      : Message4_M7_M16_M28_M35_M52(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M57 = Message4_M7_M16_M28_M35_M52_M57;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* release_f_2();
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57& _internal_f_2() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* _internal_mutable_f_2();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M52)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M52_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M43_M62 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62) */ {
 public:
  inline Message4_M7_M16_M28_M35_M43_M62() : Message4_M7_M16_M28_M35_M43_M62(nullptr) {}
  ~Message4_M7_M16_M28_M35_M43_M62() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M43_M62(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M43_M62(const Message4_M7_M16_M28_M35_M43_M62& from) : Message4_M7_M16_M28_M35_M43_M62(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M43_M62(Message4_M7_M16_M28_M35_M43_M62&& from) noexcept
      : Message4_M7_M16_M28_M35_M43_M62(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M43_M62& operator=(const Message4_M7_M16_M28_M35_M43_M62& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M43_M62& operator=(Message4_M7_M16_M28_M35_M43_M62&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M43_M62& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M43_M62* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M43_M62*>(
        &_Message4_M7_M16_M28_M35_M43_M62_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 78;
  friend void swap(Message4_M7_M16_M28_M35_M43_M62& a, Message4_M7_M16_M28_M35_M43_M62& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M43_M62* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M43_M62* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M43_M62* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M43_M62>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M43_M62& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M43_M62& from) { Message4_M7_M16_M28_M35_M43_M62::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M43_M62* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M43_M62(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M43_M62(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M43_M62& from);
  Message4_M7_M16_M28_M35_M43_M62(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M43_M62&& from) noexcept
      : Message4_M7_M16_M28_M35_M43_M62(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M68 = Message4_M7_M16_M28_M35_M43_M62_M68;
  using M70 = Message4_M7_M16_M28_M35_M43_M62_M70;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70& f_3(int index) const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>& f_3() const;
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M68 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* release_f_2();
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68& _internal_f_2() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional fixed32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint32_t f_1() const;
  void set_f_1(::uint32_t value);

  private:
  ::uint32_t _internal_f_1() const;
  void _internal_set_f_1(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M43_M62_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70 > f_3_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* f_2_;
    ::int32_t f_0_;
    ::uint32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 57;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M91 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91;
  using M92 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M92 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& f_3(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>& f_3() const;
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M91 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* release_f_2();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& _internal_f_2() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92 > f_3_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 53;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M85 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85;
  using E29 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29;
  static constexpr E29 E29_UNSPECIFIED = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_UNSPECIFIED;
  static constexpr E29 E29_CONST_1 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_1;
  static constexpr E29 E29_CONST_2 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_2;
  static constexpr E29 E29_CONST_3 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_3;
  static constexpr E29 E29_CONST_4 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_4;
  static constexpr E29 E29_CONST_5 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_CONST_5;
  static inline bool E29_IsValid(int value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_IsValid(value);
  }
  static constexpr E29 E29_MIN = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_MIN;
  static constexpr E29 E29_MAX = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_MAX;
  static constexpr int E29_ARRAYSIZE = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_E29_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E29_descriptor() {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_descriptor();
  }
  template <typename T>
  static inline const std::string& E29_Name(T value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_Name(value);
  }
  static inline bool E29_Parse(absl::string_view name, E29* value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* release_f_1();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& _internal_f_1() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.E29 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 value);

  private:
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 51;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M81 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF0FieldNumber = 2,
    kF1FieldNumber = 4,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* release_f_4();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& _internal_f_4() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* _internal_mutable_f_4();

  public:
  // optional double f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // optional float f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* f_4_;
    double f_0_;
    float f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M30 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M30) */ {
 public:
  inline Message4_M6_M19_M30() : Message4_M6_M19_M30(nullptr) {}
  ~Message4_M6_M19_M30() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M30(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M30(const Message4_M6_M19_M30& from) : Message4_M6_M19_M30(nullptr, from) {}
  inline Message4_M6_M19_M30(Message4_M6_M19_M30&& from) noexcept
      : Message4_M6_M19_M30(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M30& operator=(const Message4_M6_M19_M30& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M30& operator=(Message4_M6_M19_M30&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M30& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M30* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M30*>(
        &_Message4_M6_M19_M30_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(Message4_M6_M19_M30& a, Message4_M6_M19_M30& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M30* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M30* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M30* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M30>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M30& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M30& from) { Message4_M6_M19_M30::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M30* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M30"; }

 protected:
  explicit Message4_M6_M19_M30(::google::protobuf::Arena* arena);
  Message4_M6_M19_M30(::google::protobuf::Arena* arena, const Message4_M6_M19_M30& from);
  Message4_M6_M19_M30(::google::protobuf::Arena* arena, Message4_M6_M19_M30&& from) noexcept
      : Message4_M6_M19_M30(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M32 = Message4_M6_M19_M30_M32;
  using M39 = Message4_M6_M19_M30_M39;
  using E13 = Message4_M6_M19_M30_E13;
  static constexpr E13 E13_UNSPECIFIED = Message4_M6_M19_M30_E13_E13_UNSPECIFIED;
  static constexpr E13 E13_CONST_1 = Message4_M6_M19_M30_E13_E13_CONST_1;
  static constexpr E13 E13_CONST_2 = Message4_M6_M19_M30_E13_E13_CONST_2;
  static constexpr E13 E13_CONST_3 = Message4_M6_M19_M30_E13_E13_CONST_3;
  static constexpr E13 E13_CONST_4 = Message4_M6_M19_M30_E13_E13_CONST_4;
  static constexpr E13 E13_CONST_5 = Message4_M6_M19_M30_E13_E13_CONST_5;
  static inline bool E13_IsValid(int value) {
    return Message4_M6_M19_M30_E13_IsValid(value);
  }
  static constexpr E13 E13_MIN = Message4_M6_M19_M30_E13_E13_MIN;
  static constexpr E13 E13_MAX = Message4_M6_M19_M30_E13_E13_MAX;
  static constexpr int E13_ARRAYSIZE = Message4_M6_M19_M30_E13_E13_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E13_descriptor() {
    return Message4_M6_M19_M30_E13_descriptor();
  }
  template <typename T>
  static inline const std::string& E13_Name(T value) {
    return Message4_M6_M19_M30_E13_Name(value);
  }
  static inline bool E13_Parse(absl::string_view name, E13* value) {
    return Message4_M6_M19_M30_E13_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      mutable_f_9()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_10().size());
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      mutable_f_9()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      mutable_f_9()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_10().size());
      for (int i = 0; i < f_10_size(); ++i) {
        mutable_f_10(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_3().size());
      mutable_f_9()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_10_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_10_entries; ++i) {
        auto* new_msg = add_f_10();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_10(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      idx = mutable_f_9()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_10_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_10_entries; ++i) {
        auto* new_msg = add_f_10();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_10(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      idx = mutable_f_9()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF10FieldNumber = 11,
    kF3FieldNumber = 6,
    kF9FieldNumber = 10,
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF4FieldNumber = 8,
    kF5FieldNumber = 9,
  };
  // repeated .fleetbench.proto.Message4.M6.M19.M30.M39 f_10 = 11;
  int f_10_size() const;
  private:
  int _internal_f_10_size() const;

  public:
  void clear_f_10() ;
  ::fleetbench::proto::Message4_M6_M19_M30_M39* mutable_f_10(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>* mutable_f_10();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>& _internal_f_10() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>* _internal_mutable_f_10();
  public:
  const ::fleetbench::proto::Message4_M6_M19_M30_M39& f_10(int index) const;
  ::fleetbench::proto::Message4_M6_M19_M30_M39* add_f_10();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>& f_10() const;
  // optional string f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M30.M32 f_9 = 10;
  bool has_f_9() const;
  void clear_f_9() ;
  const ::fleetbench::proto::Message4_M6_M19_M30_M32& f_9() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M30_M32* release_f_9();
  ::fleetbench::proto::Message4_M6_M19_M30_M32* mutable_f_9();
  void set_allocated_f_9(::fleetbench::proto::Message4_M6_M19_M30_M32* value);
  void unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message4_M6_M19_M30_M32* value);
  ::fleetbench::proto::Message4_M6_M19_M30_M32* unsafe_arena_release_f_9();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M30_M32& _internal_f_9() const;
  ::fleetbench::proto::Message4_M6_M19_M30_M32* _internal_mutable_f_9();

  public:
  // optional int64 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M30.E13 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M6_M19_M30_E13 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M6_M19_M30_E13 value);

  private:
  ::fleetbench::proto::Message4_M6_M19_M30_E13 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M6_M19_M30_E13 value);

  public:
  // optional bool f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  bool f_2() const;
  void set_f_2(bool value);

  private:
  bool _internal_f_2() const;
  void _internal_set_f_2(bool value);

  public:
  // optional int64 f_4 = 8;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int64_t f_4() const;
  void set_f_4(::int64_t value);

  private:
  ::int64_t _internal_f_4() const;
  void _internal_set_f_4(::int64_t value);

  public:
  // optional uint64 f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  ::uint64_t f_5() const;
  void set_f_5(::uint64_t value);

  private:
  ::uint64_t _internal_f_5() const;
  void _internal_set_f_5(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M30)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 3,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M30_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M6_M19_M30_M39 > f_10_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::fleetbench::proto::Message4_M6_M19_M30_M32* f_9_;
    ::int64_t f_1_;
    int f_0_;
    bool f_2_;
    ::int64_t f_4_;
    ::uint64_t f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M27_M31_M42 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M27.M31.M42) */ {
 public:
  inline Message4_M6_M19_M27_M31_M42() : Message4_M6_M19_M27_M31_M42(nullptr) {}
  ~Message4_M6_M19_M27_M31_M42() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M27_M31_M42(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M27_M31_M42(const Message4_M6_M19_M27_M31_M42& from) : Message4_M6_M19_M27_M31_M42(nullptr, from) {}
  inline Message4_M6_M19_M27_M31_M42(Message4_M6_M19_M27_M31_M42&& from) noexcept
      : Message4_M6_M19_M27_M31_M42(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M27_M31_M42& operator=(const Message4_M6_M19_M27_M31_M42& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M27_M31_M42& operator=(Message4_M6_M19_M27_M31_M42&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M27_M31_M42& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M27_M31_M42* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M27_M31_M42*>(
        &_Message4_M6_M19_M27_M31_M42_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(Message4_M6_M19_M27_M31_M42& a, Message4_M6_M19_M27_M31_M42& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M27_M31_M42* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M27_M31_M42* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M27_M31_M42* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M27_M31_M42>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M27_M31_M42& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M27_M31_M42& from) { Message4_M6_M19_M27_M31_M42::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M27_M31_M42* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M27.M31.M42"; }

 protected:
  explicit Message4_M6_M19_M27_M31_M42(::google::protobuf::Arena* arena);
  Message4_M6_M19_M27_M31_M42(::google::protobuf::Arena* arena, const Message4_M6_M19_M27_M31_M42& from);
  Message4_M6_M19_M27_M31_M42(::google::protobuf::Arena* arena, Message4_M6_M19_M27_M31_M42&& from) noexcept
      : Message4_M6_M19_M27_M31_M42(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M54 = Message4_M6_M19_M27_M31_M42_M54;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* release_f_1();
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* value);
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54& _internal_f_1() const;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* _internal_mutable_f_1();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M27.M31.M42)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M27_M31_M42_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* f_1_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M24_M33_M50 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M24.M33.M50) */ {
 public:
  inline Message4_M6_M19_M24_M33_M50() : Message4_M6_M19_M24_M33_M50(nullptr) {}
  ~Message4_M6_M19_M24_M33_M50() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M24_M33_M50(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M24_M33_M50(const Message4_M6_M19_M24_M33_M50& from) : Message4_M6_M19_M24_M33_M50(nullptr, from) {}
  inline Message4_M6_M19_M24_M33_M50(Message4_M6_M19_M24_M33_M50&& from) noexcept
      : Message4_M6_M19_M24_M33_M50(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M24_M33_M50& operator=(const Message4_M6_M19_M24_M33_M50& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M24_M33_M50& operator=(Message4_M6_M19_M24_M33_M50&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M24_M33_M50& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M24_M33_M50* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M24_M33_M50*>(
        &_Message4_M6_M19_M24_M33_M50_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(Message4_M6_M19_M24_M33_M50& a, Message4_M6_M19_M24_M33_M50& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M24_M33_M50* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M24_M33_M50* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M24_M33_M50* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M24_M33_M50>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M24_M33_M50& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M24_M33_M50& from) { Message4_M6_M19_M24_M33_M50::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M24_M33_M50* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M24.M33.M50"; }

 protected:
  explicit Message4_M6_M19_M24_M33_M50(::google::protobuf::Arena* arena);
  Message4_M6_M19_M24_M33_M50(::google::protobuf::Arena* arena, const Message4_M6_M19_M24_M33_M50& from);
  Message4_M6_M19_M24_M33_M50(::google::protobuf::Arena* arena, Message4_M6_M19_M24_M33_M50&& from) noexcept
      : Message4_M6_M19_M24_M33_M50(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M63 = Message4_M6_M19_M24_M33_M50_M63;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* release_f_1();
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* value);
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63& _internal_f_1() const;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* _internal_mutable_f_1();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M24.M33.M50)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M24_M33_M50_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M24_M33_M44 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M24.M33.M44) */ {
 public:
  inline Message4_M6_M19_M24_M33_M44() : Message4_M6_M19_M24_M33_M44(nullptr) {}
  ~Message4_M6_M19_M24_M33_M44() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M24_M33_M44(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M24_M33_M44(const Message4_M6_M19_M24_M33_M44& from) : Message4_M6_M19_M24_M33_M44(nullptr, from) {}
  inline Message4_M6_M19_M24_M33_M44(Message4_M6_M19_M24_M33_M44&& from) noexcept
      : Message4_M6_M19_M24_M33_M44(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M24_M33_M44& operator=(const Message4_M6_M19_M24_M33_M44& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M24_M33_M44& operator=(Message4_M6_M19_M24_M33_M44&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M24_M33_M44& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M24_M33_M44* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M24_M33_M44*>(
        &_Message4_M6_M19_M24_M33_M44_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(Message4_M6_M19_M24_M33_M44& a, Message4_M6_M19_M24_M33_M44& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M24_M33_M44* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M24_M33_M44* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M24_M33_M44* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M24_M33_M44>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M24_M33_M44& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M24_M33_M44& from) { Message4_M6_M19_M24_M33_M44::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M24_M33_M44* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M24.M33.M44"; }

 protected:
  explicit Message4_M6_M19_M24_M33_M44(::google::protobuf::Arena* arena);
  Message4_M6_M19_M24_M33_M44(::google::protobuf::Arena* arena, const Message4_M6_M19_M24_M33_M44& from);
  Message4_M6_M19_M24_M33_M44(::google::protobuf::Arena* arena, Message4_M6_M19_M24_M33_M44&& from) noexcept
      : Message4_M6_M19_M24_M33_M44(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M55 = Message4_M6_M19_M24_M33_M44_M55;
  using M56 = Message4_M6_M19_M24_M33_M44_M56;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF0FieldNumber = 1,
    kF4FieldNumber = 10,
  };
  // repeated .fleetbench.proto.Message4.M6.M19.M24.M33.M44.M55 f_1 = 4;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55& f_1(int index) const;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>& f_1() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M24.M33.M44.M56 f_4 = 10;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* release_f_4();
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* value);
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56& _internal_f_4() const;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* _internal_mutable_f_4();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M24.M33.M44)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M24_M33_M44_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55 > f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M5 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M5) */ {
 public:
  inline Message4_M5() : Message4_M5(nullptr) {}
  ~Message4_M5() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M5(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M5(const Message4_M5& from) : Message4_M5(nullptr, from) {}
  inline Message4_M5(Message4_M5&& from) noexcept
      : Message4_M5(nullptr, std::move(from)) {}
  inline Message4_M5& operator=(const Message4_M5& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M5& operator=(Message4_M5&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M5& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M5* internal_default_instance() {
    return reinterpret_cast<const Message4_M5*>(
        &_Message4_M5_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(Message4_M5& a, Message4_M5& b) { a.Swap(&b); }
  inline void Swap(Message4_M5* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M5* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M5* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M5>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M5& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M5& from) { Message4_M5::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M5* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M5"; }

 protected:
  explicit Message4_M5(::google::protobuf::Arena* arena);
  Message4_M5(::google::protobuf::Arena* arena, const Message4_M5& from);
  Message4_M5(::google::protobuf::Arena* arena, Message4_M5&& from) noexcept
      : Message4_M5(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M10 = Message4_M5_M10;
  using M17 = Message4_M5_M17;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message4.M5.M10 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M5_M10* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message4_M5_M10& f_1(int index) const;
  ::fleetbench::proto::Message4_M5_M10* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>& f_1() const;
  // optional .fleetbench.proto.Message4.M5.M17 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M5_M17& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M5_M17* release_f_2();
  ::fleetbench::proto::Message4_M5_M17* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M5_M17* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M5_M17* value);
  ::fleetbench::proto::Message4_M5_M17* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M5_M17& _internal_f_2() const;
  ::fleetbench::proto::Message4_M5_M17* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M5)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M5_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M5_M10 > f_1_;
    ::fleetbench::proto::Message4_M5_M17* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M4_M12_M23 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M4.M12.M23) */ {
 public:
  inline Message4_M4_M12_M23() : Message4_M4_M12_M23(nullptr) {}
  ~Message4_M4_M12_M23() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M4_M12_M23(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M4_M12_M23(const Message4_M4_M12_M23& from) : Message4_M4_M12_M23(nullptr, from) {}
  inline Message4_M4_M12_M23(Message4_M4_M12_M23&& from) noexcept
      : Message4_M4_M12_M23(nullptr, std::move(from)) {}
  inline Message4_M4_M12_M23& operator=(const Message4_M4_M12_M23& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M4_M12_M23& operator=(Message4_M4_M12_M23&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M4_M12_M23& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M4_M12_M23* internal_default_instance() {
    return reinterpret_cast<const Message4_M4_M12_M23*>(
        &_Message4_M4_M12_M23_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(Message4_M4_M12_M23& a, Message4_M4_M12_M23& b) { a.Swap(&b); }
  inline void Swap(Message4_M4_M12_M23* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M4_M12_M23* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M4_M12_M23* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M4_M12_M23>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M4_M12_M23& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M4_M12_M23& from) { Message4_M4_M12_M23::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M4_M12_M23* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M4.M12.M23"; }

 protected:
  explicit Message4_M4_M12_M23(::google::protobuf::Arena* arena);
  Message4_M4_M12_M23(::google::protobuf::Arena* arena, const Message4_M4_M12_M23& from);
  Message4_M4_M12_M23(::google::protobuf::Arena* arena, Message4_M4_M12_M23&& from) noexcept
      : Message4_M4_M12_M23(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M37 = Message4_M4_M12_M23_M37;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message4.M4.M12.M23.M37 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M4_M12_M23_M37& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M4_M12_M23_M37* release_f_3();
  ::fleetbench::proto::Message4_M4_M12_M23_M37* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M4_M12_M23_M37* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M4_M12_M23_M37* value);
  ::fleetbench::proto::Message4_M4_M12_M23_M37* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M4_M12_M23_M37& _internal_f_3() const;
  ::fleetbench::proto::Message4_M4_M12_M23_M37* _internal_mutable_f_3();

  public:
  // optional float f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M4.M12.M23)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M4_M12_M23_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M4_M12_M23_M37* f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M49_M65_M69 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69) */ {
 public:
  inline Message4_M3_M9_M25_M38_M49_M65_M69() : Message4_M3_M9_M25_M38_M49_M65_M69(nullptr) {}
  ~Message4_M3_M9_M25_M38_M49_M65_M69() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M49_M65_M69(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M49_M65_M69(const Message4_M3_M9_M25_M38_M49_M65_M69& from) : Message4_M3_M9_M25_M38_M49_M65_M69(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M49_M65_M69(Message4_M3_M9_M25_M38_M49_M65_M69&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65_M69(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M49_M65_M69& operator=(const Message4_M3_M9_M25_M38_M49_M65_M69& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M49_M65_M69& operator=(Message4_M3_M9_M25_M38_M49_M65_M69&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M49_M65_M69& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M49_M65_M69* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M49_M65_M69*>(
        &_Message4_M3_M9_M25_M38_M49_M65_M69_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(Message4_M3_M9_M25_M38_M49_M65_M69& a, Message4_M3_M9_M25_M38_M49_M65_M69& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M49_M65_M69* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M49_M65_M69* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M49_M65_M69* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M49_M65_M69>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M49_M65_M69& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M49_M65_M69& from) { Message4_M3_M9_M25_M38_M49_M65_M69::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M49_M65_M69* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M49_M65_M69(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M49_M65_M69(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M49_M65_M69& from);
  Message4_M3_M9_M25_M38_M49_M65_M69(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M49_M65_M69&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65_M69(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M72 = Message4_M3_M9_M25_M38_M49_M65_M69_M72;
  using M75 = Message4_M3_M9_M25_M38_M49_M65_M69_M75;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF4FieldNumber = 7,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* release_f_3();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72& _internal_f_3() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* release_f_4();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75& _internal_f_4() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* _internal_mutable_f_4();

  public:
  // optional int64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M49_M65_M69_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* f_3_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* f_4_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M47_M60 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60) */ {
 public:
  inline Message4_M3_M9_M25_M38_M47_M60() : Message4_M3_M9_M25_M38_M47_M60(nullptr) {}
  ~Message4_M3_M9_M25_M38_M47_M60() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M47_M60(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M47_M60(const Message4_M3_M9_M25_M38_M47_M60& from) : Message4_M3_M9_M25_M38_M47_M60(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M47_M60(Message4_M3_M9_M25_M38_M47_M60&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M60(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M47_M60& operator=(const Message4_M3_M9_M25_M38_M47_M60& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M47_M60& operator=(Message4_M3_M9_M25_M38_M47_M60&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M47_M60& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M47_M60* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M47_M60*>(
        &_Message4_M3_M9_M25_M38_M47_M60_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Message4_M3_M9_M25_M38_M47_M60& a, Message4_M3_M9_M25_M38_M47_M60& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M47_M60* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M47_M60* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M47_M60* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M47_M60>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M47_M60& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M47_M60& from) { Message4_M3_M9_M25_M38_M47_M60::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M47_M60* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M47_M60(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M47_M60(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M47_M60& from);
  Message4_M3_M9_M25_M38_M47_M60(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M47_M60&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M60(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M67 = Message4_M3_M9_M25_M38_M47_M60_M67;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      mutable_f_9()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      mutable_f_9()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      mutable_f_9()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      mutable_f_9()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_9()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_9()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF9FieldNumber = 10,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF1FieldNumber = 3,
    kF3FieldNumber = 5,
    kF4FieldNumber = 9,
  };
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67 f_9 = 10;
  bool has_f_9() const;
  void clear_f_9() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67& f_9() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* release_f_9();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* mutable_f_9();
  void set_allocated_f_9(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* value);
  void unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* unsafe_arena_release_f_9();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67& _internal_f_9() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* _internal_mutable_f_9();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional double f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  double f_2() const;
  void set_f_2(double value);

  private:
  double _internal_f_2() const;
  void _internal_set_f_2(double value);

  public:
  // optional int32 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // optional fixed32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // optional uint64 f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  ::uint64_t f_4() const;
  void set_f_4(::uint64_t value);

  private:
  ::uint64_t _internal_f_4() const;
  void _internal_set_f_4(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M47_M60_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* f_9_;
    ::int64_t f_0_;
    double f_2_;
    ::int32_t f_1_;
    ::uint32_t f_3_;
    ::uint64_t f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M47_M53_M71 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71) */ {
 public:
  inline Message4_M3_M9_M25_M38_M47_M53_M71() : Message4_M3_M9_M25_M38_M47_M53_M71(nullptr) {}
  ~Message4_M3_M9_M25_M38_M47_M53_M71() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M47_M53_M71(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M47_M53_M71(const Message4_M3_M9_M25_M38_M47_M53_M71& from) : Message4_M3_M9_M25_M38_M47_M53_M71(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M47_M53_M71(Message4_M3_M9_M25_M38_M47_M53_M71&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M53_M71(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M47_M53_M71& operator=(const Message4_M3_M9_M25_M38_M47_M53_M71& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M47_M53_M71& operator=(Message4_M3_M9_M25_M38_M47_M53_M71&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M47_M53_M71& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M47_M53_M71* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M47_M53_M71*>(
        &_Message4_M3_M9_M25_M38_M47_M53_M71_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Message4_M3_M9_M25_M38_M47_M53_M71& a, Message4_M3_M9_M25_M38_M47_M53_M71& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M47_M53_M71* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M47_M53_M71* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M47_M53_M71* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M47_M53_M71>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M47_M53_M71& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M47_M53_M71& from) { Message4_M3_M9_M25_M38_M47_M53_M71::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M47_M53_M71* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M47_M53_M71(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M47_M53_M71(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M47_M53_M71& from);
  Message4_M3_M9_M25_M38_M47_M53_M71(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M47_M53_M71&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M53_M71(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M74 = Message4_M3_M9_M25_M38_M47_M53_M71_M74;
  using E24 = Message4_M3_M9_M25_M38_M47_M53_M71_E24;
  static constexpr E24 E24_UNSPECIFIED = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_UNSPECIFIED;
  static constexpr E24 E24_CONST_1 = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_1;
  static constexpr E24 E24_CONST_2 = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_2;
  static constexpr E24 E24_CONST_3 = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_3;
  static constexpr E24 E24_CONST_4 = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_4;
  static constexpr E24 E24_CONST_5 = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_CONST_5;
  static inline bool E24_IsValid(int value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E24_IsValid(value);
  }
  static constexpr E24 E24_MIN = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_MIN;
  static constexpr E24 E24_MAX = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_MAX;
  static constexpr int E24_ARRAYSIZE = Message4_M3_M9_M25_M38_M47_M53_M71_E24_E24_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E24_descriptor() {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E24_descriptor();
  }
  template <typename T>
  static inline const std::string& E24_Name(T value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E24_Name(value);
  }
  static inline bool E24_Parse(absl::string_view name, E24* value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E24_Parse(name, value);
  }
  using E25 = Message4_M3_M9_M25_M38_M47_M53_M71_E25;
  static constexpr E25 E25_UNSPECIFIED = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_UNSPECIFIED;
  static constexpr E25 E25_CONST_1 = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_1;
  static constexpr E25 E25_CONST_2 = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_2;
  static constexpr E25 E25_CONST_3 = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_3;
  static constexpr E25 E25_CONST_4 = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_4;
  static constexpr E25 E25_CONST_5 = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_CONST_5;
  static inline bool E25_IsValid(int value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E25_IsValid(value);
  }
  static constexpr E25 E25_MIN = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_MIN;
  static constexpr E25 E25_MAX = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_MAX;
  static constexpr int E25_ARRAYSIZE = Message4_M3_M9_M25_M38_M47_M53_M71_E25_E25_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E25_descriptor() {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E25_descriptor();
  }
  template <typename T>
  static inline const std::string& E25_Name(T value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E25_Name(value);
  }
  static inline bool E25_Parse(absl::string_view name, E25* value) {
    return Message4_M3_M9_M25_M38_M47_M53_M71_E25_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_11_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_11())));
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())), f_9().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_11_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_11()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_23().size());
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      sizes_list.push_back(f_9().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_11_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_11_);
      sizes.push_back(end_addr - start_addr + sizeof(f_11()));
      sizes.push_back(f_23().size());
      for (int i = 0; i < f_23_size(); ++i) {
        mutable_f_23(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      sizes.push_back(f_3().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_9().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_11_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_23_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_23_entries; ++i) {
        auto* new_msg = add_f_23();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_23(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_9().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_23_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_23_entries; ++i) {
        auto* new_msg = add_f_23();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_23(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_9(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF23FieldNumber = 24,
    kF0FieldNumber = 2,
    kF3FieldNumber = 9,
    kF4FieldNumber = 11,
    kF9FieldNumber = 20,
    kF1FieldNumber = 4,
    kF2FieldNumber = 6,
    kF5FieldNumber = 12,
    kF6FieldNumber = 14,
    kF7FieldNumber = 16,
    kF8FieldNumber = 17,
    kF10FieldNumber = 21,
    kF11FieldNumber = 23,
  };
  // repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74 f_23 = 24;
  int f_23_size() const;
  private:
  int _internal_f_23_size() const;

  public:
  void clear_f_23() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74* mutable_f_23(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>* mutable_f_23();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>& _internal_f_23() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>* _internal_mutable_f_23();
  public:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74& f_23(int index) const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74* add_f_23();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>& f_23() const;
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_3 = 9;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional string f_4 = 11;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional bytes f_9 = 20;
  bool has_f_9() const;
  void clear_f_9() ;
  const std::string& f_9() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_9(Arg_&& arg, Args_... args);
  std::string* mutable_f_9();
  PROTOBUF_NODISCARD std::string* release_f_9();
  void set_allocated_f_9(std::string* value);

  private:
  const std::string& _internal_f_9() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_9(
      const std::string& value);
  std::string* _internal_mutable_f_9();

  public:
  // optional fixed32 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint32_t f_1() const;
  void set_f_1(::uint32_t value);

  private:
  ::uint32_t _internal_f_1() const;
  void _internal_set_f_1(::uint32_t value);

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.E24 f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 f_2() const;
  void set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 value);

  public:
  // optional int64 f_5 = 12;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.E25 f_6 = 14;
  bool has_f_6() const;
  void clear_f_6() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 f_6() const;
  void set_f_6(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 _internal_f_6() const;
  void _internal_set_f_6(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 value);

  public:
  // optional bool f_7 = 16;
  bool has_f_7() const;
  void clear_f_7() ;
  bool f_7() const;
  void set_f_7(bool value);

  private:
  bool _internal_f_7() const;
  void _internal_set_f_7(bool value);

  public:
  // optional double f_8 = 17;
  bool has_f_8() const;
  void clear_f_8() ;
  double f_8() const;
  void set_f_8(double value);

  private:
  double _internal_f_8() const;
  void _internal_set_f_8(double value);

  public:
  // optional float f_10 = 21;
  bool has_f_10() const;
  void clear_f_10() ;
  float f_10() const;
  void set_f_10(float value);

  private:
  float _internal_f_10() const;
  void _internal_set_f_10(float value);

  public:
  // optional int32 f_11 = 23;
  bool has_f_11() const;
  void clear_f_11() ;
  ::int32_t f_11() const;
  void set_f_11(::int32_t value);

  private:
  ::int32_t _internal_f_11() const;
  void _internal_set_f_11(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 3,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M47_M53_M71_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74 > f_23_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_9_;
    ::uint32_t f_1_;
    int f_2_;
    ::int64_t f_5_;
    int f_6_;
    bool f_7_;
    double f_8_;
    float f_10_;
    ::int32_t f_11_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M1 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M1) */ {
 public:
  inline Message4_M1() : Message4_M1(nullptr) {}
  ~Message4_M1() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M1(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M1(const Message4_M1& from) : Message4_M1(nullptr, from) {}
  inline Message4_M1(Message4_M1&& from) noexcept
      : Message4_M1(nullptr, std::move(from)) {}
  inline Message4_M1& operator=(const Message4_M1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M1& operator=(Message4_M1&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M1& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M1* internal_default_instance() {
    return reinterpret_cast<const Message4_M1*>(
        &_Message4_M1_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Message4_M1& a, Message4_M1& b) { a.Swap(&b); }
  inline void Swap(Message4_M1* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M1* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M1* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M1>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M1& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M1& from) { Message4_M1::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M1* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M1"; }

 protected:
  explicit Message4_M1(::google::protobuf::Arena* arena);
  Message4_M1(::google::protobuf::Arena* arena, const Message4_M1& from);
  Message4_M1(::google::protobuf::Arena* arena, Message4_M1&& from) noexcept
      : Message4_M1(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M13 = Message4_M1_M13;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message4.M1.M13 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M1_M13* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message4_M1_M13& f_1(int index) const;
  ::fleetbench::proto::Message4_M1_M13* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>& f_1() const;
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M1)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M1_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M1_M13 > f_1_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M18 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M18) */ {
 public:
  inline Message4_M7_M18() : Message4_M7_M18(nullptr) {}
  ~Message4_M7_M18() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M18(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M18(const Message4_M7_M18& from) : Message4_M7_M18(nullptr, from) {}
  inline Message4_M7_M18(Message4_M7_M18&& from) noexcept
      : Message4_M7_M18(nullptr, std::move(from)) {}
  inline Message4_M7_M18& operator=(const Message4_M7_M18& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M18& operator=(Message4_M7_M18&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M18& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M18* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M18*>(
        &_Message4_M7_M18_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 89;
  friend void swap(Message4_M7_M18& a, Message4_M7_M18& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M18* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M18* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M18* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M18>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M18& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M18& from) { Message4_M7_M18::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M18* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M18"; }

 protected:
  explicit Message4_M7_M18(::google::protobuf::Arena* arena);
  Message4_M7_M18(::google::protobuf::Arena* arena, const Message4_M7_M18& from);
  Message4_M7_M18(::google::protobuf::Arena* arena, Message4_M7_M18&& from) noexcept
      : Message4_M7_M18(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M22 = Message4_M7_M18_M22;
  using E8 = Message4_M7_M18_E8;
  static constexpr E8 E8_UNSPECIFIED = Message4_M7_M18_E8_E8_UNSPECIFIED;
  static constexpr E8 E8_CONST_1 = Message4_M7_M18_E8_E8_CONST_1;
  static constexpr E8 E8_CONST_2 = Message4_M7_M18_E8_E8_CONST_2;
  static constexpr E8 E8_CONST_3 = Message4_M7_M18_E8_E8_CONST_3;
  static constexpr E8 E8_CONST_4 = Message4_M7_M18_E8_E8_CONST_4;
  static constexpr E8 E8_CONST_5 = Message4_M7_M18_E8_E8_CONST_5;
  static inline bool E8_IsValid(int value) {
    return Message4_M7_M18_E8_IsValid(value);
  }
  static constexpr E8 E8_MIN = Message4_M7_M18_E8_E8_MIN;
  static constexpr E8 E8_MAX = Message4_M7_M18_E8_E8_MAX;
  static constexpr int E8_ARRAYSIZE = Message4_M7_M18_E8_E8_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E8_descriptor() {
    return Message4_M7_M18_E8_descriptor();
  }
  template <typename T>
  static inline const std::string& E8_Name(T value) {
    return Message4_M7_M18_E8_Name(value);
  }
  static inline bool E8_Parse(absl::string_view name, E8* value) {
    return Message4_M7_M18_E8_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M7.M18.M22 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M7_M18_M22* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message4_M7_M18_M22& f_2(int index) const;
  ::fleetbench::proto::Message4_M7_M18_M22* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>& f_2() const;
  // optional .fleetbench.proto.Message4.M7.M18.E8 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M18_E8 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M18_E8 value);

  private:
  ::fleetbench::proto::Message4_M7_M18_E8 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M18_E8 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M18)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M18_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M18_M22 > f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35_M43 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35.M43) */ {
 public:
  inline Message4_M7_M16_M28_M35_M43() : Message4_M7_M16_M28_M35_M43(nullptr) {}
  ~Message4_M7_M16_M28_M35_M43() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35_M43(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35_M43(const Message4_M7_M16_M28_M35_M43& from) : Message4_M7_M16_M28_M35_M43(nullptr, from) {}
  inline Message4_M7_M16_M28_M35_M43(Message4_M7_M16_M28_M35_M43&& from) noexcept
      : Message4_M7_M16_M28_M35_M43(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35_M43& operator=(const Message4_M7_M16_M28_M35_M43& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35_M43& operator=(Message4_M7_M16_M28_M35_M43&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35_M43& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35_M43* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35_M43*>(
        &_Message4_M7_M16_M28_M35_M43_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 79;
  friend void swap(Message4_M7_M16_M28_M35_M43& a, Message4_M7_M16_M28_M35_M43& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35_M43* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35_M43* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35_M43* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35_M43>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35_M43& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35_M43& from) { Message4_M7_M16_M28_M35_M43::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35_M43* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35.M43"; }

 protected:
  explicit Message4_M7_M16_M28_M35_M43(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35_M43(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35_M43& from);
  Message4_M7_M16_M28_M35_M43(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35_M43&& from) noexcept
      : Message4_M7_M16_M28_M35_M43(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M62 = Message4_M7_M16_M28_M35_M43_M62;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_4())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())), f_1().size() * sizeof(::int32_t)));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      mutable_f_7()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_4()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      sizes_list.push_back(f_1().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      mutable_f_7()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      sizes.push_back(end_addr - start_addr + sizeof(f_4()));
      sizes.push_back(f_1().size() * sizeof(::int32_t));
      sizes.push_back(f_0().size());
      sizes.push_back(f_2().size());
      mutable_f_7()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_4_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_1().data())));
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_1()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF0FieldNumber = 2,
    kF2FieldNumber = 5,
    kF7FieldNumber = 9,
    kF3FieldNumber = 6,
    kF4FieldNumber = 7,
  };
  // repeated int32 f_1 = 3 [packed = true];
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::int32_t f_1(int index) const;
  void set_f_1(int index, ::int32_t value);
  void add_f_1(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_1() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_1();

  public:
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional bytes f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62 f_7 = 9;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* release_f_7();
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62& _internal_f_7() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* _internal_mutable_f_7();

  public:
  // optional int64 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional int32 f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  ::int32_t f_4() const;
  void set_f_4(::int32_t value);

  private:
  ::int32_t _internal_f_4() const;
  void _internal_set_f_4(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35.M43)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      56, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_M43_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_1_;
    mutable ::google::protobuf::internal::CachedSize _f_1_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* f_7_;
    ::int64_t f_3_;
    ::int32_t f_4_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 58;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M90 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90;
  using E31 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31;
  static constexpr E31 E31_UNSPECIFIED = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_UNSPECIFIED;
  static constexpr E31 E31_CONST_1 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_1;
  static constexpr E31 E31_CONST_2 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_2;
  static constexpr E31 E31_CONST_3 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_3;
  static constexpr E31 E31_CONST_4 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_4;
  static constexpr E31 E31_CONST_5 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_CONST_5;
  static inline bool E31_IsValid(int value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_IsValid(value);
  }
  static constexpr E31 E31_MIN = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_MIN;
  static constexpr E31 E31_MAX = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_MAX;
  static constexpr int E31_ARRAYSIZE = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_E31_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E31_descriptor() {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_descriptor();
  }
  template <typename T>
  static inline const std::string& E31_Name(T value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_Name(value);
  }
  static inline bool E31_Parse(absl::string_view name, E31* value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* release_f_1();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& _internal_f_1() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.E31 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 value);

  private:
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* f_1_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 54;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M82 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& f_1(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>& f_1() const;
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      76, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82 > f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M27_M31 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M27.M31) */ {
 public:
  inline Message4_M6_M19_M27_M31() : Message4_M6_M19_M27_M31(nullptr) {}
  ~Message4_M6_M19_M27_M31() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M27_M31(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M27_M31(const Message4_M6_M19_M27_M31& from) : Message4_M6_M19_M27_M31(nullptr, from) {}
  inline Message4_M6_M19_M27_M31(Message4_M6_M19_M27_M31&& from) noexcept
      : Message4_M6_M19_M27_M31(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M27_M31& operator=(const Message4_M6_M19_M27_M31& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M27_M31& operator=(Message4_M6_M19_M27_M31&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M27_M31& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M27_M31* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M27_M31*>(
        &_Message4_M6_M19_M27_M31_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(Message4_M6_M19_M27_M31& a, Message4_M6_M19_M27_M31& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M27_M31* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M27_M31* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M27_M31* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M27_M31>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M27_M31& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M27_M31& from) { Message4_M6_M19_M27_M31::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M27_M31* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M27.M31"; }

 protected:
  explicit Message4_M6_M19_M27_M31(::google::protobuf::Arena* arena);
  Message4_M6_M19_M27_M31(::google::protobuf::Arena* arena, const Message4_M6_M19_M27_M31& from);
  Message4_M6_M19_M27_M31(::google::protobuf::Arena* arena, Message4_M6_M19_M27_M31&& from) noexcept
      : Message4_M6_M19_M27_M31(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M42 = Message4_M6_M19_M27_M31_M42;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF0FieldNumber = 4,
  };
  // optional .fleetbench.proto.Message4.M6.M19.M27.M31.M42 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* release_f_4();
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M27_M31_M42* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M27_M31_M42* value);
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42& _internal_f_4() const;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* _internal_mutable_f_4();

  public:
  // optional int32 f_0 = 4;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M27.M31)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M27_M31_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* f_4_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M24_M33 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M24.M33) */ {
 public:
  inline Message4_M6_M19_M24_M33() : Message4_M6_M19_M24_M33(nullptr) {}
  ~Message4_M6_M19_M24_M33() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M24_M33(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M24_M33(const Message4_M6_M19_M24_M33& from) : Message4_M6_M19_M24_M33(nullptr, from) {}
  inline Message4_M6_M19_M24_M33(Message4_M6_M19_M24_M33&& from) noexcept
      : Message4_M6_M19_M24_M33(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M24_M33& operator=(const Message4_M6_M19_M24_M33& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M24_M33& operator=(Message4_M6_M19_M24_M33&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M24_M33& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M24_M33* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M24_M33*>(
        &_Message4_M6_M19_M24_M33_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(Message4_M6_M19_M24_M33& a, Message4_M6_M19_M24_M33& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M24_M33* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M24_M33* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M24_M33* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M24_M33>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M24_M33& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M24_M33& from) { Message4_M6_M19_M24_M33::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M24_M33* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M24.M33"; }

 protected:
  explicit Message4_M6_M19_M24_M33(::google::protobuf::Arena* arena);
  Message4_M6_M19_M24_M33(::google::protobuf::Arena* arena, const Message4_M6_M19_M24_M33& from);
  Message4_M6_M19_M24_M33(::google::protobuf::Arena* arena, Message4_M6_M19_M24_M33&& from) noexcept
      : Message4_M6_M19_M24_M33(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M44 = Message4_M6_M19_M24_M33_M44;
  using M50 = Message4_M6_M19_M24_M33_M50;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message4.M6.M19.M24.M33.M44 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* release_f_2();
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M6_M19_M24_M33_M44* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M6_M19_M24_M33_M44* value);
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44& _internal_f_2() const;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M24.M33.M50 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* release_f_3();
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M24_M33_M50* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M24_M33_M50* value);
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50& _internal_f_3() const;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* _internal_mutable_f_3();

  public:
  // optional int32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M24.M33)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M24_M33_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* f_2_;
    ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* f_3_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M4_M12 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M4.M12) */ {
 public:
  inline Message4_M4_M12() : Message4_M4_M12(nullptr) {}
  ~Message4_M4_M12() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M4_M12(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M4_M12(const Message4_M4_M12& from) : Message4_M4_M12(nullptr, from) {}
  inline Message4_M4_M12(Message4_M4_M12&& from) noexcept
      : Message4_M4_M12(nullptr, std::move(from)) {}
  inline Message4_M4_M12& operator=(const Message4_M4_M12& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M4_M12& operator=(Message4_M4_M12&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M4_M12& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M4_M12* internal_default_instance() {
    return reinterpret_cast<const Message4_M4_M12*>(
        &_Message4_M4_M12_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(Message4_M4_M12& a, Message4_M4_M12& b) { a.Swap(&b); }
  inline void Swap(Message4_M4_M12* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M4_M12* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M4_M12* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M4_M12>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M4_M12& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M4_M12& from) { Message4_M4_M12::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M4_M12* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M4.M12"; }

 protected:
  explicit Message4_M4_M12(::google::protobuf::Arena* arena);
  Message4_M4_M12(::google::protobuf::Arena* arena, const Message4_M4_M12& from);
  Message4_M4_M12(::google::protobuf::Arena* arena, Message4_M4_M12&& from) noexcept
      : Message4_M4_M12(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M23 = Message4_M4_M12_M23;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message4.M4.M12.M23 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message4_M4_M12_M23* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message4_M4_M12_M23& f_3(int index) const;
  ::fleetbench::proto::Message4_M4_M12_M23* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>& f_3() const;
  // optional double f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M4.M12)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M4_M12_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M4_M12_M23 > f_3_;
    double f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M49_M65 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65) */ {
 public:
  inline Message4_M3_M9_M25_M38_M49_M65() : Message4_M3_M9_M25_M38_M49_M65(nullptr) {}
  ~Message4_M3_M9_M25_M38_M49_M65() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M49_M65(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M49_M65(const Message4_M3_M9_M25_M38_M49_M65& from) : Message4_M3_M9_M25_M38_M49_M65(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M49_M65(Message4_M3_M9_M25_M38_M49_M65&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M49_M65& operator=(const Message4_M3_M9_M25_M38_M49_M65& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M49_M65& operator=(Message4_M3_M9_M25_M38_M49_M65&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M49_M65& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M49_M65* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M49_M65*>(
        &_Message4_M3_M9_M25_M38_M49_M65_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(Message4_M3_M9_M25_M38_M49_M65& a, Message4_M3_M9_M25_M38_M49_M65& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M49_M65* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M49_M65* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M49_M65* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M49_M65>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M49_M65& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M49_M65& from) { Message4_M3_M9_M25_M38_M49_M65::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M49_M65* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M49_M65(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M49_M65(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M49_M65& from);
  Message4_M3_M9_M25_M38_M49_M65(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M49_M65&& from) noexcept
      : Message4_M3_M9_M25_M38_M49_M65(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M69 = Message4_M3_M9_M25_M38_M49_M65_M69;
  using E22 = Message4_M3_M9_M25_M38_M49_M65_E22;
  static constexpr E22 E22_UNSPECIFIED = Message4_M3_M9_M25_M38_M49_M65_E22_E22_UNSPECIFIED;
  static constexpr E22 E22_CONST_1 = Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_1;
  static constexpr E22 E22_CONST_2 = Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_2;
  static constexpr E22 E22_CONST_3 = Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_3;
  static constexpr E22 E22_CONST_4 = Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_4;
  static constexpr E22 E22_CONST_5 = Message4_M3_M9_M25_M38_M49_M65_E22_E22_CONST_5;
  static inline bool E22_IsValid(int value) {
    return Message4_M3_M9_M25_M38_M49_M65_E22_IsValid(value);
  }
  static constexpr E22 E22_MIN = Message4_M3_M9_M25_M38_M49_M65_E22_E22_MIN;
  static constexpr E22 E22_MAX = Message4_M3_M9_M25_M38_M49_M65_E22_E22_MAX;
  static constexpr int E22_ARRAYSIZE = Message4_M3_M9_M25_M38_M49_M65_E22_E22_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E22_descriptor() {
    return Message4_M3_M9_M25_M38_M49_M65_E22_descriptor();
  }
  template <typename T>
  static inline const std::string& E22_Name(T value) {
    return Message4_M3_M9_M25_M38_M49_M65_E22_Name(value);
  }
  static inline bool E22_Parse(absl::string_view name, E22* value) {
    return Message4_M3_M9_M25_M38_M49_M65_E22_Parse(name, value);
  }
  using E23 = Message4_M3_M9_M25_M38_M49_M65_E23;
  static constexpr E23 E23_UNSPECIFIED = Message4_M3_M9_M25_M38_M49_M65_E23_E23_UNSPECIFIED;
  static constexpr E23 E23_CONST_1 = Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_1;
  static constexpr E23 E23_CONST_2 = Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_2;
  static constexpr E23 E23_CONST_3 = Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_3;
  static constexpr E23 E23_CONST_4 = Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_4;
  static constexpr E23 E23_CONST_5 = Message4_M3_M9_M25_M38_M49_M65_E23_E23_CONST_5;
  static inline bool E23_IsValid(int value) {
    return Message4_M3_M9_M25_M38_M49_M65_E23_IsValid(value);
  }
  static constexpr E23 E23_MIN = Message4_M3_M9_M25_M38_M49_M65_E23_E23_MIN;
  static constexpr E23 E23_MAX = Message4_M3_M9_M25_M38_M49_M65_E23_E23_MAX;
  static constexpr int E23_ARRAYSIZE = Message4_M3_M9_M25_M38_M49_M65_E23_E23_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E23_descriptor() {
    return Message4_M3_M9_M25_M38_M49_M65_E23_descriptor();
  }
  template <typename T>
  static inline const std::string& E23_Name(T value) {
    return Message4_M3_M9_M25_M38_M49_M65_E23_Name(value);
  }
  static inline bool E23_Parse(absl::string_view name, E23* value) {
    return Message4_M3_M9_M25_M38_M49_M65_E23_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_8())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_6().data())), f_6().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_8()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_6().data())));
      sizes_list.push_back(f_6().size() * sizeof(::int32_t));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_6().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      sizes.push_back(end_addr - start_addr + sizeof(f_8()));
      sizes.push_back(f_6().size() * sizeof(::int32_t));
      sizes.push_back(f_12().size());
      for (int i = 0; i < f_12_size(); ++i) {
        mutable_f_12(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_8_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_6()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_6().data())));
      size_t num_f_12_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_6()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      size_t num_f_12_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_12_entries; ++i) {
        auto* new_msg = add_f_12();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_12(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF6FieldNumber = 9,
    kF12FieldNumber = 13,
    kF0FieldNumber = 1,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF4FieldNumber = 6,
    kF1FieldNumber = 2,
    kF7FieldNumber = 10,
    kF5FieldNumber = 7,
    kF8FieldNumber = 12,
  };
  // repeated int32 f_6 = 9 [packed = true];
  int f_6_size() const;
  private:
  int _internal_f_6_size() const;

  public:
  void clear_f_6() ;
  ::int32_t f_6(int index) const;
  void set_f_6(int index, ::int32_t value);
  void add_f_6(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_6() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_6();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_6() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_6();

  public:
  // repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69 f_12 = 13;
  int f_12_size() const;
  private:
  int _internal_f_12_size() const;

  public:
  void clear_f_12() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69* mutable_f_12(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>* mutable_f_12();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>& _internal_f_12() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>* _internal_mutable_f_12();
  public:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69& f_12(int index) const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69* add_f_12();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>& f_12() const;
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional int64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional int64 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::int64_t f_3() const;
  void set_f_3(::int64_t value);

  private:
  ::int64_t _internal_f_3() const;
  void _internal_set_f_3(::int64_t value);

  public:
  // optional uint64 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  ::uint64_t f_4() const;
  void set_f_4(::uint64_t value);

  private:
  ::uint64_t _internal_f_4() const;
  void _internal_set_f_4(::uint64_t value);

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.E22 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 f_1() const;
  void set_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 _internal_f_1() const;
  void _internal_set_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 value);

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.E23 f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 f_7() const;
  void set_f_7(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 _internal_f_7() const;
  void _internal_set_f_7(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 value);

  public:
  // optional int64 f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int64_t f_5() const;
  void set_f_5(::int64_t value);

  private:
  ::int64_t _internal_f_5() const;
  void _internal_set_f_5(::int64_t value);

  public:
  // optional fixed32 f_8 = 12;
  bool has_f_8() const;
  void clear_f_8() ;
  ::uint32_t f_8() const;
  void set_f_8(::uint32_t value);

  private:
  ::uint32_t _internal_f_8() const;
  void _internal_set_f_8(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M49_M65_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_6_;
    mutable ::google::protobuf::internal::CachedSize _f_6_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69 > f_12_;
    ::uint64_t f_0_;
    ::int64_t f_2_;
    ::int64_t f_3_;
    ::uint64_t f_4_;
    int f_1_;
    int f_7_;
    ::int64_t f_5_;
    ::uint32_t f_8_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M47_M53 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53) */ {
 public:
  inline Message4_M3_M9_M25_M38_M47_M53() : Message4_M3_M9_M25_M38_M47_M53(nullptr) {}
  ~Message4_M3_M9_M25_M38_M47_M53() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M47_M53(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M47_M53(const Message4_M3_M9_M25_M38_M47_M53& from) : Message4_M3_M9_M25_M38_M47_M53(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M47_M53(Message4_M3_M9_M25_M38_M47_M53&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M53(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M47_M53& operator=(const Message4_M3_M9_M25_M38_M47_M53& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M47_M53& operator=(Message4_M3_M9_M25_M38_M47_M53&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M47_M53& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M47_M53* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M47_M53*>(
        &_Message4_M3_M9_M25_M38_M47_M53_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Message4_M3_M9_M25_M38_M47_M53& a, Message4_M3_M9_M25_M38_M47_M53& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M47_M53* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M47_M53* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M47_M53* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M47_M53>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M47_M53& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M47_M53& from) { Message4_M3_M9_M25_M38_M47_M53::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M47_M53* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M47_M53(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M47_M53(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M47_M53& from);
  Message4_M3_M9_M25_M38_M47_M53(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M47_M53&& from) noexcept
      : Message4_M3_M9_M25_M38_M47_M53(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M71 = Message4_M3_M9_M25_M38_M47_M53_M71;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* release_f_1();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71& _internal_f_1() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* _internal_mutable_f_1();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M47_M53_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* f_1_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28_M35 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28.M35) */ {
 public:
  inline Message4_M7_M16_M28_M35() : Message4_M7_M16_M28_M35(nullptr) {}
  ~Message4_M7_M16_M28_M35() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28_M35(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28_M35(const Message4_M7_M16_M28_M35& from) : Message4_M7_M16_M28_M35(nullptr, from) {}
  inline Message4_M7_M16_M28_M35(Message4_M7_M16_M28_M35&& from) noexcept
      : Message4_M7_M16_M28_M35(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28_M35& operator=(const Message4_M7_M16_M28_M35& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28_M35& operator=(Message4_M7_M16_M28_M35&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28_M35& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28_M35* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28_M35*>(
        &_Message4_M7_M16_M28_M35_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 84;
  friend void swap(Message4_M7_M16_M28_M35& a, Message4_M7_M16_M28_M35& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28_M35* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28_M35* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28_M35* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28_M35>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28_M35& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28_M35& from) { Message4_M7_M16_M28_M35::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28_M35* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28.M35"; }

 protected:
  explicit Message4_M7_M16_M28_M35(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28_M35(::google::protobuf::Arena* arena, const Message4_M7_M16_M28_M35& from);
  Message4_M7_M16_M28_M35(::google::protobuf::Arena* arena, Message4_M7_M16_M28_M35&& from) noexcept
      : Message4_M7_M16_M28_M35(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M40 = Message4_M7_M16_M28_M35_M40;
  using M43 = Message4_M7_M16_M28_M35_M43;
  using M46 = Message4_M7_M16_M28_M35_M46;
  using M51 = Message4_M7_M16_M28_M35_M51;
  using M52 = Message4_M7_M16_M28_M35_M52;
  using E15 = Message4_M7_M16_M28_M35_E15;
  static constexpr E15 E15_UNSPECIFIED = Message4_M7_M16_M28_M35_E15_E15_UNSPECIFIED;
  static constexpr E15 E15_CONST_1 = Message4_M7_M16_M28_M35_E15_E15_CONST_1;
  static constexpr E15 E15_CONST_2 = Message4_M7_M16_M28_M35_E15_E15_CONST_2;
  static constexpr E15 E15_CONST_3 = Message4_M7_M16_M28_M35_E15_E15_CONST_3;
  static constexpr E15 E15_CONST_4 = Message4_M7_M16_M28_M35_E15_E15_CONST_4;
  static constexpr E15 E15_CONST_5 = Message4_M7_M16_M28_M35_E15_E15_CONST_5;
  static inline bool E15_IsValid(int value) {
    return Message4_M7_M16_M28_M35_E15_IsValid(value);
  }
  static constexpr E15 E15_MIN = Message4_M7_M16_M28_M35_E15_E15_MIN;
  static constexpr E15 E15_MAX = Message4_M7_M16_M28_M35_E15_E15_MAX;
  static constexpr int E15_ARRAYSIZE = Message4_M7_M16_M28_M35_E15_E15_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E15_descriptor() {
    return Message4_M7_M16_M28_M35_E15_descriptor();
  }
  template <typename T>
  static inline const std::string& E15_Name(T value) {
    return Message4_M7_M16_M28_M35_E15_Name(value);
  }
  static inline bool E15_Parse(absl::string_view name, E15* value) {
    return Message4_M7_M16_M28_M35_E15_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_10())));
      for (int i = 0; i < f_27_size(); ++i) {
        mutable_f_27(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      mutable_f_21()->generate_schema(schema);
      mutable_f_23()->generate_schema(schema);
      mutable_f_25()->generate_schema(schema);
      mutable_f_26()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_10()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_27().size());
      for (int i = 0; i < f_27_size(); ++i) {
        mutable_f_27(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      mutable_f_21()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_23()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_25()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_26()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_27_size(); ++i) {
        mutable_f_27(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      mutable_f_21()->generate_scatter_ptrs(ptrs);
      mutable_f_23()->generate_scatter_ptrs(ptrs);
      mutable_f_25()->generate_scatter_ptrs(ptrs);
      mutable_f_26()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      sizes.push_back(end_addr - start_addr + sizeof(f_10()));
      sizes.push_back(f_27().size());
      for (int i = 0; i < f_27_size(); ++i) {
        mutable_f_27(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_1().size());
      sizes.push_back(f_2().size());
      sizes.push_back(f_4().size());
      sizes.push_back(f_7().size());
      mutable_f_21()->generate_scatter_sizes(sizes);
      mutable_f_23()->generate_scatter_sizes(sizes);
      mutable_f_25()->generate_scatter_sizes(sizes);
      mutable_f_26()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_27_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_27_entries; ++i) {
        auto* new_msg = add_f_27();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_27(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      idx = mutable_f_21()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_23()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_25()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_26()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_27_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_27_entries; ++i) {
        auto* new_msg = add_f_27();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_27(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      idx = mutable_f_21()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_23()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_25()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_26()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF27FieldNumber = 28,
    kF1FieldNumber = 3,
    kF2FieldNumber = 6,
    kF4FieldNumber = 9,
    kF7FieldNumber = 15,
    kF21FieldNumber = 23,
    kF23FieldNumber = 25,
    kF25FieldNumber = 26,
    kF26FieldNumber = 27,
    kF0FieldNumber = 2,
    kF3FieldNumber = 7,
    kF5FieldNumber = 11,
    kF6FieldNumber = 14,
    kF8FieldNumber = 17,
    kF9FieldNumber = 20,
    kF10FieldNumber = 21,
  };
  // repeated .fleetbench.proto.Message4.M7.M16.M28.M35.M52 f_27 = 28;
  int f_27_size() const;
  private:
  int _internal_f_27_size() const;

  public:
  void clear_f_27() ;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52* mutable_f_27(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>* mutable_f_27();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>& _internal_f_27() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>* _internal_mutable_f_27();
  public:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52& f_27(int index) const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52* add_f_27();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>& f_27() const;
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional string f_2 = 6;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_4 = 9;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional bytes f_7 = 15;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.M40 f_21 = 23;
  bool has_f_21() const;
  void clear_f_21() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M40& f_21() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* release_f_21();
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* mutable_f_21();
  void set_allocated_f_21(::fleetbench::proto::Message4_M7_M16_M28_M35_M40* value);
  void unsafe_arena_set_allocated_f_21(::fleetbench::proto::Message4_M7_M16_M28_M35_M40* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* unsafe_arena_release_f_21();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M40& _internal_f_21() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* _internal_mutable_f_21();

  public:
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.M43 f_23 = 25;
  bool has_f_23() const;
  void clear_f_23() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43& f_23() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* release_f_23();
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* mutable_f_23();
  void set_allocated_f_23(::fleetbench::proto::Message4_M7_M16_M28_M35_M43* value);
  void unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message4_M7_M16_M28_M35_M43* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* unsafe_arena_release_f_23();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43& _internal_f_23() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* _internal_mutable_f_23();

  public:
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.M46 f_25 = 26;
  bool has_f_25() const;
  void clear_f_25() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M46& f_25() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* release_f_25();
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* mutable_f_25();
  void set_allocated_f_25(::fleetbench::proto::Message4_M7_M16_M28_M35_M46* value);
  void unsafe_arena_set_allocated_f_25(::fleetbench::proto::Message4_M7_M16_M28_M35_M46* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* unsafe_arena_release_f_25();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M46& _internal_f_25() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* _internal_mutable_f_25();

  public:
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.M51 f_26 = 27;
  bool has_f_26() const;
  void clear_f_26() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M51& f_26() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* release_f_26();
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* mutable_f_26();
  void set_allocated_f_26(::fleetbench::proto::Message4_M7_M16_M28_M35_M51* value);
  void unsafe_arena_set_allocated_f_26(::fleetbench::proto::Message4_M7_M16_M28_M35_M51* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* unsafe_arena_release_f_26();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M51& _internal_f_26() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* _internal_mutable_f_26();

  public:
  // optional uint64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // optional float f_3 = 7;
  bool has_f_3() const;
  void clear_f_3() ;
  float f_3() const;
  void set_f_3(float value);

  private:
  float _internal_f_3() const;
  void _internal_set_f_3(float value);

  public:
  // optional bool f_5 = 11;
  bool has_f_5() const;
  void clear_f_5() ;
  bool f_5() const;
  void set_f_5(bool value);

  private:
  bool _internal_f_5() const;
  void _internal_set_f_5(bool value);

  public:
  // optional fixed32 f_6 = 14;
  bool has_f_6() const;
  void clear_f_6() ;
  ::uint32_t f_6() const;
  void set_f_6(::uint32_t value);

  private:
  ::uint32_t _internal_f_6() const;
  void _internal_set_f_6(::uint32_t value);

  public:
  // optional fixed32 f_8 = 17;
  bool has_f_8() const;
  void clear_f_8() ;
  ::uint32_t f_8() const;
  void set_f_8(::uint32_t value);

  private:
  ::uint32_t _internal_f_8() const;
  void _internal_set_f_8(::uint32_t value);

  public:
  // optional int64 f_9 = 20;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int64_t f_9() const;
  void set_f_9(::int64_t value);

  private:
  ::int64_t _internal_f_9() const;
  void _internal_set_f_9(::int64_t value);

  public:
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35.E15 f_10 = 21;
  bool has_f_10() const;
  void clear_f_10() ;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_E15 f_10() const;
  void set_f_10(::fleetbench::proto::Message4_M7_M16_M28_M35_E15 value);

  private:
  ::fleetbench::proto::Message4_M7_M16_M28_M35_E15 _internal_f_10() const;
  void _internal_set_f_10(::fleetbench::proto::Message4_M7_M16_M28_M35_E15 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28.M35)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 16, 6,
      74, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_M35_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M16_M28_M35_M52 > f_27_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* f_21_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* f_23_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* f_25_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* f_26_;
    ::uint64_t f_0_;
    float f_3_;
    bool f_5_;
    ::uint32_t f_6_;
    ::uint32_t f_8_;
    ::int64_t f_9_;
    int f_10_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 59;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M89 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* release_f_1();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& _internal_f_1() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* _internal_mutable_f_1();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* f_1_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M27 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M27) */ {
 public:
  inline Message4_M6_M19_M27() : Message4_M6_M19_M27(nullptr) {}
  ~Message4_M6_M19_M27() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M27(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M27(const Message4_M6_M19_M27& from) : Message4_M6_M19_M27(nullptr, from) {}
  inline Message4_M6_M19_M27(Message4_M6_M19_M27&& from) noexcept
      : Message4_M6_M19_M27(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M27& operator=(const Message4_M6_M19_M27& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M27& operator=(Message4_M6_M19_M27&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M27& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M27* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M27*>(
        &_Message4_M6_M19_M27_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(Message4_M6_M19_M27& a, Message4_M6_M19_M27& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M27* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M27* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M27* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M27>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M27& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M27& from) { Message4_M6_M19_M27::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M27* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M27"; }

 protected:
  explicit Message4_M6_M19_M27(::google::protobuf::Arena* arena);
  Message4_M6_M19_M27(::google::protobuf::Arena* arena, const Message4_M6_M19_M27& from);
  Message4_M6_M19_M27(::google::protobuf::Arena* arena, Message4_M6_M19_M27&& from) noexcept
      : Message4_M6_M19_M27(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M31 = Message4_M6_M19_M27_M31;
  using E12 = Message4_M6_M19_M27_E12;
  static constexpr E12 E12_UNSPECIFIED = Message4_M6_M19_M27_E12_E12_UNSPECIFIED;
  static constexpr E12 E12_CONST_1 = Message4_M6_M19_M27_E12_E12_CONST_1;
  static constexpr E12 E12_CONST_2 = Message4_M6_M19_M27_E12_E12_CONST_2;
  static constexpr E12 E12_CONST_3 = Message4_M6_M19_M27_E12_E12_CONST_3;
  static constexpr E12 E12_CONST_4 = Message4_M6_M19_M27_E12_E12_CONST_4;
  static constexpr E12 E12_CONST_5 = Message4_M6_M19_M27_E12_E12_CONST_5;
  static inline bool E12_IsValid(int value) {
    return Message4_M6_M19_M27_E12_IsValid(value);
  }
  static constexpr E12 E12_MIN = Message4_M6_M19_M27_E12_E12_MIN;
  static constexpr E12 E12_MAX = Message4_M6_M19_M27_E12_E12_MAX;
  static constexpr int E12_ARRAYSIZE = Message4_M6_M19_M27_E12_E12_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E12_descriptor() {
    return Message4_M6_M19_M27_E12_descriptor();
  }
  template <typename T>
  static inline const std::string& E12_Name(T value) {
    return Message4_M6_M19_M27_E12_Name(value);
  }
  static inline bool E12_Parse(absl::string_view name, E12* value) {
    return Message4_M6_M19_M27_E12_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_2())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())), f_0().size() * sizeof(float)));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_2()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      sizes_list.push_back(f_0().size() * sizeof(float));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      sizes.push_back(end_addr - start_addr + sizeof(f_2()));
      sizes.push_back(f_0().size() * sizeof(float));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_0()->Resize(sizes[idx++] / sizeof(float), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<float*>(f_0().data())));
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_0()->Resize(sizes[idx++] / sizeof(float), 0);
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF3FieldNumber = 5,
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
  };
  // repeated float f_0 = 1 [packed = true];
  int f_0_size() const;
  private:
  int _internal_f_0_size() const;

  public:
  void clear_f_0() ;
  float f_0(int index) const;
  void set_f_0(int index, float value);
  void add_f_0(float value);
  const ::google::protobuf::RepeatedField<float>& f_0() const;
  ::google::protobuf::RepeatedField<float>* mutable_f_0();

  private:
  const ::google::protobuf::RepeatedField<float>& _internal_f_0() const;
  ::google::protobuf::RepeatedField<float>* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M27.M31 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M6_M19_M27_M31& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M27_M31* release_f_3();
  ::fleetbench::proto::Message4_M6_M19_M27_M31* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M27_M31* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M27_M31* value);
  ::fleetbench::proto::Message4_M6_M19_M27_M31* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M27_M31& _internal_f_3() const;
  ::fleetbench::proto::Message4_M6_M19_M27_M31* _internal_mutable_f_3();

  public:
  // optional float f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M27.E12 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M6_M19_M27_E12 f_2() const;
  void set_f_2(::fleetbench::proto::Message4_M6_M19_M27_E12 value);

  private:
  ::fleetbench::proto::Message4_M6_M19_M27_E12 _internal_f_2() const;
  void _internal_set_f_2(::fleetbench::proto::Message4_M6_M19_M27_E12 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M27)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M27_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<float> f_0_;
    ::fleetbench::proto::Message4_M6_M19_M27_M31* f_3_;
    float f_1_;
    int f_2_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19_M24 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19.M24) */ {
 public:
  inline Message4_M6_M19_M24() : Message4_M6_M19_M24(nullptr) {}
  ~Message4_M6_M19_M24() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19_M24(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19_M24(const Message4_M6_M19_M24& from) : Message4_M6_M19_M24(nullptr, from) {}
  inline Message4_M6_M19_M24(Message4_M6_M19_M24&& from) noexcept
      : Message4_M6_M19_M24(nullptr, std::move(from)) {}
  inline Message4_M6_M19_M24& operator=(const Message4_M6_M19_M24& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19_M24& operator=(Message4_M6_M19_M24&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19_M24& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19_M24* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19_M24*>(
        &_Message4_M6_M19_M24_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(Message4_M6_M19_M24& a, Message4_M6_M19_M24& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19_M24* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19_M24* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19_M24* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19_M24>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19_M24& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19_M24& from) { Message4_M6_M19_M24::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19_M24* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19.M24"; }

 protected:
  explicit Message4_M6_M19_M24(::google::protobuf::Arena* arena);
  Message4_M6_M19_M24(::google::protobuf::Arena* arena, const Message4_M6_M19_M24& from);
  Message4_M6_M19_M24(::google::protobuf::Arena* arena, Message4_M6_M19_M24&& from) noexcept
      : Message4_M6_M19_M24(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M33 = Message4_M6_M19_M24_M33;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M6.M19.M24.M33 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M6_M19_M24_M33& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M24_M33* release_f_1();
  ::fleetbench::proto::Message4_M6_M19_M24_M33* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33* value);
  ::fleetbench::proto::Message4_M6_M19_M24_M33* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M24_M33& _internal_f_1() const;
  ::fleetbench::proto::Message4_M6_M19_M24_M33* _internal_mutable_f_1();

  public:
  // optional fixed32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19.M24)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_M24_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M6_M19_M24_M33* f_1_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M4) */ {
 public:
  inline Message4_M4() : Message4_M4(nullptr) {}
  ~Message4_M4() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M4(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M4(const Message4_M4& from) : Message4_M4(nullptr, from) {}
  inline Message4_M4(Message4_M4&& from) noexcept
      : Message4_M4(nullptr, std::move(from)) {}
  inline Message4_M4& operator=(const Message4_M4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M4& operator=(Message4_M4&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M4* internal_default_instance() {
    return reinterpret_cast<const Message4_M4*>(
        &_Message4_M4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(Message4_M4& a, Message4_M4& b) { a.Swap(&b); }
  inline void Swap(Message4_M4* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M4* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M4& from) { Message4_M4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M4* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M4"; }

 protected:
  explicit Message4_M4(::google::protobuf::Arena* arena);
  Message4_M4(::google::protobuf::Arena* arena, const Message4_M4& from);
  Message4_M4(::google::protobuf::Arena* arena, Message4_M4&& from) noexcept
      : Message4_M4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M12 = Message4_M4_M12;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M4.M12 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M4_M12* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message4_M4_M12& f_2(int index) const;
  ::fleetbench::proto::Message4_M4_M12* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>& f_2() const;
  // optional bytes f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M4_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M4_M12 > f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M49 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M49) */ {
 public:
  inline Message4_M3_M9_M25_M38_M49() : Message4_M3_M9_M25_M38_M49(nullptr) {}
  ~Message4_M3_M9_M25_M38_M49() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M49(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M49(const Message4_M3_M9_M25_M38_M49& from) : Message4_M3_M9_M25_M38_M49(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M49(Message4_M3_M9_M25_M38_M49&& from) noexcept
      : Message4_M3_M9_M25_M38_M49(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M49& operator=(const Message4_M3_M9_M25_M38_M49& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M49& operator=(Message4_M3_M9_M25_M38_M49&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M49& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M49* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M49*>(
        &_Message4_M3_M9_M25_M38_M49_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(Message4_M3_M9_M25_M38_M49& a, Message4_M3_M9_M25_M38_M49& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M49* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M49* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M49* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M49>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M49& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M49& from) { Message4_M3_M9_M25_M38_M49::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M49* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M49"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M49(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M49(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M49& from);
  Message4_M3_M9_M25_M38_M49(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M49&& from) noexcept
      : Message4_M3_M9_M25_M38_M49(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M59 = Message4_M3_M9_M25_M38_M49_M59;
  using M64 = Message4_M3_M9_M25_M38_M49_M64;
  using M65 = Message4_M3_M9_M25_M38_M49_M65;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF5FieldNumber = 6,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* release_f_2();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59& _internal_f_2() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M64 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* release_f_4();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64& _internal_f_4() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65 f_5 = 6;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* release_f_5();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65& _internal_f_5() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* _internal_mutable_f_5();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M49)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 3,
      55, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M49_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* f_2_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* f_4_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38_M47 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38.M47) */ {
 public:
  inline Message4_M3_M9_M25_M38_M47() : Message4_M3_M9_M25_M38_M47(nullptr) {}
  ~Message4_M3_M9_M25_M38_M47() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38_M47(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38_M47(const Message4_M3_M9_M25_M38_M47& from) : Message4_M3_M9_M25_M38_M47(nullptr, from) {}
  inline Message4_M3_M9_M25_M38_M47(Message4_M3_M9_M25_M38_M47&& from) noexcept
      : Message4_M3_M9_M25_M38_M47(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38_M47& operator=(const Message4_M3_M9_M25_M38_M47& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38_M47& operator=(Message4_M3_M9_M25_M38_M47&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38_M47& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38_M47* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38_M47*>(
        &_Message4_M3_M9_M25_M38_M47_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Message4_M3_M9_M25_M38_M47& a, Message4_M3_M9_M25_M38_M47& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38_M47* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38_M47* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38_M47* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38_M47>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38_M47& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38_M47& from) { Message4_M3_M9_M25_M38_M47::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38_M47* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38.M47"; }

 protected:
  explicit Message4_M3_M9_M25_M38_M47(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38_M47(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38_M47& from);
  Message4_M3_M9_M25_M38_M47(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38_M47&& from) noexcept
      : Message4_M3_M9_M25_M38_M47(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M53 = Message4_M3_M9_M25_M38_M47_M53;
  using M60 = Message4_M3_M9_M25_M38_M47_M60;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 4,
    kF4FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* release_f_1();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53& _internal_f_1() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* release_f_4();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60& _internal_f_4() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* _internal_mutable_f_4();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38.M47)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_M47_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* f_1_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* f_4_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16_M28 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16.M28) */ {
 public:
  inline Message4_M7_M16_M28() : Message4_M7_M16_M28(nullptr) {}
  ~Message4_M7_M16_M28() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16_M28(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16_M28(const Message4_M7_M16_M28& from) : Message4_M7_M16_M28(nullptr, from) {}
  inline Message4_M7_M16_M28(Message4_M7_M16_M28&& from) noexcept
      : Message4_M7_M16_M28(nullptr, std::move(from)) {}
  inline Message4_M7_M16_M28& operator=(const Message4_M7_M16_M28& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16_M28& operator=(Message4_M7_M16_M28&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16_M28& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16_M28* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16_M28*>(
        &_Message4_M7_M16_M28_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 85;
  friend void swap(Message4_M7_M16_M28& a, Message4_M7_M16_M28& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16_M28* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16_M28* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16_M28* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16_M28>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16_M28& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16_M28& from) { Message4_M7_M16_M28::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16_M28* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16.M28"; }

 protected:
  explicit Message4_M7_M16_M28(::google::protobuf::Arena* arena);
  Message4_M7_M16_M28(::google::protobuf::Arena* arena, const Message4_M7_M16_M28& from);
  Message4_M7_M16_M28(::google::protobuf::Arena* arena, Message4_M7_M16_M28&& from) noexcept
      : Message4_M7_M16_M28(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M35 = Message4_M7_M16_M28_M35;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M7.M16.M28.M35 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M7_M16_M28_M35& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28_M35* release_f_1();
  ::fleetbench::proto::Message4_M7_M16_M28_M35* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M7_M16_M28_M35* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M16_M28_M35* value);
  ::fleetbench::proto::Message4_M7_M16_M28_M35* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28_M35& _internal_f_1() const;
  ::fleetbench::proto::Message4_M7_M16_M28_M35* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16.M28)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_M28_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message4_M7_M16_M28_M35* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 60;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M88 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* release_f_2();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& _internal_f_2() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* _internal_mutable_f_2();

  public:
  // optional float f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* f_2_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6_M19 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6.M19) */ {
 public:
  inline Message4_M6_M19() : Message4_M6_M19(nullptr) {}
  ~Message4_M6_M19() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6_M19(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6_M19(const Message4_M6_M19& from) : Message4_M6_M19(nullptr, from) {}
  inline Message4_M6_M19(Message4_M6_M19&& from) noexcept
      : Message4_M6_M19(nullptr, std::move(from)) {}
  inline Message4_M6_M19& operator=(const Message4_M6_M19& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6_M19& operator=(Message4_M6_M19&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6_M19& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6_M19* internal_default_instance() {
    return reinterpret_cast<const Message4_M6_M19*>(
        &_Message4_M6_M19_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 47;
  friend void swap(Message4_M6_M19& a, Message4_M6_M19& b) { a.Swap(&b); }
  inline void Swap(Message4_M6_M19* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6_M19* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6_M19* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6_M19>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6_M19& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6_M19& from) { Message4_M6_M19::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6_M19* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6.M19"; }

 protected:
  explicit Message4_M6_M19(::google::protobuf::Arena* arena);
  Message4_M6_M19(::google::protobuf::Arena* arena, const Message4_M6_M19& from);
  Message4_M6_M19(::google::protobuf::Arena* arena, Message4_M6_M19&& from) noexcept
      : Message4_M6_M19(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M20 = Message4_M6_M19_M20;
  using M24 = Message4_M6_M19_M24;
  using M26 = Message4_M6_M19_M26;
  using M27 = Message4_M6_M19_M27;
  using M30 = Message4_M6_M19_M30;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_3()->generate_schema(schema);
      mutable_f_5()->generate_schema(schema);
      mutable_f_7()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_6().size());
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_5()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_7()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_3()->generate_scatter_ptrs(ptrs);
      mutable_f_5()->generate_scatter_ptrs(ptrs);
      mutable_f_7()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_6().size());
      for (int i = 0; i < f_6_size(); ++i) {
        mutable_f_6(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      mutable_f_3()->generate_scatter_sizes(sizes);
      mutable_f_5()->generate_scatter_sizes(sizes);
      mutable_f_7()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_2_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_6_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_6_entries; ++i) {
        auto* new_msg = add_f_6();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_6(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_5()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_7()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_6_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_6_entries; ++i) {
        auto* new_msg = add_f_6();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_6(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_5()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_7()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF6FieldNumber = 7,
    kF0FieldNumber = 1,
    kF3FieldNumber = 4,
    kF5FieldNumber = 6,
    kF7FieldNumber = 8,
    kF2FieldNumber = 3,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M6.M19.M24 f_4 = 5;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message4_M6_M19_M24* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message4_M6_M19_M24& f_4(int index) const;
  ::fleetbench::proto::Message4_M6_M19_M24* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>& f_4() const;
  // repeated .fleetbench.proto.Message4.M6.M19.M27 f_6 = 7;
  int f_6_size() const;
  private:
  int _internal_f_6_size() const;

  public:
  void clear_f_6() ;
  ::fleetbench::proto::Message4_M6_M19_M27* mutable_f_6(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>* mutable_f_6();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>& _internal_f_6() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>* _internal_mutable_f_6();
  public:
  const ::fleetbench::proto::Message4_M6_M19_M27& f_6(int index) const;
  ::fleetbench::proto::Message4_M6_M19_M27* add_f_6();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>& f_6() const;
  // optional bytes f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M20 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M6_M19_M20& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M20* release_f_3();
  ::fleetbench::proto::Message4_M6_M19_M20* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M20* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M20* value);
  ::fleetbench::proto::Message4_M6_M19_M20* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M20& _internal_f_3() const;
  ::fleetbench::proto::Message4_M6_M19_M20* _internal_mutable_f_3();

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M26 f_5 = 6;
  bool has_f_5() const;
  void clear_f_5() ;
  const ::fleetbench::proto::Message4_M6_M19_M26& f_5() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M26* release_f_5();
  ::fleetbench::proto::Message4_M6_M19_M26* mutable_f_5();
  void set_allocated_f_5(::fleetbench::proto::Message4_M6_M19_M26* value);
  void unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message4_M6_M19_M26* value);
  ::fleetbench::proto::Message4_M6_M19_M26* unsafe_arena_release_f_5();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M26& _internal_f_5() const;
  ::fleetbench::proto::Message4_M6_M19_M26* _internal_mutable_f_5();

  public:
  // optional .fleetbench.proto.Message4.M6.M19.M30 f_7 = 8;
  bool has_f_7() const;
  void clear_f_7() ;
  const ::fleetbench::proto::Message4_M6_M19_M30& f_7() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19_M30* release_f_7();
  ::fleetbench::proto::Message4_M6_M19_M30* mutable_f_7();
  void set_allocated_f_7(::fleetbench::proto::Message4_M6_M19_M30* value);
  void unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message4_M6_M19_M30* value);
  ::fleetbench::proto::Message4_M6_M19_M30* unsafe_arena_release_f_7();

  private:
  const ::fleetbench::proto::Message4_M6_M19_M30& _internal_f_7() const;
  ::fleetbench::proto::Message4_M6_M19_M30* _internal_mutable_f_7();

  public:
  // optional int64 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6.M19)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 5,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_M19_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M6_M19_M24 > f_4_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M6_M19_M27 > f_6_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message4_M6_M19_M20* f_3_;
    ::fleetbench::proto::Message4_M6_M19_M26* f_5_;
    ::fleetbench::proto::Message4_M6_M19_M30* f_7_;
    ::int64_t f_2_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25_M38 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25.M38) */ {
 public:
  inline Message4_M3_M9_M25_M38() : Message4_M3_M9_M25_M38(nullptr) {}
  ~Message4_M3_M9_M25_M38() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25_M38(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25_M38(const Message4_M3_M9_M25_M38& from) : Message4_M3_M9_M25_M38(nullptr, from) {}
  inline Message4_M3_M9_M25_M38(Message4_M3_M9_M25_M38&& from) noexcept
      : Message4_M3_M9_M25_M38(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25_M38& operator=(const Message4_M3_M9_M25_M38& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25_M38& operator=(Message4_M3_M9_M25_M38&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25_M38& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25_M38* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25_M38*>(
        &_Message4_M3_M9_M25_M38_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(Message4_M3_M9_M25_M38& a, Message4_M3_M9_M25_M38& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25_M38* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25_M38* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25_M38* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25_M38>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25_M38& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25_M38& from) { Message4_M3_M9_M25_M38::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25_M38* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25.M38"; }

 protected:
  explicit Message4_M3_M9_M25_M38(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25_M38(::google::protobuf::Arena* arena, const Message4_M3_M9_M25_M38& from);
  Message4_M3_M9_M25_M38(::google::protobuf::Arena* arena, Message4_M3_M9_M25_M38&& from) noexcept
      : Message4_M3_M9_M25_M38(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M45 = Message4_M3_M9_M25_M38_M45;
  using M47 = Message4_M3_M9_M25_M38_M47;
  using M48 = Message4_M3_M9_M25_M38_M48;
  using M49 = Message4_M3_M9_M25_M38_M49;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_schema(schema);
      }
      mutable_f_2()->generate_schema(schema);
      mutable_f_8()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_8()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_7().size());
      for (int i = 0; i < f_7_size(); ++i) {
        mutable_f_7(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_8()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_7_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_7_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_7_entries; ++i) {
        auto* new_msg = add_f_7();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_7(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 7,
    kF7FieldNumber = 8,
    kF2FieldNumber = 4,
    kF8FieldNumber = 9,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M47 f_4 = 7;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47& f_4(int index) const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>& f_4() const;
  // repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M48 f_7 = 8;
  int f_7_size() const;
  private:
  int _internal_f_7_size() const;

  public:
  void clear_f_7() ;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M48* mutable_f_7(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>* mutable_f_7();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>& _internal_f_7() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>* _internal_mutable_f_7();
  public:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M48& f_7(int index) const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M48* add_f_7();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>& f_7() const;
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M45 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M45& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* release_f_2();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M45* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M45* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M45& _internal_f_2() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* release_f_8();
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message4_M3_M9_M25_M38_M49* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message4_M3_M9_M25_M38_M49* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49& _internal_f_8() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* _internal_mutable_f_8();

  public:
  // optional double f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  double f_0() const;
  void set_f_0(double value);

  private:
  double _internal_f_0() const;
  void _internal_set_f_0(double value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25.M38)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_M38_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M3_M9_M25_M38_M47 > f_4_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M3_M9_M25_M38_M48 > f_7_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* f_2_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* f_8_;
    double f_0_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M16 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M16) */ {
 public:
  inline Message4_M7_M16() : Message4_M7_M16(nullptr) {}
  ~Message4_M7_M16() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M16(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M16(const Message4_M7_M16& from) : Message4_M7_M16(nullptr, from) {}
  inline Message4_M7_M16(Message4_M7_M16&& from) noexcept
      : Message4_M7_M16(nullptr, std::move(from)) {}
  inline Message4_M7_M16& operator=(const Message4_M7_M16& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M16& operator=(Message4_M7_M16&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M16& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M16* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M16*>(
        &_Message4_M7_M16_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 86;
  friend void swap(Message4_M7_M16& a, Message4_M7_M16& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M16* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M16* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M16* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M16>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M16& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M16& from) { Message4_M7_M16::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M16* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M16"; }

 protected:
  explicit Message4_M7_M16(::google::protobuf::Arena* arena);
  Message4_M7_M16(::google::protobuf::Arena* arena, const Message4_M7_M16& from);
  Message4_M7_M16(::google::protobuf::Arena* arena, Message4_M7_M16&& from) noexcept
      : Message4_M7_M16(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M28 = Message4_M7_M16_M28;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // optional .fleetbench.proto.Message4.M7.M16.M28 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M7_M16_M28& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16_M28* release_f_2();
  ::fleetbench::proto::Message4_M7_M16_M28* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28* value);
  ::fleetbench::proto::Message4_M7_M16_M28* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M7_M16_M28& _internal_f_2() const;
  ::fleetbench::proto::Message4_M7_M16_M28* _internal_mutable_f_2();

  public:
  // optional fixed32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M16)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M16_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M16_M28* f_2_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 61;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M87 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 3,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* release_f_1();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& _internal_f_1() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      88, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M6 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M6) */ {
 public:
  inline Message4_M6() : Message4_M6(nullptr) {}
  ~Message4_M6() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M6(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M6(const Message4_M6& from) : Message4_M6(nullptr, from) {}
  inline Message4_M6(Message4_M6&& from) noexcept
      : Message4_M6(nullptr, std::move(from)) {}
  inline Message4_M6& operator=(const Message4_M6& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M6& operator=(Message4_M6&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M6& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M6* internal_default_instance() {
    return reinterpret_cast<const Message4_M6*>(
        &_Message4_M6_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 48;
  friend void swap(Message4_M6& a, Message4_M6& b) { a.Swap(&b); }
  inline void Swap(Message4_M6* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M6* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M6* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M6>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M6& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M6& from) { Message4_M6::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M6* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M6"; }

 protected:
  explicit Message4_M6(::google::protobuf::Arena* arena);
  Message4_M6(::google::protobuf::Arena* arena, const Message4_M6& from);
  Message4_M6(::google::protobuf::Arena* arena, Message4_M6&& from) noexcept
      : Message4_M6(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M11 = Message4_M6_M11;
  using M19 = Message4_M6_M19;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_1()->generate_schema(schema);
      mutable_f_2()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_2()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_2()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 3,
    kF0FieldNumber = 1,
  };
  // optional .fleetbench.proto.Message4.M6.M11 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M6_M11& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M11* release_f_1();
  ::fleetbench::proto::Message4_M6_M11* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M6_M11* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M11* value);
  ::fleetbench::proto::Message4_M6_M11* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M6_M11& _internal_f_1() const;
  ::fleetbench::proto::Message4_M6_M11* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message4.M6.M19 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M6_M19& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6_M19* release_f_2();
  ::fleetbench::proto::Message4_M6_M19* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M6_M19* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M6_M19* value);
  ::fleetbench::proto::Message4_M6_M19* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M6_M19& _internal_f_2() const;
  ::fleetbench::proto::Message4_M6_M19* _internal_mutable_f_2();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M6)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M6_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M6_M11* f_1_;
    ::fleetbench::proto::Message4_M6_M19* f_2_;
    ::int32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9_M25 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9.M25) */ {
 public:
  inline Message4_M3_M9_M25() : Message4_M3_M9_M25(nullptr) {}
  ~Message4_M3_M9_M25() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9_M25(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9_M25(const Message4_M3_M9_M25& from) : Message4_M3_M9_M25(nullptr, from) {}
  inline Message4_M3_M9_M25(Message4_M3_M9_M25&& from) noexcept
      : Message4_M3_M9_M25(nullptr, std::move(from)) {}
  inline Message4_M3_M9_M25& operator=(const Message4_M3_M9_M25& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9_M25& operator=(Message4_M3_M9_M25&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9_M25& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9_M25* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9_M25*>(
        &_Message4_M3_M9_M25_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(Message4_M3_M9_M25& a, Message4_M3_M9_M25& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9_M25* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9_M25* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9_M25* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9_M25>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9_M25& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9_M25& from) { Message4_M3_M9_M25::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9_M25* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9.M25"; }

 protected:
  explicit Message4_M3_M9_M25(::google::protobuf::Arena* arena);
  Message4_M3_M9_M25(::google::protobuf::Arena* arena, const Message4_M3_M9_M25& from);
  Message4_M3_M9_M25(::google::protobuf::Arena* arena, Message4_M3_M9_M25&& from) noexcept
      : Message4_M3_M9_M25(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M38 = Message4_M3_M9_M25_M38;
  using E11 = Message4_M3_M9_M25_E11;
  static constexpr E11 E11_UNSPECIFIED = Message4_M3_M9_M25_E11_E11_UNSPECIFIED;
  static constexpr E11 E11_CONST_1 = Message4_M3_M9_M25_E11_E11_CONST_1;
  static constexpr E11 E11_CONST_2 = Message4_M3_M9_M25_E11_E11_CONST_2;
  static constexpr E11 E11_CONST_3 = Message4_M3_M9_M25_E11_E11_CONST_3;
  static constexpr E11 E11_CONST_4 = Message4_M3_M9_M25_E11_E11_CONST_4;
  static constexpr E11 E11_CONST_5 = Message4_M3_M9_M25_E11_E11_CONST_5;
  static inline bool E11_IsValid(int value) {
    return Message4_M3_M9_M25_E11_IsValid(value);
  }
  static constexpr E11 E11_MIN = Message4_M3_M9_M25_E11_E11_MIN;
  static constexpr E11 E11_MAX = Message4_M3_M9_M25_E11_E11_MAX;
  static constexpr int E11_ARRAYSIZE = Message4_M3_M9_M25_E11_E11_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E11_descriptor() {
    return Message4_M3_M9_M25_E11_descriptor();
  }
  template <typename T>
  static inline const std::string& E11_Name(T value) {
    return Message4_M3_M9_M25_E11_Name(value);
  }
  static inline bool E11_Parse(absl::string_view name, E11* value) {
    return Message4_M3_M9_M25_E11_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_10())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())), f_4().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())), f_7().size()));
      mutable_f_13()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_10()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      sizes_list.push_back(f_4().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      sizes_list.push_back(f_7().size());
      mutable_f_13()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      mutable_f_13()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      sizes.push_back(end_addr - start_addr + sizeof(f_10()));
      sizes.push_back(f_4().size());
      sizes.push_back(f_7().size());
      mutable_f_13()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_10_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_4().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_7().c_str())));
      }
      idx = mutable_f_13()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_4(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_7(std::move(tmp_str));
        }
      }
      idx = mutable_f_13()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF7FieldNumber = 10,
    kF13FieldNumber = 17,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF3FieldNumber = 5,
    kF6FieldNumber = 8,
    kF5FieldNumber = 7,
    kF8FieldNumber = 11,
    kF9FieldNumber = 12,
    kF10FieldNumber = 13,
  };
  // optional string f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const std::string& f_4() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_4(Arg_&& arg, Args_... args);
  std::string* mutable_f_4();
  PROTOBUF_NODISCARD std::string* release_f_4();
  void set_allocated_f_4(std::string* value);

  private:
  const std::string& _internal_f_4() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_4(
      const std::string& value);
  std::string* _internal_mutable_f_4();

  public:
  // optional bytes f_7 = 10;
  bool has_f_7() const;
  void clear_f_7() ;
  const std::string& f_7() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_7(Arg_&& arg, Args_... args);
  std::string* mutable_f_7();
  PROTOBUF_NODISCARD std::string* release_f_7();
  void set_allocated_f_7(std::string* value);

  private:
  const std::string& _internal_f_7() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_7(
      const std::string& value);
  std::string* _internal_mutable_f_7();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.M38 f_13 = 17;
  bool has_f_13() const;
  void clear_f_13() ;
  const ::fleetbench::proto::Message4_M3_M9_M25_M38& f_13() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25_M38* release_f_13();
  ::fleetbench::proto::Message4_M3_M9_M25_M38* mutable_f_13();
  void set_allocated_f_13(::fleetbench::proto::Message4_M3_M9_M25_M38* value);
  void unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message4_M3_M9_M25_M38* value);
  ::fleetbench::proto::Message4_M3_M9_M25_M38* unsafe_arena_release_f_13();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25_M38& _internal_f_13() const;
  ::fleetbench::proto::Message4_M3_M9_M25_M38* _internal_mutable_f_13();

  public:
  // optional fixed32 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // optional float f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  float f_1() const;
  void set_f_1(float value);

  private:
  float _internal_f_1() const;
  void _internal_set_f_1(float value);

  public:
  // optional int32 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int32_t f_2() const;
  void set_f_2(::int32_t value);

  private:
  ::int32_t _internal_f_2() const;
  void _internal_set_f_2(::int32_t value);

  public:
  // optional fixed32 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // optional int64 f_6 = 8;
  bool has_f_6() const;
  void clear_f_6() ;
  ::int64_t f_6() const;
  void set_f_6(::int64_t value);

  private:
  ::int64_t _internal_f_6() const;
  void _internal_set_f_6(::int64_t value);

  public:
  // optional float f_5 = 7;
  bool has_f_5() const;
  void clear_f_5() ;
  float f_5() const;
  void set_f_5(float value);

  private:
  float _internal_f_5() const;
  void _internal_set_f_5(float value);

  public:
  // optional int32 f_8 = 11;
  bool has_f_8() const;
  void clear_f_8() ;
  ::int32_t f_8() const;
  void set_f_8(::int32_t value);

  private:
  ::int32_t _internal_f_8() const;
  void _internal_set_f_8(::int32_t value);

  public:
  // optional int32 f_9 = 12;
  bool has_f_9() const;
  void clear_f_9() ;
  ::int32_t f_9() const;
  void set_f_9(::int32_t value);

  private:
  ::int32_t _internal_f_9() const;
  void _internal_set_f_9(::int32_t value);

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25.E11 f_10 = 13;
  bool has_f_10() const;
  void clear_f_10() ;
  ::fleetbench::proto::Message4_M3_M9_M25_E11 f_10() const;
  void set_f_10(::fleetbench::proto::Message4_M3_M9_M25_E11 value);

  private:
  ::fleetbench::proto::Message4_M3_M9_M25_E11 _internal_f_10() const;
  void _internal_set_f_10(::fleetbench::proto::Message4_M3_M9_M25_E11 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9.M25)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 2,
      55, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_M25_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_4_;
    ::google::protobuf::internal::ArenaStringPtr f_7_;
    ::fleetbench::proto::Message4_M3_M9_M25_M38* f_13_;
    ::uint32_t f_0_;
    float f_1_;
    ::int32_t f_2_;
    ::uint32_t f_3_;
    ::int64_t f_6_;
    float f_5_;
    ::int32_t f_8_;
    ::int32_t f_9_;
    int f_10_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 62;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M86 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& f_2(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>& f_2() const;
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      84, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86 > f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3_M9 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3.M9) */ {
 public:
  inline Message4_M3_M9() : Message4_M3_M9(nullptr) {}
  ~Message4_M3_M9() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3_M9(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3_M9(const Message4_M3_M9& from) : Message4_M3_M9(nullptr, from) {}
  inline Message4_M3_M9(Message4_M3_M9&& from) noexcept
      : Message4_M3_M9(nullptr, std::move(from)) {}
  inline Message4_M3_M9& operator=(const Message4_M3_M9& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3_M9& operator=(Message4_M3_M9&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3_M9& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3_M9* internal_default_instance() {
    return reinterpret_cast<const Message4_M3_M9*>(
        &_Message4_M3_M9_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(Message4_M3_M9& a, Message4_M3_M9& b) { a.Swap(&b); }
  inline void Swap(Message4_M3_M9* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3_M9* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3_M9* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3_M9>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3_M9& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3_M9& from) { Message4_M3_M9::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3_M9* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3.M9"; }

 protected:
  explicit Message4_M3_M9(::google::protobuf::Arena* arena);
  Message4_M3_M9(::google::protobuf::Arena* arena, const Message4_M3_M9& from);
  Message4_M3_M9(::google::protobuf::Arena* arena, Message4_M3_M9&& from) noexcept
      : Message4_M3_M9(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M21 = Message4_M3_M9_M21;
  using M25 = Message4_M3_M9_M25;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_2()->generate_schema(schema);
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_2()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_2()->generate_scatter_ptrs(ptrs);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_2()->generate_scatter_sizes(sizes);
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_2()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_2()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 2,
    kF2FieldNumber = 3,
    kF3FieldNumber = 4,
  };
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M21 f_2 = 3;
  bool has_f_2() const;
  void clear_f_2() ;
  const ::fleetbench::proto::Message4_M3_M9_M21& f_2() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M21* release_f_2();
  ::fleetbench::proto::Message4_M3_M9_M21* mutable_f_2();
  void set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M21* value);
  void unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M21* value);
  ::fleetbench::proto::Message4_M3_M9_M21* unsafe_arena_release_f_2();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M21& _internal_f_2() const;
  ::fleetbench::proto::Message4_M3_M9_M21* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message4.M3.M9.M25 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M3_M9_M25& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9_M25* release_f_3();
  ::fleetbench::proto::Message4_M3_M9_M25* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25* value);
  ::fleetbench::proto::Message4_M3_M9_M25* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M3_M9_M25& _internal_f_3() const;
  ::fleetbench::proto::Message4_M3_M9_M25* _internal_mutable_f_3();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3.M9)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      43, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_M9_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message4_M3_M9_M21* f_2_;
    ::fleetbench::proto::Message4_M3_M9_M25* f_3_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 63;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M84 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& f_2(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>& f_2() const;
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84 > f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M3 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M3) */ {
 public:
  inline Message4_M3() : Message4_M3(nullptr) {}
  ~Message4_M3() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M3(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M3(const Message4_M3& from) : Message4_M3(nullptr, from) {}
  inline Message4_M3(Message4_M3&& from) noexcept
      : Message4_M3(nullptr, std::move(from)) {}
  inline Message4_M3& operator=(const Message4_M3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M3& operator=(Message4_M3&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M3* internal_default_instance() {
    return reinterpret_cast<const Message4_M3*>(
        &_Message4_M3_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(Message4_M3& a, Message4_M3& b) { a.Swap(&b); }
  inline void Swap(Message4_M3* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M3* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M3* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M3>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M3& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M3& from) { Message4_M3::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M3* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M3"; }

 protected:
  explicit Message4_M3(::google::protobuf::Arena* arena);
  Message4_M3(::google::protobuf::Arena* arena, const Message4_M3& from);
  Message4_M3(::google::protobuf::Arena* arena, Message4_M3&& from) noexcept
      : Message4_M3(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M9 = Message4_M3_M9;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())), f_3().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())), f_6().size()));
      mutable_f_10()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      sizes_list.push_back(f_3().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      sizes_list.push_back(f_6().size());
      mutable_f_10()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      mutable_f_10()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_3().size());
      sizes.push_back(f_6().size());
      mutable_f_10()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_3().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_6().c_str())));
      }
      idx = mutable_f_10()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_3(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_6(std::move(tmp_str));
        }
      }
      idx = mutable_f_10()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 5,
    kF6FieldNumber = 10,
    kF10FieldNumber = 11,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF4FieldNumber = 7,
    kF5FieldNumber = 9,
  };
  // optional string f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const std::string& f_3() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_3(Arg_&& arg, Args_... args);
  std::string* mutable_f_3();
  PROTOBUF_NODISCARD std::string* release_f_3();
  void set_allocated_f_3(std::string* value);

  private:
  const std::string& _internal_f_3() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_3(
      const std::string& value);
  std::string* _internal_mutable_f_3();

  public:
  // optional bytes f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  const std::string& f_6() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_6(Arg_&& arg, Args_... args);
  std::string* mutable_f_6();
  PROTOBUF_NODISCARD std::string* release_f_6();
  void set_allocated_f_6(std::string* value);

  private:
  const std::string& _internal_f_6() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_6(
      const std::string& value);
  std::string* _internal_mutable_f_6();

  public:
  // optional .fleetbench.proto.Message4.M3.M9 f_10 = 11;
  bool has_f_10() const;
  void clear_f_10() ;
  const ::fleetbench::proto::Message4_M3_M9& f_10() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3_M9* release_f_10();
  ::fleetbench::proto::Message4_M3_M9* mutable_f_10();
  void set_allocated_f_10(::fleetbench::proto::Message4_M3_M9* value);
  void unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message4_M3_M9* value);
  ::fleetbench::proto::Message4_M3_M9* unsafe_arena_release_f_10();

  private:
  const ::fleetbench::proto::Message4_M3_M9& _internal_f_10() const;
  ::fleetbench::proto::Message4_M3_M9* _internal_mutable_f_10();

  public:
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional fixed64 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  ::uint64_t f_1() const;
  void set_f_1(::uint64_t value);

  private:
  ::uint64_t _internal_f_1() const;
  void _internal_set_f_1(::uint64_t value);

  public:
  // optional int64 f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  ::int64_t f_2() const;
  void set_f_2(::int64_t value);

  private:
  ::int64_t _internal_f_2() const;
  void _internal_set_f_2(::int64_t value);

  public:
  // optional float f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  float f_4() const;
  void set_f_4(float value);

  private:
  float _internal_f_4() const;
  void _internal_set_f_4(float value);

  public:
  // optional fixed32 f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  ::uint32_t f_5() const;
  void set_f_5(::uint32_t value);

  private:
  ::uint32_t _internal_f_5() const;
  void _internal_set_f_5(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M3)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 1,
      48, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M3_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_3_;
    ::google::protobuf::internal::ArenaStringPtr f_6_;
    ::fleetbench::proto::Message4_M3_M9* f_10_;
    ::int64_t f_0_;
    ::uint64_t f_1_;
    ::int64_t f_2_;
    float f_4_;
    ::uint32_t f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 64;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M83 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF0FieldNumber = 2,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83 f_2 = 3;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& f_2(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>& f_2() const;
  // optional int64 f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83 > f_2_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77() : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 65;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M78 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78;
  using M79 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79;
  using M80 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80;
  using E28 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28;
  static constexpr E28 E28_UNSPECIFIED = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_UNSPECIFIED;
  static constexpr E28 E28_CONST_1 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_1;
  static constexpr E28 E28_CONST_2 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_2;
  static constexpr E28 E28_CONST_3 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_3;
  static constexpr E28 E28_CONST_4 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_4;
  static constexpr E28 E28_CONST_5 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_CONST_5;
  static inline bool E28_IsValid(int value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_IsValid(value);
  }
  static constexpr E28 E28_MIN = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_MIN;
  static constexpr E28 E28_MAX = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_MAX;
  static constexpr int E28_ARRAYSIZE = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_E28_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E28_descriptor() {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_descriptor();
  }
  template <typename T>
  static inline const std::string& E28_Name(T value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_Name(value);
  }
  static inline bool E28_Parse(absl::string_view name, E28* value) {
    return Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_6())));
      for (int i = 0; i < f_13_size(); ++i) {
        mutable_f_13(i)->generate_schema(schema);
      }
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())), f_5().size()));
      mutable_f_11()->generate_schema(schema);
      mutable_f_12()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_6()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_13().size());
      for (int i = 0; i < f_13_size(); ++i) {
        mutable_f_13(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      sizes_list.push_back(f_5().size());
      mutable_f_11()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_12()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_13_size(); ++i) {
        mutable_f_13(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      mutable_f_11()->generate_scatter_ptrs(ptrs);
      mutable_f_12()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      sizes.push_back(end_addr - start_addr + sizeof(f_6()));
      sizes.push_back(f_13().size());
      for (int i = 0; i < f_13_size(); ++i) {
        mutable_f_13(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_0().size());
      sizes.push_back(f_1().size());
      sizes.push_back(f_2().size());
      sizes.push_back(f_5().size());
      mutable_f_11()->generate_scatter_sizes(sizes);
      mutable_f_12()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_3_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_6_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_13_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_13_entries; ++i) {
        auto* new_msg = add_f_13();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_13(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_5().c_str())));
      }
      idx = mutable_f_11()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_12()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_13_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_13_entries; ++i) {
        auto* new_msg = add_f_13();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_13(i)->allocate_from_sizes(sizes, idx); 
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_5(std::move(tmp_str));
        }
      }
      idx = mutable_f_11()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_12()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF13FieldNumber = 14,
    kF0FieldNumber = 2,
    kF1FieldNumber = 3,
    kF2FieldNumber = 5,
    kF5FieldNumber = 9,
    kF11FieldNumber = 12,
    kF12FieldNumber = 13,
    kF3FieldNumber = 6,
    kF4FieldNumber = 7,
    kF7FieldNumber = 11,
    kF6FieldNumber = 10,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80 f_13 = 14;
  int f_13_size() const;
  private:
  int _internal_f_13_size() const;

  public:
  void clear_f_13() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* mutable_f_13(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>* mutable_f_13();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>& _internal_f_13() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>* _internal_mutable_f_13();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& f_13(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* add_f_13();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>& f_13() const;
  // optional string f_0 = 2;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional bytes f_2 = 5;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional string f_5 = 9;
  bool has_f_5() const;
  void clear_f_5() ;
  const std::string& f_5() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_5(Arg_&& arg, Args_... args);
  std::string* mutable_f_5();
  PROTOBUF_NODISCARD std::string* release_f_5();
  void set_allocated_f_5(std::string* value);

  private:
  const std::string& _internal_f_5() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_5(
      const std::string& value);
  std::string* _internal_mutable_f_5();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78 f_11 = 12;
  bool has_f_11() const;
  void clear_f_11() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& f_11() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* release_f_11();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* mutable_f_11();
  void set_allocated_f_11(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* value);
  void unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* unsafe_arena_release_f_11();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& _internal_f_11() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* _internal_mutable_f_11();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79 f_12 = 13;
  bool has_f_12() const;
  void clear_f_12() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& f_12() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* release_f_12();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* mutable_f_12();
  void set_allocated_f_12(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* value);
  void unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* unsafe_arena_release_f_12();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& _internal_f_12() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* _internal_mutable_f_12();

  public:
  // optional fixed32 f_3 = 6;
  bool has_f_3() const;
  void clear_f_3() ;
  ::uint32_t f_3() const;
  void set_f_3(::uint32_t value);

  private:
  ::uint32_t _internal_f_3() const;
  void _internal_set_f_3(::uint32_t value);

  public:
  // optional bool f_4 = 7;
  bool has_f_4() const;
  void clear_f_4() ;
  bool f_4() const;
  void set_f_4(bool value);

  private:
  bool _internal_f_4() const;
  void _internal_set_f_4(bool value);

  public:
  // optional int64 f_7 = 11;
  bool has_f_7() const;
  void clear_f_7() ;
  ::int64_t f_7() const;
  void set_f_7(::int64_t value);

  private:
  ::int64_t _internal_f_7() const;
  void _internal_set_f_7(::int64_t value);

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.E28 f_6 = 10;
  bool has_f_6() const;
  void clear_f_6() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 f_6() const;
  void set_f_6(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 value);

  private:
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 _internal_f_6() const;
  void _internal_set_f_6(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 4,
      86, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80 > f_13_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::google::protobuf::internal::ArenaStringPtr f_5_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* f_11_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* f_12_;
    ::uint32_t f_3_;
    bool f_4_;
    ::int64_t f_7_;
    int f_6_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66_M73 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73() : Message4_M7_M14_M29_M34_M41_M58_M66_M73(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66_M73() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66_M73(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73(const Message4_M7_M14_M29_M34_M41_M58_M66_M73& from) : Message4_M7_M14_M29_M34_M41_M58_M66_M73(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73(Message4_M7_M14_M29_M34_M41_M58_M66_M73&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66_M73& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66_M73& operator=(Message4_M7_M14_M29_M34_M41_M58_M66_M73&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66_M73& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66_M73* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66_M73*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 66;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73& a, Message4_M7_M14_M29_M34_M41_M58_M66_M73& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66_M73* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66_M73* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66_M73>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66_M73& from) { Message4_M7_M14_M29_M34_M41_M58_M66_M73::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66_M73* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66_M73(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66_M73& from);
  Message4_M7_M14_M29_M34_M41_M58_M66_M73(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66_M73&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66_M73(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M76 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76;
  using M77 = Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_schema(schema);
      }
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_4().size());
      for (int i = 0; i < f_4_size(); ++i) {
        mutable_f_4(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_4_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_4_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_4_entries; ++i) {
        auto* new_msg = add_f_4();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_4(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 6,
    kF3FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77 f_4 = 6;
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* mutable_f_4(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>& _internal_f_4() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>* _internal_mutable_f_4();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& f_4(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* add_f_4();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>& f_4() const;
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76 f_3 = 4;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* release_f_3();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& _internal_f_3() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* _internal_mutable_f_3();

  public:
  // optional int64 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_M73_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77 > f_4_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* f_3_;
    ::int64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58_M66 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58_M66() : Message4_M7_M14_M29_M34_M41_M58_M66(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58_M66() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58_M66(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58_M66(const Message4_M7_M14_M29_M34_M41_M58_M66& from) : Message4_M7_M14_M29_M34_M41_M58_M66(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66(Message4_M7_M14_M29_M34_M41_M58_M66&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58_M66& operator=(const Message4_M7_M14_M29_M34_M41_M58_M66& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58_M66& operator=(Message4_M7_M14_M29_M34_M41_M58_M66&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58_M66& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58_M66* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58_M66*>(
        &_Message4_M7_M14_M29_M34_M41_M58_M66_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 67;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58_M66& a, Message4_M7_M14_M29_M34_M41_M58_M66& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58_M66* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58_M66* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58_M66* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58_M66>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58_M66& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58_M66& from) { Message4_M7_M14_M29_M34_M41_M58_M66::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58_M66* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58_M66(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58_M66(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58_M66& from);
  Message4_M7_M14_M29_M34_M41_M58_M66(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58_M66&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58_M66(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M73 = Message4_M7_M14_M29_M34_M41_M58_M66_M73;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_3()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_3()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_3()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_3()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_3()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 5,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73 f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73& f_3() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* release_f_3();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* mutable_f_3();
  void set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* value);
  void unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* unsafe_arena_release_f_3();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73& _internal_f_3() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* _internal_mutable_f_3();

  public:
  // optional float f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_M66_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* f_3_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41_M58 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41_M58() : Message4_M7_M14_M29_M34_M41_M58(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41_M58() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41_M58(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41_M58(const Message4_M7_M14_M29_M34_M41_M58& from) : Message4_M7_M14_M29_M34_M41_M58(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41_M58(Message4_M7_M14_M29_M34_M41_M58&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41_M58& operator=(const Message4_M7_M14_M29_M34_M41_M58& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41_M58& operator=(Message4_M7_M14_M29_M34_M41_M58&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41_M58& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41_M58* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41_M58*>(
        &_Message4_M7_M14_M29_M34_M41_M58_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 68;
  friend void swap(Message4_M7_M14_M29_M34_M41_M58& a, Message4_M7_M14_M29_M34_M41_M58& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41_M58* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41_M58* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41_M58* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41_M58>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41_M58& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41_M58& from) { Message4_M7_M14_M29_M34_M41_M58::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41_M58* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41_M58(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41_M58(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41_M58& from);
  Message4_M7_M14_M29_M34_M41_M58(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41_M58&& from) noexcept
      : Message4_M7_M14_M29_M34_M41_M58(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M66 = Message4_M7_M14_M29_M34_M41_M58_M66;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())), f_1().size()));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      sizes_list.push_back(f_1().size());
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      sizes.push_back(f_2().size());
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_1().c_str())));
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_1(std::move(tmp_str));
        }
      }
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 3,
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF0FieldNumber = 1,
  };
  // optional string f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const std::string& f_1() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_1(Arg_&& arg, Args_... args);
  std::string* mutable_f_1();
  PROTOBUF_NODISCARD std::string* release_f_1();
  void set_allocated_f_1(std::string* value);

  private:
  const std::string& _internal_f_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_1(
      const std::string& value);
  std::string* _internal_mutable_f_1();

  public:
  // optional bytes f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* release_f_4();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66& _internal_f_4() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* _internal_mutable_f_4();

  public:
  // optional fixed64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint64_t f_0() const;
  void set_f_0(::uint64_t value);

  private:
  ::uint64_t _internal_f_0() const;
  void _internal_set_f_0(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 1,
      60, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_M58_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_1_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* f_4_;
    ::uint64_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34_M41 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34.M41) */ {
 public:
  inline Message4_M7_M14_M29_M34_M41() : Message4_M7_M14_M29_M34_M41(nullptr) {}
  ~Message4_M7_M14_M29_M34_M41() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34_M41(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34_M41(const Message4_M7_M14_M29_M34_M41& from) : Message4_M7_M14_M29_M34_M41(nullptr, from) {}
  inline Message4_M7_M14_M29_M34_M41(Message4_M7_M14_M29_M34_M41&& from) noexcept
      : Message4_M7_M14_M29_M34_M41(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34_M41& operator=(const Message4_M7_M14_M29_M34_M41& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34_M41& operator=(Message4_M7_M14_M29_M34_M41&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34_M41& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34_M41* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34_M41*>(
        &_Message4_M7_M14_M29_M34_M41_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 70;
  friend void swap(Message4_M7_M14_M29_M34_M41& a, Message4_M7_M14_M29_M34_M41& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34_M41* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34_M41* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34_M41* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34_M41>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34_M41& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34_M41& from) { Message4_M7_M14_M29_M34_M41::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34_M41* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34.M41"; }

 protected:
  explicit Message4_M7_M14_M29_M34_M41(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34_M41(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34_M41& from);
  Message4_M7_M14_M29_M34_M41(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34_M41&& from) noexcept
      : Message4_M7_M14_M29_M34_M41(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M58 = Message4_M7_M14_M29_M34_M41_M58;
  using M61 = Message4_M7_M14_M29_M34_M41_M61;
  using E17 = Message4_M7_M14_M29_M34_M41_E17;
  static constexpr E17 E17_UNSPECIFIED = Message4_M7_M14_M29_M34_M41_E17_E17_UNSPECIFIED;
  static constexpr E17 E17_CONST_1 = Message4_M7_M14_M29_M34_M41_E17_E17_CONST_1;
  static constexpr E17 E17_CONST_2 = Message4_M7_M14_M29_M34_M41_E17_E17_CONST_2;
  static constexpr E17 E17_CONST_3 = Message4_M7_M14_M29_M34_M41_E17_E17_CONST_3;
  static constexpr E17 E17_CONST_4 = Message4_M7_M14_M29_M34_M41_E17_E17_CONST_4;
  static constexpr E17 E17_CONST_5 = Message4_M7_M14_M29_M34_M41_E17_E17_CONST_5;
  static inline bool E17_IsValid(int value) {
    return Message4_M7_M14_M29_M34_M41_E17_IsValid(value);
  }
  static constexpr E17 E17_MIN = Message4_M7_M14_M29_M34_M41_E17_E17_MIN;
  static constexpr E17 E17_MAX = Message4_M7_M14_M29_M34_M41_E17_E17_MAX;
  static constexpr int E17_ARRAYSIZE = Message4_M7_M14_M29_M34_M41_E17_E17_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E17_descriptor() {
    return Message4_M7_M14_M29_M34_M41_E17_descriptor();
  }
  template <typename T>
  static inline const std::string& E17_Name(T value) {
    return Message4_M7_M14_M29_M34_M41_E17_Name(value);
  }
  static inline bool E17_Parse(absl::string_view name, E17* value) {
    return Message4_M7_M14_M29_M34_M41_E17_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_schema(schema);
      }
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_schema(schema);
      }
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_ptrs(ptrs);
      }
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_ptrs(ptrs);
      }
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_1().size());
      for (int i = 0; i < f_1_size(); ++i) {
        mutable_f_1(i)->generate_scatter_sizes(sizes);
      }
      sizes.push_back(f_2().size());
      for (int i = 0; i < f_2_size(); ++i) {
        mutable_f_2(i)->generate_scatter_sizes(sizes);
      }
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_1_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_1_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_1_entries; ++i) {
        auto* new_msg = add_f_1();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_1(i)->allocate_from_sizes(sizes, idx); 
      }
      size_t num_f_2_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_2_entries; ++i) {
        auto* new_msg = add_f_2();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_2(i)->allocate_from_sizes(sizes, idx); 
      }
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF1FieldNumber = 2,
    kF2FieldNumber = 4,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58 f_1 = 2;
  int f_1_size() const;
  private:
  int _internal_f_1_size() const;

  public:
  void clear_f_1() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58* mutable_f_1(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>* mutable_f_1();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>& _internal_f_1() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>* _internal_mutable_f_1();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58& f_1(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58* add_f_1();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>& f_1() const;
  // repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M61 f_2 = 4;
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61* mutable_f_2(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>& _internal_f_2() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>* _internal_mutable_f_2();
  public:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61& f_2(int index) const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61* add_f_2();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>& f_2() const;
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.E17 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 f_0() const;
  void set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 value);

  private:
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 _internal_f_0() const;
  void _internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34.M41)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_M41_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58 > f_1_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61 > f_2_;
    int f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29_M34 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29.M34) */ {
 public:
  inline Message4_M7_M14_M29_M34() : Message4_M7_M14_M29_M34(nullptr) {}
  ~Message4_M7_M14_M29_M34() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29_M34(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29_M34(const Message4_M7_M14_M29_M34& from) : Message4_M7_M14_M29_M34(nullptr, from) {}
  inline Message4_M7_M14_M29_M34(Message4_M7_M14_M29_M34&& from) noexcept
      : Message4_M7_M14_M29_M34(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29_M34& operator=(const Message4_M7_M14_M29_M34& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29_M34& operator=(Message4_M7_M14_M29_M34&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29_M34& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29_M34* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29_M34*>(
        &_Message4_M7_M14_M29_M34_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 71;
  friend void swap(Message4_M7_M14_M29_M34& a, Message4_M7_M14_M29_M34& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29_M34* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29_M34* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29_M34* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29_M34>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29_M34& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29_M34& from) { Message4_M7_M14_M29_M34::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29_M34* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29.M34"; }

 protected:
  explicit Message4_M7_M14_M29_M34(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29_M34(::google::protobuf::Arena* arena, const Message4_M7_M14_M29_M34& from);
  Message4_M7_M14_M29_M34(::google::protobuf::Arena* arena, Message4_M7_M14_M29_M34&& from) noexcept
      : Message4_M7_M14_M29_M34(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M41 = Message4_M7_M14_M29_M34_M41;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_1())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())), f_2().size()));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_1()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      sizes_list.push_back(f_2().size());
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      sizes.push_back(end_addr - start_addr + sizeof(f_1()));
      sizes.push_back(f_2().size());
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_2().c_str())));
      }
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_2(std::move(tmp_str));
        }
      }
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 4,
    kF4FieldNumber = 5,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional string f_2 = 4;
  bool has_f_2() const;
  void clear_f_2() ;
  const std::string& f_2() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_2(Arg_&& arg, Args_... args);
  std::string* mutable_f_2();
  PROTOBUF_NODISCARD std::string* release_f_2();
  void set_allocated_f_2(std::string* value);

  private:
  const std::string& _internal_f_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_2(
      const std::string& value);
  std::string* _internal_mutable_f_2();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* release_f_4();
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41& _internal_f_4() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* _internal_mutable_f_4();

  public:
  // optional int32 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int32_t f_0() const;
  void set_f_0(::int32_t value);

  private:
  ::int32_t _internal_f_0() const;
  void _internal_set_f_0(::int32_t value);

  public:
  // optional int32 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int32_t f_1() const;
  void set_f_1(::int32_t value);

  private:
  ::int32_t _internal_f_1() const;
  void _internal_set_f_1(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29.M34)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 4, 1,
      52, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_M34_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_2_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* f_4_;
    ::int32_t f_0_;
    ::int32_t f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14_M29 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14.M29) */ {
 public:
  inline Message4_M7_M14_M29() : Message4_M7_M14_M29(nullptr) {}
  ~Message4_M7_M14_M29() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14_M29(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14_M29(const Message4_M7_M14_M29& from) : Message4_M7_M14_M29(nullptr, from) {}
  inline Message4_M7_M14_M29(Message4_M7_M14_M29&& from) noexcept
      : Message4_M7_M14_M29(nullptr, std::move(from)) {}
  inline Message4_M7_M14_M29& operator=(const Message4_M7_M14_M29& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14_M29& operator=(Message4_M7_M14_M29&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14_M29& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14_M29* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14_M29*>(
        &_Message4_M7_M14_M29_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 72;
  friend void swap(Message4_M7_M14_M29& a, Message4_M7_M14_M29& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14_M29* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14_M29* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14_M29* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14_M29>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14_M29& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14_M29& from) { Message4_M7_M14_M29::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14_M29* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14.M29"; }

 protected:
  explicit Message4_M7_M14_M29(::google::protobuf::Arena* arena);
  Message4_M7_M14_M29(::google::protobuf::Arena* arena, const Message4_M7_M14_M29& from);
  Message4_M7_M14_M29(::google::protobuf::Arena* arena, Message4_M7_M14_M29&& from) noexcept
      : Message4_M7_M14_M29(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M34 = Message4_M7_M14_M29_M34;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      mutable_f_4()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      mutable_f_4()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_1_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF4FieldNumber = 5,
    kF1FieldNumber = 4,
    kF0FieldNumber = 3,
  };
  // optional .fleetbench.proto.Message4.M7.M14.M29.M34 f_4 = 5;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M7_M14_M29_M34& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29_M34* release_f_4();
  ::fleetbench::proto::Message4_M7_M14_M29_M34* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34* value);
  ::fleetbench::proto::Message4_M7_M14_M29_M34* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29_M34& _internal_f_4() const;
  ::fleetbench::proto::Message4_M7_M14_M29_M34* _internal_mutable_f_4();

  public:
  // optional int64 f_1 = 4;
  bool has_f_1() const;
  void clear_f_1() ;
  ::int64_t f_1() const;
  void set_f_1(::int64_t value);

  private:
  ::int64_t _internal_f_1() const;
  void _internal_set_f_1(::int64_t value);

  public:
  // optional fixed32 f_0 = 3;
  bool has_f_0() const;
  void clear_f_0() ;
  ::uint32_t f_0() const;
  void set_f_0(::uint32_t value);

  private:
  ::uint32_t _internal_f_0() const;
  void _internal_set_f_0(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14.M29)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_M29_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::fleetbench::proto::Message4_M7_M14_M29_M34* f_4_;
    ::int64_t f_1_;
    ::uint32_t f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7_M14 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7.M14) */ {
 public:
  inline Message4_M7_M14() : Message4_M7_M14(nullptr) {}
  ~Message4_M7_M14() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7_M14(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7_M14(const Message4_M7_M14& from) : Message4_M7_M14(nullptr, from) {}
  inline Message4_M7_M14(Message4_M7_M14&& from) noexcept
      : Message4_M7_M14(nullptr, std::move(from)) {}
  inline Message4_M7_M14& operator=(const Message4_M7_M14& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7_M14& operator=(Message4_M7_M14&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7_M14& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7_M14* internal_default_instance() {
    return reinterpret_cast<const Message4_M7_M14*>(
        &_Message4_M7_M14_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 73;
  friend void swap(Message4_M7_M14& a, Message4_M7_M14& b) { a.Swap(&b); }
  inline void Swap(Message4_M7_M14* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7_M14* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7_M14* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7_M14>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7_M14& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7_M14& from) { Message4_M7_M14::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7_M14* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7.M14"; }

 protected:
  explicit Message4_M7_M14(::google::protobuf::Arena* arena);
  Message4_M7_M14(::google::protobuf::Arena* arena, const Message4_M7_M14& from);
  Message4_M7_M14(::google::protobuf::Arena* arena, Message4_M7_M14&& from) noexcept
      : Message4_M7_M14(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M29 = Message4_M7_M14_M29;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())), f_0().size()));
      mutable_f_1()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(0);
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      sizes_list.push_back(f_0().size());
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      mutable_f_1()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      sizes.push_back(0);
      sizes.push_back(f_0().size());
      mutable_f_1()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      ptrs.push_back(nullptr);
      // recursive fields pointers + allocation
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
        ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<char*>(f_0().c_str())));
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      {
        std::string tmp_str(sizes[idx], 'x');  // Preallocate needed size
        if (sizes[idx++] != 0) {
          set_f_0(std::move(tmp_str));
        }
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
  };
  // optional string f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  const std::string& f_0() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_f_0(Arg_&& arg, Args_... args);
  std::string* mutable_f_0();
  PROTOBUF_NODISCARD std::string* release_f_0();
  void set_allocated_f_0(std::string* value);

  private:
  const std::string& _internal_f_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_f_0(
      const std::string& value);
  std::string* _internal_mutable_f_0();

  public:
  // optional .fleetbench.proto.Message4.M7.M14.M29 f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M7_M14_M29& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14_M29* release_f_1();
  ::fleetbench::proto::Message4_M7_M14_M29* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29* value);
  ::fleetbench::proto::Message4_M7_M14_M29* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M7_M14_M29& _internal_f_1() const;
  ::fleetbench::proto::Message4_M7_M14_M29* _internal_mutable_f_1();

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7.M14)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      44, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_M14_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr f_0_;
    ::fleetbench::proto::Message4_M7_M14_M29* f_1_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4_M7 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4.M7) */ {
 public:
  inline Message4_M7() : Message4_M7(nullptr) {}
  ~Message4_M7() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4_M7(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4_M7(const Message4_M7& from) : Message4_M7(nullptr, from) {}
  inline Message4_M7(Message4_M7&& from) noexcept
      : Message4_M7(nullptr, std::move(from)) {}
  inline Message4_M7& operator=(const Message4_M7& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4_M7& operator=(Message4_M7&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4_M7& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4_M7* internal_default_instance() {
    return reinterpret_cast<const Message4_M7*>(
        &_Message4_M7_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 90;
  friend void swap(Message4_M7& a, Message4_M7& b) { a.Swap(&b); }
  inline void Swap(Message4_M7* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4_M7* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4_M7* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4_M7>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4_M7& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4_M7& from) { Message4_M7::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4_M7* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4.M7"; }

 protected:
  explicit Message4_M7(::google::protobuf::Arena* arena);
  Message4_M7(::google::protobuf::Arena* arena, const Message4_M7& from);
  Message4_M7(::google::protobuf::Arena* arena, Message4_M7&& from) noexcept
      : Message4_M7(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M14 = Message4_M7_M14;
  using M15 = Message4_M7_M15;
  using M16 = Message4_M7_M16;
  using M18 = Message4_M7_M18;

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_0())));
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_schema(schema);
      }
      mutable_f_1()->generate_schema(schema);
      mutable_f_4()->generate_schema(schema);
      mutable_f_6()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_0()));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_1()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_4()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_6()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_1()->generate_scatter_ptrs(ptrs);
      mutable_f_4()->generate_scatter_ptrs(ptrs);
      mutable_f_6()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      sizes.push_back(end_addr - start_addr + sizeof(f_0()));
      sizes.push_back(f_3().size());
      for (int i = 0; i < f_3_size(); ++i) {
        mutable_f_3(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_1()->generate_scatter_sizes(sizes);
      mutable_f_4()->generate_scatter_sizes(sizes);
      mutable_f_6()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      size_t num_f_3_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_4()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_6()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      size_t num_f_3_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_3_entries; ++i) {
        auto* new_msg = add_f_3();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_3(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_1()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_4()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_6()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF3FieldNumber = 4,
    kF1FieldNumber = 3,
    kF4FieldNumber = 6,
    kF6FieldNumber = 7,
    kF0FieldNumber = 1,
  };
  // repeated .fleetbench.proto.Message4.M7.M15 f_3 = 4;
  int f_3_size() const;
  private:
  int _internal_f_3_size() const;

  public:
  void clear_f_3() ;
  ::fleetbench::proto::Message4_M7_M15* mutable_f_3(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>* mutable_f_3();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>& _internal_f_3() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>* _internal_mutable_f_3();
  public:
  const ::fleetbench::proto::Message4_M7_M15& f_3(int index) const;
  ::fleetbench::proto::Message4_M7_M15* add_f_3();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>& f_3() const;
  // optional .fleetbench.proto.Message4.M7.M14 f_1 = 3;
  bool has_f_1() const;
  void clear_f_1() ;
  const ::fleetbench::proto::Message4_M7_M14& f_1() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M14* release_f_1();
  ::fleetbench::proto::Message4_M7_M14* mutable_f_1();
  void set_allocated_f_1(::fleetbench::proto::Message4_M7_M14* value);
  void unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14* value);
  ::fleetbench::proto::Message4_M7_M14* unsafe_arena_release_f_1();

  private:
  const ::fleetbench::proto::Message4_M7_M14& _internal_f_1() const;
  ::fleetbench::proto::Message4_M7_M14* _internal_mutable_f_1();

  public:
  // optional .fleetbench.proto.Message4.M7.M16 f_4 = 6;
  bool has_f_4() const;
  void clear_f_4() ;
  const ::fleetbench::proto::Message4_M7_M16& f_4() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M16* release_f_4();
  ::fleetbench::proto::Message4_M7_M16* mutable_f_4();
  void set_allocated_f_4(::fleetbench::proto::Message4_M7_M16* value);
  void unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M16* value);
  ::fleetbench::proto::Message4_M7_M16* unsafe_arena_release_f_4();

  private:
  const ::fleetbench::proto::Message4_M7_M16& _internal_f_4() const;
  ::fleetbench::proto::Message4_M7_M16* _internal_mutable_f_4();

  public:
  // optional .fleetbench.proto.Message4.M7.M18 f_6 = 7;
  bool has_f_6() const;
  void clear_f_6() ;
  const ::fleetbench::proto::Message4_M7_M18& f_6() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7_M18* release_f_6();
  ::fleetbench::proto::Message4_M7_M18* mutable_f_6();
  void set_allocated_f_6(::fleetbench::proto::Message4_M7_M18* value);
  void unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message4_M7_M18* value);
  ::fleetbench::proto::Message4_M7_M18* unsafe_arena_release_f_6();

  private:
  const ::fleetbench::proto::Message4_M7_M18& _internal_f_6() const;
  ::fleetbench::proto::Message4_M7_M18* _internal_mutable_f_6();

  public:
  // optional float f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  float f_0() const;
  void set_f_0(float value);

  private:
  float _internal_f_0() const;
  void _internal_set_f_0(float value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4.M7)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 4,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_M7_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M7_M15 > f_3_;
    ::fleetbench::proto::Message4_M7_M14* f_1_;
    ::fleetbench::proto::Message4_M7_M16* f_4_;
    ::fleetbench::proto::Message4_M7_M18* f_6_;
    float f_0_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};
// -------------------------------------------------------------------

class Message4 final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:fleetbench.proto.Message4) */ {
 public:
  inline Message4() : Message4(nullptr) {}
  ~Message4() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Message4(
      ::google::protobuf::internal::ConstantInitialized);

  inline Message4(const Message4& from) : Message4(nullptr, from) {}
  inline Message4(Message4&& from) noexcept
      : Message4(nullptr, std::move(from)) {}
  inline Message4& operator=(const Message4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message4& operator=(Message4&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Message4& default_instance() {
    return *internal_default_instance();
  }
  static inline const Message4* internal_default_instance() {
    return reinterpret_cast<const Message4*>(
        &_Message4_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 92;
  friend void swap(Message4& a, Message4& b) { a.Swap(&b); }
  inline void Swap(Message4* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message4* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Message4* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<Message4>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Message4& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Message4& from) { Message4::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Message4* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "fleetbench.proto.Message4"; }

 protected:
  explicit Message4(::google::protobuf::Arena* arena);
  Message4(::google::protobuf::Arena* arena, const Message4& from);
  Message4(::google::protobuf::Arena* arena, Message4&& from) noexcept
      : Message4(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using M1 = Message4_M1;
  using M2 = Message4_M2;
  using M3 = Message4_M3;
  using M4 = Message4_M4;
  using M5 = Message4_M5;
  using M6 = Message4_M6;
  using M7 = Message4_M7;
  using M8 = Message4_M8;
  using E1 = Message4_E1;
  static constexpr E1 E1_UNSPECIFIED = Message4_E1_E1_UNSPECIFIED;
  static constexpr E1 E1_CONST_1 = Message4_E1_E1_CONST_1;
  static constexpr E1 E1_CONST_2 = Message4_E1_E1_CONST_2;
  static constexpr E1 E1_CONST_3 = Message4_E1_E1_CONST_3;
  static constexpr E1 E1_CONST_4 = Message4_E1_E1_CONST_4;
  static constexpr E1 E1_CONST_5 = Message4_E1_E1_CONST_5;
  static inline bool E1_IsValid(int value) {
    return Message4_E1_IsValid(value);
  }
  static constexpr E1 E1_MIN = Message4_E1_E1_MIN;
  static constexpr E1 E1_MAX = Message4_E1_E1_MAX;
  static constexpr int E1_ARRAYSIZE = Message4_E1_E1_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* E1_descriptor() {
    return Message4_E1_descriptor();
  }
  template <typename T>
  static inline const std::string& E1_Name(T value) {
    return Message4_E1_Name(value);
  }
  static inline bool E1_Parse(absl::string_view name, E1* value) {
    return Message4_E1_Parse(name, value);
  }

  // schemas for IAA/DSA ---------------------------------------------
  void generate_schema(std::vector<std::tuple<uint8_t*, size_t>> &schema) {
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      schema.push_back(std::make_tuple(start_addr, end_addr - start_addr + sizeof(f_5())));
      schema.push_back(std::make_tuple(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())), f_2().size() * sizeof(::int32_t)));
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_schema(schema);
      }
      mutable_f_8()->generate_schema(schema);
      mutable_f_10()->generate_schema(schema);
      mutable_f_11()->generate_schema(schema);
      mutable_f_12()->generate_schema(schema);
      mutable_f_13()->generate_schema(schema);
      mutable_f_14()->generate_schema(schema);
      mutable_f_16()->generate_schema(schema);
  }
  void generate_seperated_schema(std::vector<uint8_t*> &ptrs_list, std::vector<size_t> &sizes_list) {
      // Include _has_bits_ in the schema
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      sizes_list.push_back(sizeof(_impl_._has_bits_));
      // Include the primitives in the schema
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs_list.push_back(start_addr);
      sizes_list.push_back(end_addr - start_addr + sizeof(f_5()));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      sizes_list.push_back(f_2().size() * sizeof(::int32_t));
      ptrs_list.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_4().data())));
      sizes_list.push_back(f_4().size() * sizeof(int));
      ptrs_list.push_back(nullptr);
      sizes_list.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_seperated_schema(ptrs_list, sizes_list);
      }
      mutable_f_8()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_10()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_11()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_12()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_13()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_14()->generate_seperated_schema(ptrs_list, sizes_list);
      mutable_f_16()->generate_seperated_schema(ptrs_list, sizes_list);
  }
  void generate_scatter_ptrs(std::vector<uint8_t*> &ptrs) {
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      // Include primitives in the pointers
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_4().data())));
      ptrs.push_back(nullptr);
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_ptrs(ptrs);
      }
      mutable_f_8()->generate_scatter_ptrs(ptrs);
      mutable_f_10()->generate_scatter_ptrs(ptrs);
      mutable_f_11()->generate_scatter_ptrs(ptrs);
      mutable_f_12()->generate_scatter_ptrs(ptrs);
      mutable_f_13()->generate_scatter_ptrs(ptrs);
      mutable_f_14()->generate_scatter_ptrs(ptrs);
      mutable_f_16()->generate_scatter_ptrs(ptrs);
  }
  void generate_scatter_sizes(std::vector<size_t> &sizes) {
      // Include _has_bits_ in the sizes
      sizes.push_back(sizeof(_impl_._has_bits_));
      // Include primitives in the sizes
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      sizes.push_back(end_addr - start_addr + sizeof(f_5()));
      sizes.push_back(f_2().size() * sizeof(::int32_t));
      sizes.push_back(f_4().size() * sizeof(int));
      sizes.push_back(f_9().size());
      for (int i = 0; i < f_9_size(); ++i) {
        mutable_f_9(i)->generate_scatter_sizes(sizes);
      }
      mutable_f_8()->generate_scatter_sizes(sizes);
      mutable_f_10()->generate_scatter_sizes(sizes);
      mutable_f_11()->generate_scatter_sizes(sizes);
      mutable_f_12()->generate_scatter_sizes(sizes);
      mutable_f_13()->generate_scatter_sizes(sizes);
      mutable_f_14()->generate_scatter_sizes(sizes);
      mutable_f_16()->generate_scatter_sizes(sizes);
  }
  size_t generate_scatter_ptrs_and_allocate_from_sizes(std::vector<uint8_t*> &ptrs, std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      // primitive and has_bit field pointers
      // Include _has_bits_ in the ptrs (always included, since this method is used for deserialization)
      ptrs.push_back(reinterpret_cast<uint8_t*>(&_impl_._has_bits_));
      auto start_addr = reinterpret_cast<uint8_t*>(&_impl_.f_0_);
      //auto end_addr = reinterpret_cast<uint8_t*>(&_impl_.f_5_);
      ptrs.push_back(start_addr);
      // recursive fields pointers + allocation
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<::int32_t*>(f_2().data())));
      mutable_f_4()->Resize(sizes[idx++] / sizeof(int), 0);
      ptrs.push_back(reinterpret_cast<uint8_t*>(const_cast<int*>(f_4().data())));
      size_t num_f_9_entries = sizes[idx++];
      ptrs.push_back(nullptr);
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_8()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_10()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_11()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_12()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_13()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_14()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      idx = mutable_f_16()->generate_scatter_ptrs_and_allocate_from_sizes(ptrs, sizes, idx); 
      return idx;
  }
  size_t allocate_from_sizes(std::vector<size_t> &sizes, size_t idx = 0) {
      // skip has_bits array (no allocation is needed)
      idx++;
      // skip primitive fields (no allocation is needed)
      idx++;
      mutable_f_2()->Resize(sizes[idx++] / sizeof(::int32_t), 0);
      mutable_f_4()->Resize(sizes[idx++] / sizeof(int), 0);
      size_t num_f_9_entries = sizes[idx++];
      for (size_t i = 0; i < num_f_9_entries; ++i) {
        auto* new_msg = add_f_9();
        idx = new_msg->allocate_from_sizes(sizes, idx); 
        //idx = mutable_f_9(i)->allocate_from_sizes(sizes, idx); 
      }
      idx = mutable_f_8()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_10()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_11()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_12()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_13()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_14()->allocate_from_sizes(sizes, idx); 
      idx = mutable_f_16()->allocate_from_sizes(sizes, idx); 
      return idx;
  }

  // accessors -------------------------------------------------------
  enum : int {
    kF2FieldNumber = 3,
    kF4FieldNumber = 6,
    kF9FieldNumber = 10,
    kF8FieldNumber = 9,
    kF10FieldNumber = 11,
    kF11FieldNumber = 12,
    kF12FieldNumber = 13,
    kF13FieldNumber = 14,
    kF14FieldNumber = 16,
    kF16FieldNumber = 17,
    kF0FieldNumber = 1,
    kF1FieldNumber = 2,
    kF3FieldNumber = 5,
    kF5FieldNumber = 8,
  };
  // repeated int32 f_2 = 3 [packed = true];
  int f_2_size() const;
  private:
  int _internal_f_2_size() const;

  public:
  void clear_f_2() ;
  ::int32_t f_2(int index) const;
  void set_f_2(int index, ::int32_t value);
  void add_f_2(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_2() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_2();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_2() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_2();

  public:
  // repeated .fleetbench.proto.Message4.E1 f_4 = 6 [packed = true];
  int f_4_size() const;
  private:
  int _internal_f_4_size() const;

  public:
  void clear_f_4() ;
  public:
  ::fleetbench::proto::Message4_E1 f_4(int index) const;
  void set_f_4(int index, ::fleetbench::proto::Message4_E1 value);
  void add_f_4(::fleetbench::proto::Message4_E1 value);
  const ::google::protobuf::RepeatedField<int>& f_4() const;
  ::google::protobuf::RepeatedField<int>* mutable_f_4();

  private:
  const ::google::protobuf::RepeatedField<int>& _internal_f_4() const;
  ::google::protobuf::RepeatedField<int>* _internal_mutable_f_4();

  public:
  // repeated .fleetbench.proto.Message4.M2 f_9 = 10;
  int f_9_size() const;
  private:
  int _internal_f_9_size() const;

  public:
  void clear_f_9() ;
  ::fleetbench::proto::Message4_M2* mutable_f_9(int index);
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>* mutable_f_9();

  private:
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>& _internal_f_9() const;
  ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>* _internal_mutable_f_9();
  public:
  const ::fleetbench::proto::Message4_M2& f_9(int index) const;
  ::fleetbench::proto::Message4_M2* add_f_9();
  const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>& f_9() const;
  // optional .fleetbench.proto.Message4.M1 f_8 = 9;
  bool has_f_8() const;
  void clear_f_8() ;
  const ::fleetbench::proto::Message4_M1& f_8() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M1* release_f_8();
  ::fleetbench::proto::Message4_M1* mutable_f_8();
  void set_allocated_f_8(::fleetbench::proto::Message4_M1* value);
  void unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message4_M1* value);
  ::fleetbench::proto::Message4_M1* unsafe_arena_release_f_8();

  private:
  const ::fleetbench::proto::Message4_M1& _internal_f_8() const;
  ::fleetbench::proto::Message4_M1* _internal_mutable_f_8();

  public:
  // optional .fleetbench.proto.Message4.M3 f_10 = 11;
  bool has_f_10() const;
  void clear_f_10() ;
  const ::fleetbench::proto::Message4_M3& f_10() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M3* release_f_10();
  ::fleetbench::proto::Message4_M3* mutable_f_10();
  void set_allocated_f_10(::fleetbench::proto::Message4_M3* value);
  void unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message4_M3* value);
  ::fleetbench::proto::Message4_M3* unsafe_arena_release_f_10();

  private:
  const ::fleetbench::proto::Message4_M3& _internal_f_10() const;
  ::fleetbench::proto::Message4_M3* _internal_mutable_f_10();

  public:
  // optional .fleetbench.proto.Message4.M4 f_11 = 12;
  bool has_f_11() const;
  void clear_f_11() ;
  const ::fleetbench::proto::Message4_M4& f_11() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M4* release_f_11();
  ::fleetbench::proto::Message4_M4* mutable_f_11();
  void set_allocated_f_11(::fleetbench::proto::Message4_M4* value);
  void unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message4_M4* value);
  ::fleetbench::proto::Message4_M4* unsafe_arena_release_f_11();

  private:
  const ::fleetbench::proto::Message4_M4& _internal_f_11() const;
  ::fleetbench::proto::Message4_M4* _internal_mutable_f_11();

  public:
  // optional .fleetbench.proto.Message4.M5 f_12 = 13;
  bool has_f_12() const;
  void clear_f_12() ;
  const ::fleetbench::proto::Message4_M5& f_12() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M5* release_f_12();
  ::fleetbench::proto::Message4_M5* mutable_f_12();
  void set_allocated_f_12(::fleetbench::proto::Message4_M5* value);
  void unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message4_M5* value);
  ::fleetbench::proto::Message4_M5* unsafe_arena_release_f_12();

  private:
  const ::fleetbench::proto::Message4_M5& _internal_f_12() const;
  ::fleetbench::proto::Message4_M5* _internal_mutable_f_12();

  public:
  // optional .fleetbench.proto.Message4.M6 f_13 = 14;
  bool has_f_13() const;
  void clear_f_13() ;
  const ::fleetbench::proto::Message4_M6& f_13() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M6* release_f_13();
  ::fleetbench::proto::Message4_M6* mutable_f_13();
  void set_allocated_f_13(::fleetbench::proto::Message4_M6* value);
  void unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message4_M6* value);
  ::fleetbench::proto::Message4_M6* unsafe_arena_release_f_13();

  private:
  const ::fleetbench::proto::Message4_M6& _internal_f_13() const;
  ::fleetbench::proto::Message4_M6* _internal_mutable_f_13();

  public:
  // optional .fleetbench.proto.Message4.M7 f_14 = 16;
  bool has_f_14() const;
  void clear_f_14() ;
  const ::fleetbench::proto::Message4_M7& f_14() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M7* release_f_14();
  ::fleetbench::proto::Message4_M7* mutable_f_14();
  void set_allocated_f_14(::fleetbench::proto::Message4_M7* value);
  void unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message4_M7* value);
  ::fleetbench::proto::Message4_M7* unsafe_arena_release_f_14();

  private:
  const ::fleetbench::proto::Message4_M7& _internal_f_14() const;
  ::fleetbench::proto::Message4_M7* _internal_mutable_f_14();

  public:
  // optional .fleetbench.proto.Message4.M8 f_16 = 17;
  bool has_f_16() const;
  void clear_f_16() ;
  const ::fleetbench::proto::Message4_M8& f_16() const;
  PROTOBUF_NODISCARD ::fleetbench::proto::Message4_M8* release_f_16();
  ::fleetbench::proto::Message4_M8* mutable_f_16();
  void set_allocated_f_16(::fleetbench::proto::Message4_M8* value);
  void unsafe_arena_set_allocated_f_16(::fleetbench::proto::Message4_M8* value);
  ::fleetbench::proto::Message4_M8* unsafe_arena_release_f_16();

  private:
  const ::fleetbench::proto::Message4_M8& _internal_f_16() const;
  ::fleetbench::proto::Message4_M8* _internal_mutable_f_16();

  public:
  // optional int64 f_0 = 1;
  bool has_f_0() const;
  void clear_f_0() ;
  ::int64_t f_0() const;
  void set_f_0(::int64_t value);

  private:
  ::int64_t _internal_f_0() const;
  void _internal_set_f_0(::int64_t value);

  public:
  // optional bool f_1 = 2;
  bool has_f_1() const;
  void clear_f_1() ;
  bool f_1() const;
  void set_f_1(bool value);

  private:
  bool _internal_f_1() const;
  void _internal_set_f_1(bool value);

  public:
  // optional bool f_3 = 5;
  bool has_f_3() const;
  void clear_f_3() ;
  bool f_3() const;
  void set_f_3(bool value);

  private:
  bool _internal_f_3() const;
  void _internal_set_f_3(bool value);

  public:
  // optional int32 f_5 = 8;
  bool has_f_5() const;
  void clear_f_5() ;
  ::int32_t f_5() const;
  void set_f_5(::int32_t value);

  private:
  ::int32_t _internal_f_5() const;
  void _internal_set_f_5(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:fleetbench.proto.Message4)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 9,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_Message4_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_2_;
    mutable ::google::protobuf::internal::CachedSize _f_2_cached_byte_size_;
    ::google::protobuf::RepeatedField<int> f_4_;
    mutable ::google::protobuf::internal::CachedSize _f_4_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::fleetbench::proto::Message4_M2 > f_9_;
    ::fleetbench::proto::Message4_M1* f_8_;
    ::fleetbench::proto::Message4_M3* f_10_;
    ::fleetbench::proto::Message4_M4* f_11_;
    ::fleetbench::proto::Message4_M5* f_12_;
    ::fleetbench::proto::Message4_M6* f_13_;
    ::fleetbench::proto::Message4_M7* f_14_;
    ::fleetbench::proto::Message4_M8* f_16_;
    ::int64_t f_0_;
    bool f_1_;
    bool f_3_;
    ::int32_t f_5_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fMessage4_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Message4_M1_M13

// optional string f_0 = 1;
inline bool Message4_M1_M13::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M1_M13::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M1_M13::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M1.M13.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M1_M13::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M1.M13.f_0)
}
inline std::string* Message4_M1_M13::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M1.M13.f_0)
  return _s;
}
inline const std::string& Message4_M1_M13::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M1_M13::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M1_M13::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M1_M13::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M1.M13.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M1_M13::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M1.M13.f_0)
}

// -------------------------------------------------------------------

// Message4_M1

// optional int64 f_0 = 1;
inline bool Message4_M1::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M1::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M1::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M1.f_0)
  return _internal_f_0();
}
inline void Message4_M1::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M1.f_0)
}
inline ::int64_t Message4_M1::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M1::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M1.M13 f_1 = 2;
inline int Message4_M1::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message4_M1::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message4_M1::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message4_M1_M13* Message4_M1::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M1.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>* Message4_M1::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M1.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message4_M1_M13& Message4_M1::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M1.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message4_M1_M13* Message4_M1::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M1_M13* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M1.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>& Message4_M1::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M1.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>&
Message4_M1::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M1_M13>*
Message4_M1::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message4_M2

// optional int32 f_0 = 2;
inline bool Message4_M2::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M2::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message4_M2::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M2.f_0)
  return _internal_f_0();
}
inline void Message4_M2::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M2.f_0)
}
inline ::int32_t Message4_M2::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M2::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message4_M2::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M2::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M2::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M2.f_1)
  return _internal_f_1();
}
inline void Message4_M2::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M2.f_1)
}
inline ::int64_t Message4_M2::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M2::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M21

// optional int64 f_0 = 1;
inline bool Message4_M3_M9_M21::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M21::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M3_M9_M21::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M21.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M21::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M21.f_0)
}
inline ::int64_t Message4_M3_M9_M21::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M21::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M45

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M45.E18 f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M45::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M45::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 Message4_M3_M9_M25_M38_M45::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M45.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M45::set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M45.f_0)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 Message4_M3_M9_M25_M38_M45::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18>(_impl_.f_0_);
}
inline void Message4_M3_M9_M25_M38_M45::_internal_set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M47_M53_M71_M74

// optional string f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_M74::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71_M74::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25_M38_M47_M53_M71_M74::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_0)
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71_M74::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_0)
  return _s;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71_M74::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_0)
}

// optional uint32 f_1 = 2;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_M74::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message4_M3_M9_M25_M38_M47_M53_M71_M74::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::set_f_1(::uint32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_1)
}
inline ::uint32_t Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_set_f_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.E26 f_2 = 4;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_M74::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 Message4_M3_M9_M25_M38_M47_M53_M71_M74::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_2)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26>(_impl_.f_2_);
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_IsValid(value));
  _impl_.f_2_ = value;
}

// optional int32 f_3 = 5;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_M74::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M53_M71_M74::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_3)
  return _internal_f_3();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::set_f_3(::int32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_3)
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_set_f_3(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int64 f_4 = 7;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71_M74::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M47_M53_M71_M74::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_4)
  return _internal_f_4();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74.f_4)
}
inline ::int64_t Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71_M74::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M47_M53_M71

// optional bytes f_0 = 2;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_0)
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_0)
  return _s;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_0)
}

// optional fixed32 f_1 = 4;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Message4_M3_M9_M25_M38_M47_M53_M71::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_1(::uint32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_1)
}
inline ::uint32_t Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.E24 f_2 = 6;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 Message4_M3_M9_M25_M38_M47_M53_M71::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_2)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24>(_impl_.f_2_);
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24_IsValid(value));
  _impl_.f_2_ = value;
}

// optional string f_3 = 9;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_3)
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_3)
  return _s;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_3)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_3)
}

// optional string f_4 = 11;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_4)
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_4)
  return _s;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_4)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_4)
}

// optional int64 f_5 = 12;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M47_M53_M71::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_5)
  return _internal_f_5();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_5)
}
inline ::int64_t Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.E25 f_6 = 14;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 Message4_M3_M9_M25_M38_M47_M53_M71::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_6)
  return _internal_f_6();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_6(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_6)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25>(_impl_.f_6_);
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_6(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25_IsValid(value));
  _impl_.f_6_ = value;
}

// optional bool f_7 = 16;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_7)
  return _internal_f_7();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_7(bool value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_7)
}
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_7(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional double f_8 = 17;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double Message4_M3_M9_M25_M38_M47_M53_M71::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_8)
  return _internal_f_8();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_8(double value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_8)
}
inline double Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_8(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional bytes f_9 = 20;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_9)
  return _internal_f_9();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_9(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_9_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_9)
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_9)
  return _s;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_.Get();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_9(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_9_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_9_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M53_M71::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_9)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_9_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_9_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_allocated_f_9(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_9_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_9_.IsDefault()) {
          _impl_.f_9_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_9)
}

// optional float f_10 = 21;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float Message4_M3_M9_M25_M38_M47_M53_M71::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_10)
  return _internal_f_10();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_10(float value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_10)
}
inline float Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_10(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = value;
}

// optional int32 f_11 = 23;
inline bool Message4_M3_M9_M25_M38_M47_M53_M71::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M53_M71::f_11() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_11)
  return _internal_f_11();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::set_f_11(::int32_t value) {
  _internal_set_f_11(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_11)
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_11_;
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::_internal_set_f_11(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_11_ = value;
}

// repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.M74 f_23 = 24;
inline int Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_23_size() const {
  return _internal_f_23().size();
}
inline int Message4_M3_M9_M25_M38_M47_M53_M71::f_23_size() const {
  return _internal_f_23_size();
}
inline void Message4_M3_M9_M25_M38_M47_M53_M71::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_23_.Clear();
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74* Message4_M3_M9_M25_M38_M47_M53_M71::mutable_f_23(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_23)
  return _internal_mutable_f_23()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>* Message4_M3_M9_M25_M38_M47_M53_M71::mutable_f_23()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_23)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_23();
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74& Message4_M3_M9_M25_M38_M47_M53_M71::f_23(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_23)
  return _internal_f_23().Get(index);
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74* Message4_M3_M9_M25_M38_M47_M53_M71::add_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74* _add = _internal_mutable_f_23()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_23)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>& Message4_M3_M9_M25_M38_M47_M53_M71::f_23() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71.f_23)
  return _internal_f_23();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>&
Message4_M3_M9_M25_M38_M47_M53_M71::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_23_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74>*
Message4_M3_M9_M25_M38_M47_M53_M71::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_23_;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M47_M53

// optional int32 f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M47_M53::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M53::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M47_M53::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.f_0)
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M53::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M47_M53::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.M71 f_1 = 2;
inline bool Message4_M3_M9_M25_M38_M47_M53::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M53::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71& Message4_M3_M9_M25_M38_M47_M53::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M47_M53_M71_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71& Message4_M3_M9_M25_M38_M47_M53::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M47_M53::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.f_1)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* Message4_M3_M9_M25_M38_M47_M53::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* Message4_M3_M9_M25_M38_M47_M53::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* Message4_M3_M9_M25_M38_M47_M53::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* Message4_M3_M9_M25_M38_M47_M53::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.f_1)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M47_M53::set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53.f_1)
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M47_M60_M67

// optional string f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M47_M60_M67::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M60_M67::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M60_M67::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25_M38_M47_M60_M67::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67.f_0)
}
inline std::string* Message4_M3_M9_M25_M38_M47_M60_M67::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67.f_0)
  return _s;
}
inline const std::string& Message4_M3_M9_M25_M38_M47_M60_M67::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M3_M9_M25_M38_M47_M60_M67::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M60_M67::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M47_M60_M67::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25_M38_M47_M60_M67::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67.f_0)
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M47_M60

// optional int64 f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M47_M60::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M60::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M47_M60::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M47_M60::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_0)
}
inline ::int64_t Message4_M3_M9_M25_M38_M47_M60::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M47_M60::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 3;
inline bool Message4_M3_M9_M25_M38_M47_M60::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M60::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M60::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M47_M60::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_1)
}
inline ::int32_t Message4_M3_M9_M25_M38_M47_M60::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3_M9_M25_M38_M47_M60::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional double f_2 = 4;
inline bool Message4_M3_M9_M25_M38_M47_M60::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M60::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Message4_M3_M9_M25_M38_M47_M60::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9_M25_M38_M47_M60::set_f_2(double value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_2)
}
inline double Message4_M3_M9_M25_M38_M47_M60::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M3_M9_M25_M38_M47_M60::_internal_set_f_2(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional fixed32 f_3 = 5;
inline bool Message4_M3_M9_M25_M38_M47_M60::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M60::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Message4_M3_M9_M25_M38_M47_M60::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_3)
  return _internal_f_3();
}
inline void Message4_M3_M9_M25_M38_M47_M60::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_3)
}
inline ::uint32_t Message4_M3_M9_M25_M38_M47_M60::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M3_M9_M25_M38_M47_M60::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional uint64 f_4 = 9;
inline bool Message4_M3_M9_M25_M38_M47_M60::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M60::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Message4_M3_M9_M25_M38_M47_M60::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_4)
  return _internal_f_4();
}
inline void Message4_M3_M9_M25_M38_M47_M60::set_f_4(::uint64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_4)
}
inline ::uint64_t Message4_M3_M9_M25_M38_M47_M60::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M3_M9_M25_M38_M47_M60::_internal_set_f_4(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.M67 f_9 = 10;
inline bool Message4_M3_M9_M25_M38_M47_M60::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_9_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M47_M60::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ != nullptr) _impl_.f_9_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67& Message4_M3_M9_M25_M38_M47_M60::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* p = _impl_.f_9_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M47_M60_M67_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67& Message4_M3_M9_M25_M38_M47_M60::f_9() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_9)
  return _internal_f_9();
}
inline void Message4_M3_M9_M25_M38_M47_M60::unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_9_);
  }
  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_9)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* Message4_M3_M9_M25_M38_M47_M60::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* released = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* Message4_M3_M9_M25_M38_M47_M60::unsafe_arena_release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_9)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* temp = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* Message4_M3_M9_M25_M38_M47_M60::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67>(GetArena());
    _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67*>(p);
  }
  return _impl_.f_9_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* Message4_M3_M9_M25_M38_M47_M60::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* _msg = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_9)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M47_M60::set_allocated_f_9(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_9_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60_M67*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60.f_9)
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M47

// optional int64 f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M47::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M47::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M47::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M47::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_0)
}
inline ::int64_t Message4_M3_M9_M25_M38_M47::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M47::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M53 f_1 = 4;
inline bool Message4_M3_M9_M25_M38_M47::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M47::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53& Message4_M3_M9_M25_M38_M47::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M47_M53_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53& Message4_M3_M9_M25_M38_M47::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M47::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_1)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* Message4_M3_M9_M25_M38_M47::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* Message4_M3_M9_M25_M38_M47::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* Message4_M3_M9_M25_M38_M47::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* Message4_M3_M9_M25_M38_M47::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_1)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M47::set_allocated_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_1)
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M47.M60 f_4 = 5;
inline bool Message4_M3_M9_M25_M38_M47::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M47::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60& Message4_M3_M9_M25_M38_M47::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M47_M60_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60& Message4_M3_M9_M25_M38_M47::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_4)
  return _internal_f_4();
}
inline void Message4_M3_M9_M25_M38_M47::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_4)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* Message4_M3_M9_M25_M38_M47::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* Message4_M3_M9_M25_M38_M47::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* Message4_M3_M9_M25_M38_M47::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* Message4_M3_M9_M25_M38_M47::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_4)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M47::set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M60*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M47.f_4)
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M48

// optional float f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M48::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M48::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message4_M3_M9_M25_M38_M48::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M48.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M48::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M48.f_0)
}
inline float Message4_M3_M9_M25_M38_M48::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M48::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M49_M59

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59.E20 f_0 = 2;
inline bool Message4_M3_M9_M25_M38_M49_M59::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M59::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 Message4_M3_M9_M25_M38_M49_M59::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M49_M59::set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59.f_0)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 Message4_M3_M9_M25_M38_M49_M59::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20>(_impl_.f_0_);
}
inline void Message4_M3_M9_M25_M38_M49_M59::_internal_set_f_0(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M49_M64

// optional uint64 f_0 = 2;
inline bool Message4_M3_M9_M25_M38_M49_M64::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M64::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message4_M3_M9_M25_M38_M49_M64::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M64.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M49_M64::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M64.f_0)
}
inline ::uint64_t Message4_M3_M9_M25_M38_M49_M64::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M49_M64::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M49_M65_M69_M72

// optional fixed32 f_0 = 3;
inline bool Message4_M3_M9_M25_M38_M49_M65_M69_M72::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M72::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message4_M3_M9_M25_M38_M49_M65_M69_M72::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M72::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72.f_0)
}
inline ::uint32_t Message4_M3_M9_M25_M38_M49_M65_M69_M72::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M72::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 5;
inline bool Message4_M3_M9_M25_M38_M49_M65_M69_M72::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M72::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message4_M3_M9_M25_M38_M49_M65_M69_M72::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M72::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72.f_1)
}
inline float Message4_M3_M9_M25_M38_M49_M65_M69_M72::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M72::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M49_M65_M69_M75

// optional int32 f_0 = 2;
inline bool Message4_M3_M9_M25_M38_M49_M65_M69_M75::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M75::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message4_M3_M9_M25_M38_M49_M65_M69_M75::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M75::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75.f_0)
}
inline ::int32_t Message4_M3_M9_M25_M38_M49_M65_M69_M75::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M75::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message4_M3_M9_M25_M38_M49_M65_M69_M75::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M75::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65_M69_M75::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M75::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75.f_1)
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65_M69_M75::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69_M75::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M49_M65_M69

// optional int64 f_0 = 3;
inline bool Message4_M3_M9_M25_M38_M49_M65_M69::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65_M69::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_0)
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65_M69::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M72 f_3 = 4;
inline bool Message4_M3_M9_M25_M38_M49_M65_M69::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72& Message4_M3_M9_M25_M38_M49_M65_M69::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M49_M65_M69_M72_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72& Message4_M3_M9_M25_M38_M49_M65_M69::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_3)
  return _internal_f_3();
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_3)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* Message4_M3_M9_M25_M38_M49_M65_M69::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* Message4_M3_M9_M25_M38_M49_M65_M69::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* Message4_M3_M9_M25_M38_M49_M65_M69::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* Message4_M3_M9_M25_M38_M49_M65_M69::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_3)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M72*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_3)
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.M75 f_4 = 7;
inline bool Message4_M3_M9_M25_M38_M49_M65_M69::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75& Message4_M3_M9_M25_M38_M49_M65_M69::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M49_M65_M69_M75_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75& Message4_M3_M9_M25_M38_M49_M65_M69::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_4)
  return _internal_f_4();
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_4)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* Message4_M3_M9_M25_M38_M49_M65_M69::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* Message4_M3_M9_M25_M38_M49_M65_M69::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* Message4_M3_M9_M25_M38_M49_M65_M69::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* Message4_M3_M9_M25_M38_M49_M65_M69::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_4)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M49_M65_M69::set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69_M75*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69.f_4)
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M49_M65

// optional fixed64 f_0 = 1;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Message4_M3_M9_M25_M38_M49_M65::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_0)
}
inline ::uint64_t Message4_M3_M9_M25_M38_M49_M65::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.E22 f_1 = 2;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 Message4_M3_M9_M25_M38_M49_M65::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_1)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 Message4_M3_M9_M25_M38_M49_M65::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22>(_impl_.f_1_);
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_1(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 4;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_2)
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional int64 f_3 = 5;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_3)
  return _internal_f_3();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_3)
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional uint64 f_4 = 6;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Message4_M3_M9_M25_M38_M49_M65::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_4)
  return _internal_f_4();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_4(::uint64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_4)
}
inline ::uint64_t Message4_M3_M9_M25_M38_M49_M65::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_4(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional int64 f_5 = 7;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_5)
  return _internal_f_5();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_5(::int64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_5)
}
inline ::int64_t Message4_M3_M9_M25_M38_M49_M65::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_5(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// repeated int32 f_6 = 9 [packed = true];
inline int Message4_M3_M9_M25_M38_M49_M65::_internal_f_6_size() const {
  return _internal_f_6().size();
}
inline int Message4_M3_M9_M25_M38_M49_M65::f_6_size() const {
  return _internal_f_6_size();
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.Clear();
}
inline ::int32_t Message4_M3_M9_M25_M38_M49_M65::f_6(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_6)
  return _internal_f_6().Get(index);
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_6(int index, ::int32_t value) {
  _internal_mutable_f_6()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_6)
}
inline void Message4_M3_M9_M25_M38_M49_M65::add_f_6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_6()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_6)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message4_M3_M9_M25_M38_M49_M65::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_6)
  return _internal_f_6();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message4_M3_M9_M25_M38_M49_M65::mutable_f_6()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_6)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_6();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message4_M3_M9_M25_M38_M49_M65::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message4_M3_M9_M25_M38_M49_M65::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_6_;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.E23 f_7 = 10;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 Message4_M3_M9_M25_M38_M49_M65::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_7)
  return _internal_f_7();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_7(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_7)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 Message4_M3_M9_M25_M38_M49_M65::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23>(_impl_.f_7_);
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_7(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23_IsValid(value));
  _impl_.f_7_ = value;
}

// optional fixed32 f_8 = 12;
inline bool Message4_M3_M9_M25_M38_M49_M65::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Message4_M3_M9_M25_M38_M49_M65::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_8)
  return _internal_f_8();
}
inline void Message4_M3_M9_M25_M38_M49_M65::set_f_8(::uint32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_8)
}
inline ::uint32_t Message4_M3_M9_M25_M38_M49_M65::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message4_M3_M9_M25_M38_M49_M65::_internal_set_f_8(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.M69 f_12 = 13;
inline int Message4_M3_M9_M25_M38_M49_M65::_internal_f_12_size() const {
  return _internal_f_12().size();
}
inline int Message4_M3_M9_M25_M38_M49_M65::f_12_size() const {
  return _internal_f_12_size();
}
inline void Message4_M3_M9_M25_M38_M49_M65::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_12_.Clear();
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69* Message4_M3_M9_M25_M38_M49_M65::mutable_f_12(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_12)
  return _internal_mutable_f_12()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>* Message4_M3_M9_M25_M38_M49_M65::mutable_f_12()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_12)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_12();
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69& Message4_M3_M9_M25_M38_M49_M65::f_12(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_12)
  return _internal_f_12().Get(index);
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69* Message4_M3_M9_M25_M38_M49_M65::add_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69* _add = _internal_mutable_f_12()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_12)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>& Message4_M3_M9_M25_M38_M49_M65::f_12() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65.f_12)
  return _internal_f_12();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>&
Message4_M3_M9_M25_M38_M49_M65::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_12_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_M69>*
Message4_M3_M9_M25_M38_M49_M65::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_12_;
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38_M49

// optional string f_0 = 2;
inline bool Message4_M3_M9_M25_M38_M49::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38_M49::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M3_M9_M25_M38_M49::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25_M38_M49::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_0)
}
inline std::string* Message4_M3_M9_M25_M38_M49::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_0)
  return _s;
}
inline const std::string& Message4_M3_M9_M25_M38_M49::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M3_M9_M25_M38_M49::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M49::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25_M38_M49::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25_M38_M49::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_0)
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M59 f_2 = 4;
inline bool Message4_M3_M9_M25_M38_M49::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M49::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59& Message4_M3_M9_M25_M38_M49::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M49_M59_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59& Message4_M3_M9_M25_M38_M49::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9_M25_M38_M49::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_2)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* Message4_M3_M9_M25_M38_M49::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* Message4_M3_M9_M25_M38_M49::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* Message4_M3_M9_M25_M38_M49::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* Message4_M3_M9_M25_M38_M49::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_2)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M49::set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_2)
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M64 f_4 = 5;
inline bool Message4_M3_M9_M25_M38_M49::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M49::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64& Message4_M3_M9_M25_M38_M49::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M49_M64_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64& Message4_M3_M9_M25_M38_M49::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_4)
  return _internal_f_4();
}
inline void Message4_M3_M9_M25_M38_M49::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_4)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* Message4_M3_M9_M25_M38_M49::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* Message4_M3_M9_M25_M38_M49::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_4)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* Message4_M3_M9_M25_M38_M49::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* Message4_M3_M9_M25_M38_M49::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_4)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M49::set_allocated_f_4(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M64*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_4)
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49.M65 f_5 = 6;
inline bool Message4_M3_M9_M25_M38_M49::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38_M49::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65& Message4_M3_M9_M25_M38_M49::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M49_M65_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65& Message4_M3_M9_M25_M38_M49::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_5)
  return _internal_f_5();
}
inline void Message4_M3_M9_M25_M38_M49::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_5)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* Message4_M3_M9_M25_M38_M49::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* Message4_M3_M9_M25_M38_M49::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_5)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* Message4_M3_M9_M25_M38_M49::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* Message4_M3_M9_M25_M38_M49::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_5)
  return _msg;
}
inline void Message4_M3_M9_M25_M38_M49::set_allocated_f_5(::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.M49.f_5)
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25_M38

// optional double f_0 = 1;
inline bool Message4_M3_M9_M25_M38::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double Message4_M3_M9_M25_M38::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25_M38::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.f_0)
}
inline double Message4_M3_M9_M25_M38::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25_M38::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 2;
inline bool Message4_M3_M9_M25_M38::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M3_M9_M25_M38::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message4_M3_M9_M25_M38::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25_M38::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.M38.f_1)
}
inline ::int32_t Message4_M3_M9_M25_M38::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3_M9_M25_M38::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M45 f_2 = 4;
inline bool Message4_M3_M9_M25_M38::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M45& Message4_M3_M9_M25_M38::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M45&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M45_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M45& Message4_M3_M9_M25_M38::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9_M25_M38::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M45* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M45*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.f_2)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* Message4_M3_M9_M25_M38::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* Message4_M3_M9_M25_M38::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* Message4_M3_M9_M25_M38::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M45>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M45*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* Message4_M3_M9_M25_M38::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M45* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.f_2)
  return _msg;
}
inline void Message4_M3_M9_M25_M38::set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M25_M38_M45* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M45*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.f_2)
}

// repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M47 f_4 = 7;
inline int Message4_M3_M9_M25_M38::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message4_M3_M9_M25_M38::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message4_M3_M9_M25_M38::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47* Message4_M3_M9_M25_M38::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>* Message4_M3_M9_M25_M38::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M3.M9.M25.M38.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M47& Message4_M3_M9_M25_M38::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M47* Message4_M3_M9_M25_M38::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M47* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M3.M9.M25.M38.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>& Message4_M3_M9_M25_M38::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M3.M9.M25.M38.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>&
Message4_M3_M9_M25_M38::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M47>*
Message4_M3_M9_M25_M38::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// repeated .fleetbench.proto.Message4.M3.M9.M25.M38.M48 f_7 = 8;
inline int Message4_M3_M9_M25_M38::_internal_f_7_size() const {
  return _internal_f_7().size();
}
inline int Message4_M3_M9_M25_M38::f_7_size() const {
  return _internal_f_7_size();
}
inline void Message4_M3_M9_M25_M38::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.Clear();
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M48* Message4_M3_M9_M25_M38::mutable_f_7(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.f_7)
  return _internal_mutable_f_7()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>* Message4_M3_M9_M25_M38::mutable_f_7()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M3.M9.M25.M38.f_7)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_7();
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M48& Message4_M3_M9_M25_M38::f_7(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.f_7)
  return _internal_f_7().Get(index);
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M48* Message4_M3_M9_M25_M38::add_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M48* _add = _internal_mutable_f_7()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M3.M9.M25.M38.f_7)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>& Message4_M3_M9_M25_M38::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M3.M9.M25.M38.f_7)
  return _internal_f_7();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>&
Message4_M3_M9_M25_M38::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M3_M9_M25_M38_M48>*
Message4_M3_M9_M25_M38::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_7_;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38.M49 f_8 = 9;
inline bool Message4_M3_M9_M25_M38::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25_M38::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49& Message4_M3_M9_M25_M38::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_M49_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38_M49& Message4_M3_M9_M25_M38::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.M38.f_8)
  return _internal_f_8();
}
inline void Message4_M3_M9_M25_M38::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message4_M3_M9_M25_M38_M49* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.f_8)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* Message4_M3_M9_M25_M38::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* Message4_M3_M9_M25_M38::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.M38.f_8)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* Message4_M3_M9_M25_M38::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38_M49>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* Message4_M3_M9_M25_M38::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38_M49* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.M38.f_8)
  return _msg;
}
inline void Message4_M3_M9_M25_M38::set_allocated_f_8(::fleetbench::proto::Message4_M3_M9_M25_M38_M49* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38_M49*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.M38.f_8)
}

// -------------------------------------------------------------------

// Message4_M3_M9_M25

// optional fixed32 f_0 = 2;
inline bool Message4_M3_M9_M25::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Message4_M3_M9_M25::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_0)
  return _internal_f_0();
}
inline void Message4_M3_M9_M25::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_0)
}
inline ::uint32_t Message4_M3_M9_M25::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3_M9_M25::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 3;
inline bool Message4_M3_M9_M25::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Message4_M3_M9_M25::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_1)
  return _internal_f_1();
}
inline void Message4_M3_M9_M25::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_1)
}
inline float Message4_M3_M9_M25::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3_M9_M25::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int32 f_2 = 4;
inline bool Message4_M3_M9_M25::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message4_M3_M9_M25::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9_M25::set_f_2(::int32_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_2)
}
inline ::int32_t Message4_M3_M9_M25::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M3_M9_M25::_internal_set_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional fixed32 f_3 = 5;
inline bool Message4_M3_M9_M25::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Message4_M3_M9_M25::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_3)
  return _internal_f_3();
}
inline void Message4_M3_M9_M25::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_3)
}
inline ::uint32_t Message4_M3_M9_M25::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M3_M9_M25::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 6;
inline bool Message4_M3_M9_M25::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M3_M9_M25::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_4)
}
inline std::string* Message4_M3_M9_M25::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.f_4)
  return _s;
}
inline const std::string& Message4_M3_M9_M25::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message4_M3_M9_M25::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.f_4)
}

// optional float f_5 = 7;
inline bool Message4_M3_M9_M25::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float Message4_M3_M9_M25::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_5)
  return _internal_f_5();
}
inline void Message4_M3_M9_M25::set_f_5(float value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_5)
}
inline float Message4_M3_M9_M25::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M3_M9_M25::_internal_set_f_5(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 8;
inline bool Message4_M3_M9_M25::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message4_M3_M9_M25::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_6)
  return _internal_f_6();
}
inline void Message4_M3_M9_M25::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_6)
}
inline ::int64_t Message4_M3_M9_M25::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message4_M3_M9_M25::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional bytes f_7 = 10;
inline bool Message4_M3_M9_M25::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M3_M9_M25::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9_M25::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_7)
}
inline std::string* Message4_M3_M9_M25::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.f_7)
  return _s;
}
inline const std::string& Message4_M3_M9_M25::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message4_M3_M9_M25::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9_M25::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9_M25::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.f_7)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9_M25::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.f_7)
}

// optional int32 f_8 = 11;
inline bool Message4_M3_M9_M25::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t Message4_M3_M9_M25::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_8)
  return _internal_f_8();
}
inline void Message4_M3_M9_M25::set_f_8(::int32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_8)
}
inline ::int32_t Message4_M3_M9_M25::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message4_M3_M9_M25::_internal_set_f_8(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional int32 f_9 = 12;
inline bool Message4_M3_M9_M25::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Message4_M3_M9_M25::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_9)
  return _internal_f_9();
}
inline void Message4_M3_M9_M25::set_f_9(::int32_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_9)
}
inline ::int32_t Message4_M3_M9_M25::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message4_M3_M9_M25::_internal_set_f_9(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.E11 f_10 = 13;
inline bool Message4_M3_M9_M25::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message4_M3_M9_M25::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_E11 Message4_M3_M9_M25::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_10)
  return _internal_f_10();
}
inline void Message4_M3_M9_M25::set_f_10(::fleetbench::proto::Message4_M3_M9_M25_E11 value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.M25.f_10)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_E11 Message4_M3_M9_M25::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M3_M9_M25_E11>(_impl_.f_10_);
}
inline void Message4_M3_M9_M25::_internal_set_f_10(::fleetbench::proto::Message4_M3_M9_M25_E11 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M3_M9_M25_E11_IsValid(value));
  _impl_.f_10_ = value;
}

// optional .fleetbench.proto.Message4.M3.M9.M25.M38 f_13 = 17;
inline bool Message4_M3_M9_M25::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_13_ != nullptr);
  return value;
}
inline void Message4_M3_M9_M25::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ != nullptr) _impl_.f_13_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38& Message4_M3_M9_M25::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25_M38* p = _impl_.f_13_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25_M38&>(::fleetbench::proto::_Message4_M3_M9_M25_M38_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25_M38& Message4_M3_M9_M25::f_13() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.M25.f_13)
  return _internal_f_13();
}
inline void Message4_M3_M9_M25::unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message4_M3_M9_M25_M38* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_13_);
  }
  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.M25.f_13)
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38* Message4_M3_M9_M25::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38* released = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38* Message4_M3_M9_M25::unsafe_arena_release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.M25.f_13)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38* temp = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38* Message4_M3_M9_M25::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25_M38>(GetArena());
    _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38*>(p);
  }
  return _impl_.f_13_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25_M38* Message4_M3_M9_M25::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25_M38* _msg = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.M25.f_13)
  return _msg;
}
inline void Message4_M3_M9_M25::set_allocated_f_13(::fleetbench::proto::Message4_M3_M9_M25_M38* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_13_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25_M38*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.M25.f_13)
}

// -------------------------------------------------------------------

// Message4_M3_M9

// optional string f_0 = 2;
inline bool Message4_M3_M9::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3_M9::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M3_M9::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3_M9::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.M9.f_0)
}
inline std::string* Message4_M3_M9::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.f_0)
  return _s;
}
inline const std::string& Message4_M3_M9::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M3_M9::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M3_M9::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M3_M9::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3_M9::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.f_0)
}

// optional .fleetbench.proto.Message4.M3.M9.M21 f_2 = 3;
inline bool Message4_M3_M9::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M3_M9::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M21& Message4_M3_M9::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M21* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M21&>(::fleetbench::proto::_Message4_M3_M9_M21_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M21& Message4_M3_M9::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.f_2)
  return _internal_f_2();
}
inline void Message4_M3_M9::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M21* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M21*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.f_2)
}
inline ::fleetbench::proto::Message4_M3_M9_M21* Message4_M3_M9::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M21* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M21* Message4_M3_M9::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M21* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M21* Message4_M3_M9::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M21>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M21*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M3_M9_M21* Message4_M3_M9::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M3_M9_M21* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.f_2)
  return _msg;
}
inline void Message4_M3_M9::set_allocated_f_2(::fleetbench::proto::Message4_M3_M9_M21* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M21*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.f_2)
}

// optional .fleetbench.proto.Message4.M3.M9.M25 f_3 = 4;
inline bool Message4_M3_M9::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M3_M9::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M3_M9_M25& Message4_M3_M9::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9_M25* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9_M25&>(::fleetbench::proto::_Message4_M3_M9_M25_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9_M25& Message4_M3_M9::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.M9.f_3)
  return _internal_f_3();
}
inline void Message4_M3_M9::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.M9.f_3)
}
inline ::fleetbench::proto::Message4_M3_M9_M25* Message4_M3_M9::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9_M25* Message4_M3_M9::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.M9.f_3)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9_M25* Message4_M3_M9::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9_M25>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M3_M9_M25* Message4_M3_M9::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M3_M9_M25* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.M9.f_3)
  return _msg;
}
inline void Message4_M3_M9::set_allocated_f_3(::fleetbench::proto::Message4_M3_M9_M25* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9_M25*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.M9.f_3)
}

// -------------------------------------------------------------------

// Message4_M3

// optional int64 f_0 = 2;
inline bool Message4_M3::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M3::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message4_M3::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_0)
  return _internal_f_0();
}
inline void Message4_M3::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.f_0)
}
inline ::int64_t Message4_M3::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M3::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional fixed64 f_1 = 3;
inline bool Message4_M3::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M3::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t Message4_M3::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_1)
  return _internal_f_1();
}
inline void Message4_M3::set_f_1(::uint64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.f_1)
}
inline ::uint64_t Message4_M3::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M3::_internal_set_f_1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 4;
inline bool Message4_M3::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M3::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message4_M3::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_2)
  return _internal_f_2();
}
inline void Message4_M3::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.f_2)
}
inline ::int64_t Message4_M3::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M3::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional string f_3 = 5;
inline bool Message4_M3::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M3::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M3::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.f_3)
}
inline std::string* Message4_M3::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.f_3)
  return _s;
}
inline const std::string& Message4_M3::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message4_M3::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message4_M3::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message4_M3::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.f_3)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.f_3)
}

// optional float f_4 = 7;
inline bool Message4_M3::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M3::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float Message4_M3::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_4)
  return _internal_f_4();
}
inline void Message4_M3::set_f_4(float value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.f_4)
}
inline float Message4_M3::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M3::_internal_set_f_4(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional fixed32 f_5 = 9;
inline bool Message4_M3::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message4_M3::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t Message4_M3::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_5)
  return _internal_f_5();
}
inline void Message4_M3::set_f_5(::uint32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.f_5)
}
inline ::uint32_t Message4_M3::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M3::_internal_set_f_5(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional bytes f_6 = 10;
inline bool Message4_M3::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M3::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M3::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_6)
  return _internal_f_6();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M3::set_f_6(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_6_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M3.f_6)
}
inline std::string* Message4_M3::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.f_6)
  return _s;
}
inline const std::string& Message4_M3::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_.Get();
}
inline void Message4_M3::_internal_set_f_6(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_6_.Set(value, GetArena());
}
inline std::string* Message4_M3::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_6_.Mutable( GetArena());
}
inline std::string* Message4_M3::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.f_6)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_6_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_6_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M3::set_allocated_f_6(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_6_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_6_.IsDefault()) {
          _impl_.f_6_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.f_6)
}

// optional .fleetbench.proto.Message4.M3.M9 f_10 = 11;
inline bool Message4_M3::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_10_ != nullptr);
  return value;
}
inline void Message4_M3::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ != nullptr) _impl_.f_10_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M3_M9& Message4_M3::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3_M9* p = _impl_.f_10_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3_M9&>(::fleetbench::proto::_Message4_M3_M9_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3_M9& Message4_M3::f_10() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M3.f_10)
  return _internal_f_10();
}
inline void Message4_M3::unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message4_M3_M9* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_10_);
  }
  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M3.f_10)
}
inline ::fleetbench::proto::Message4_M3_M9* Message4_M3::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9* released = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3_M9* Message4_M3::unsafe_arena_release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M3.f_10)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M3_M9* temp = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3_M9* Message4_M3::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3_M9>(GetArena());
    _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9*>(p);
  }
  return _impl_.f_10_;
}
inline ::fleetbench::proto::Message4_M3_M9* Message4_M3::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M3_M9* _msg = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M3.f_10)
  return _msg;
}
inline void Message4_M3::set_allocated_f_10(::fleetbench::proto::Message4_M3_M9* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_10_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message4_M3_M9*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M3.f_10)
}

// -------------------------------------------------------------------

// Message4_M4_M12_M23_M37

// optional float f_0 = 2;
inline bool Message4_M4_M12_M23_M37::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M4_M12_M23_M37::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message4_M4_M12_M23_M37::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M4.M12.M23.M37.f_0)
  return _internal_f_0();
}
inline void Message4_M4_M12_M23_M37::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M4.M12.M23.M37.f_0)
}
inline float Message4_M4_M12_M23_M37::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M4_M12_M23_M37::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M4_M12_M23

// optional float f_0 = 3;
inline bool Message4_M4_M12_M23::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M4_M12_M23::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message4_M4_M12_M23::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M4.M12.M23.f_0)
  return _internal_f_0();
}
inline void Message4_M4_M12_M23::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M4.M12.M23.f_0)
}
inline float Message4_M4_M12_M23::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M4_M12_M23::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M4.M12.M23.M37 f_3 = 4;
inline bool Message4_M4_M12_M23::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M4_M12_M23::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M4_M12_M23_M37& Message4_M4_M12_M23::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M4_M12_M23_M37* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M4_M12_M23_M37&>(::fleetbench::proto::_Message4_M4_M12_M23_M37_default_instance_);
}
inline const ::fleetbench::proto::Message4_M4_M12_M23_M37& Message4_M4_M12_M23::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M4.M12.M23.f_3)
  return _internal_f_3();
}
inline void Message4_M4_M12_M23::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M4_M12_M23_M37* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M4_M12_M23_M37*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M4.M12.M23.f_3)
}
inline ::fleetbench::proto::Message4_M4_M12_M23_M37* Message4_M4_M12_M23::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M4_M12_M23_M37* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M4_M12_M23_M37* Message4_M4_M12_M23::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M4.M12.M23.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M4_M12_M23_M37* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M4_M12_M23_M37* Message4_M4_M12_M23::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M4_M12_M23_M37>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M4_M12_M23_M37*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M4_M12_M23_M37* Message4_M4_M12_M23::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M4_M12_M23_M37* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M4.M12.M23.f_3)
  return _msg;
}
inline void Message4_M4_M12_M23::set_allocated_f_3(::fleetbench::proto::Message4_M4_M12_M23_M37* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M4_M12_M23_M37*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M4.M12.M23.f_3)
}

// -------------------------------------------------------------------

// Message4_M4_M12

// optional double f_0 = 3;
inline bool Message4_M4_M12::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M4_M12::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Message4_M4_M12::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M4.M12.f_0)
  return _internal_f_0();
}
inline void Message4_M4_M12::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M4.M12.f_0)
}
inline double Message4_M4_M12::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M4_M12::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M4.M12.M23 f_3 = 4;
inline int Message4_M4_M12::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message4_M4_M12::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message4_M4_M12::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message4_M4_M12_M23* Message4_M4_M12::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M4.M12.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>* Message4_M4_M12::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M4.M12.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message4_M4_M12_M23& Message4_M4_M12::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M4.M12.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message4_M4_M12_M23* Message4_M4_M12::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M4_M12_M23* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M4.M12.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>& Message4_M4_M12::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M4.M12.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>&
Message4_M4_M12::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12_M23>*
Message4_M4_M12::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message4_M4

// optional bytes f_0 = 2;
inline bool Message4_M4::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M4::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M4::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M4.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M4::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M4.f_0)
}
inline std::string* Message4_M4::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M4.f_0)
  return _s;
}
inline const std::string& Message4_M4::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M4::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M4::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M4::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M4.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M4::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M4.f_0)
}

// repeated .fleetbench.proto.Message4.M4.M12 f_2 = 4;
inline int Message4_M4::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message4_M4::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message4_M4::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message4_M4_M12* Message4_M4::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M4.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>* Message4_M4::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M4.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message4_M4_M12& Message4_M4::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M4.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message4_M4_M12* Message4_M4::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M4_M12* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M4.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>& Message4_M4::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M4.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>&
Message4_M4::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M4_M12>*
Message4_M4::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message4_M5_M10

// optional int64 f_0 = 1;
inline bool Message4_M5_M10::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M5_M10::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M5_M10::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M10.f_0)
  return _internal_f_0();
}
inline void Message4_M5_M10::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M10.f_0)
}
inline ::int64_t Message4_M5_M10::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M5_M10::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M5_M17

// optional .fleetbench.proto.Message4.M5.M17.E5 f_0 = 2;
inline bool Message4_M5_M17::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M5_M17::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message4_M5_M17_E5 Message4_M5_M17::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M17.f_0)
  return _internal_f_0();
}
inline void Message4_M5_M17::set_f_0(::fleetbench::proto::Message4_M5_M17_E5 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M17.f_0)
}
inline ::fleetbench::proto::Message4_M5_M17_E5 Message4_M5_M17::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M5_M17_E5>(_impl_.f_0_);
}
inline void Message4_M5_M17::_internal_set_f_0(::fleetbench::proto::Message4_M5_M17_E5 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M5_M17_E5_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M5.M17.E6 f_1 = 4;
inline bool Message4_M5_M17::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M5_M17::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message4_M5_M17_E6 Message4_M5_M17::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M17.f_1)
  return _internal_f_1();
}
inline void Message4_M5_M17::set_f_1(::fleetbench::proto::Message4_M5_M17_E6 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M17.f_1)
}
inline ::fleetbench::proto::Message4_M5_M17_E6 Message4_M5_M17::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M5_M17_E6>(_impl_.f_1_);
}
inline void Message4_M5_M17::_internal_set_f_1(::fleetbench::proto::Message4_M5_M17_E6 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M5_M17_E6_IsValid(value));
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 5;
inline bool Message4_M5_M17::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M5_M17::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message4_M5_M17::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M17.f_2)
  return _internal_f_2();
}
inline void Message4_M5_M17::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M17.f_2)
}
inline ::int64_t Message4_M5_M17::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M5_M17::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional float f_3 = 6;
inline bool Message4_M5_M17::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M5_M17::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Message4_M5_M17::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M17.f_3)
  return _internal_f_3();
}
inline void Message4_M5_M17::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M17.f_3)
}
inline float Message4_M5_M17::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M5_M17::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 7;
inline bool Message4_M5_M17::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M5_M17::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M5_M17::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M17.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M5_M17::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M17.f_4)
}
inline std::string* Message4_M5_M17::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M5.M17.f_4)
  return _s;
}
inline const std::string& Message4_M5_M17::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message4_M5_M17::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message4_M5_M17::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message4_M5_M17::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M5.M17.f_4)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M5_M17::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M5.M17.f_4)
}

// optional int32 f_5 = 8;
inline bool Message4_M5_M17::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M5_M17::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message4_M5_M17::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M17.f_5)
  return _internal_f_5();
}
inline void Message4_M5_M17::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M17.f_5)
}
inline ::int32_t Message4_M5_M17::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M5_M17::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message4.M5.M17.E7 f_6 = 9;
inline bool Message4_M5_M17::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M5_M17::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::fleetbench::proto::Message4_M5_M17_E7 Message4_M5_M17::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.M17.f_6)
  return _internal_f_6();
}
inline void Message4_M5_M17::set_f_6(::fleetbench::proto::Message4_M5_M17_E7 value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.M17.f_6)
}
inline ::fleetbench::proto::Message4_M5_M17_E7 Message4_M5_M17::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M5_M17_E7>(_impl_.f_6_);
}
inline void Message4_M5_M17::_internal_set_f_6(::fleetbench::proto::Message4_M5_M17_E7 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M5_M17_E7_IsValid(value));
  _impl_.f_6_ = value;
}

// -------------------------------------------------------------------

// Message4_M5

// optional int32 f_0 = 1;
inline bool Message4_M5::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M5::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message4_M5::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.f_0)
  return _internal_f_0();
}
inline void Message4_M5::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M5.f_0)
}
inline ::int32_t Message4_M5::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M5::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M5.M10 f_1 = 2;
inline int Message4_M5::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message4_M5::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message4_M5::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message4_M5_M10* Message4_M5::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M5.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>* Message4_M5::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M5.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message4_M5_M10& Message4_M5::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message4_M5_M10* Message4_M5::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M5_M10* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M5.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>& Message4_M5::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M5.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>&
Message4_M5::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M5_M10>*
Message4_M5::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message4.M5.M17 f_2 = 3;
inline bool Message4_M5::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M5::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M5_M17& Message4_M5::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M5_M17* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M5_M17&>(::fleetbench::proto::_Message4_M5_M17_default_instance_);
}
inline const ::fleetbench::proto::Message4_M5_M17& Message4_M5::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M5.f_2)
  return _internal_f_2();
}
inline void Message4_M5::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M5_M17* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M5_M17*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M5.f_2)
}
inline ::fleetbench::proto::Message4_M5_M17* Message4_M5::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M5_M17* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M5_M17* Message4_M5::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M5.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M5_M17* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M5_M17* Message4_M5::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M5_M17>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M5_M17*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M5_M17* Message4_M5::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M5_M17* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M5.f_2)
  return _msg;
}
inline void Message4_M5::set_allocated_f_2(::fleetbench::proto::Message4_M5_M17* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M5_M17*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M5.f_2)
}

// -------------------------------------------------------------------

// Message4_M6_M11

// optional fixed32 f_0 = 1;
inline bool Message4_M6_M11::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M11::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message4_M6_M11::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M11.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M11::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M11.f_0)
}
inline ::uint32_t Message4_M6_M11::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M11::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M20

// optional double f_0 = 1;
inline bool Message4_M6_M19_M20::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M20::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Message4_M6_M19_M20::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M20.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M20::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M20.f_0)
}
inline double Message4_M6_M19_M20::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M20::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 3;
inline bool Message4_M6_M19_M20::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M6_M19_M20::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message4_M6_M19_M20::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M20.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M20::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M20.f_1)
}
inline ::int64_t Message4_M6_M19_M20::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M6_M19_M20::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 4;
inline bool Message4_M6_M19_M20::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M20::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M6_M19_M20::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M20.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M6_M19_M20::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M20.f_2)
}
inline std::string* Message4_M6_M19_M20::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M20.f_2)
  return _s;
}
inline const std::string& Message4_M6_M19_M20::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M6_M19_M20::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M6_M19_M20::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M6_M19_M20::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M20.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M6_M19_M20::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M20.f_2)
}

// optional .fleetbench.proto.Message4.M6.M19.M20.E9 f_3 = 5;
inline bool Message4_M6_M19_M20::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M6_M19_M20::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message4_M6_M19_M20_E9 Message4_M6_M19_M20::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M20.f_3)
  return _internal_f_3();
}
inline void Message4_M6_M19_M20::set_f_3(::fleetbench::proto::Message4_M6_M19_M20_E9 value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M20.f_3)
}
inline ::fleetbench::proto::Message4_M6_M19_M20_E9 Message4_M6_M19_M20::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M6_M19_M20_E9>(_impl_.f_3_);
}
inline void Message4_M6_M19_M20::_internal_set_f_3(::fleetbench::proto::Message4_M6_M19_M20_E9 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M6_M19_M20_E9_IsValid(value));
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M20.E10 f_4 = 6;
inline bool Message4_M6_M19_M20::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M6_M19_M20::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message4_M6_M19_M20_E10 Message4_M6_M19_M20::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M20.f_4)
  return _internal_f_4();
}
inline void Message4_M6_M19_M20::set_f_4(::fleetbench::proto::Message4_M6_M19_M20_E10 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M20.f_4)
}
inline ::fleetbench::proto::Message4_M6_M19_M20_E10 Message4_M6_M19_M20::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M6_M19_M20_E10>(_impl_.f_4_);
}
inline void Message4_M6_M19_M20::_internal_set_f_4(::fleetbench::proto::Message4_M6_M19_M20_E10 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M6_M19_M20_E10_IsValid(value));
  _impl_.f_4_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M24_M33_M44_M55

// optional double f_0 = 1;
inline bool Message4_M6_M19_M24_M33_M44_M55::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M24_M33_M44_M55::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double Message4_M6_M19_M24_M33_M44_M55::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M55.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M24_M33_M44_M55::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M55.f_0)
}
inline double Message4_M6_M19_M24_M33_M44_M55::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M24_M33_M44_M55::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M24_M33_M44_M56

// optional uint32 f_0 = 1;
inline bool Message4_M6_M19_M24_M33_M44_M56::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M24_M33_M44_M56::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t Message4_M6_M19_M24_M33_M44_M56::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M56.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M24_M33_M44_M56::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M24.M33.M44.M56.f_0)
}
inline ::uint32_t Message4_M6_M19_M24_M33_M44_M56::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M24_M33_M44_M56::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M24_M33_M44

// optional string f_0 = 1;
inline bool Message4_M6_M19_M24_M33_M44::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M24_M33_M44::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M6_M19_M24_M33_M44::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M6_M19_M24_M33_M44::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_0)
}
inline std::string* Message4_M6_M19_M24_M33_M44::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_0)
  return _s;
}
inline const std::string& Message4_M6_M19_M24_M33_M44::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M6_M19_M24_M33_M44::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M6_M19_M24_M33_M44::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M6_M19_M24_M33_M44::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M6_M19_M24_M33_M44::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_0)
}

// repeated .fleetbench.proto.Message4.M6.M19.M24.M33.M44.M55 f_1 = 4;
inline int Message4_M6_M19_M24_M33_M44::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message4_M6_M19_M24_M33_M44::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message4_M6_M19_M24_M33_M44::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55* Message4_M6_M19_M24_M33_M44::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>* Message4_M6_M19_M24_M33_M44::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55& Message4_M6_M19_M24_M33_M44::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55* Message4_M6_M19_M24_M33_M44::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>& Message4_M6_M19_M24_M33_M44::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>&
Message4_M6_M19_M24_M33_M44::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M55>*
Message4_M6_M19_M24_M33_M44::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional .fleetbench.proto.Message4.M6.M19.M24.M33.M44.M56 f_4 = 10;
inline bool Message4_M6_M19_M24_M33_M44::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M24_M33_M44::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56& Message4_M6_M19_M24_M33_M44::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56&>(::fleetbench::proto::_Message4_M6_M19_M24_M33_M44_M56_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56& Message4_M6_M19_M24_M33_M44::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_4)
  return _internal_f_4();
}
inline void Message4_M6_M19_M24_M33_M44::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_4)
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* Message4_M6_M19_M24_M33_M44::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* Message4_M6_M19_M24_M33_M44::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* Message4_M6_M19_M24_M33_M44::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* Message4_M6_M19_M24_M33_M44::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_4)
  return _msg;
}
inline void Message4_M6_M19_M24_M33_M44::set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M44_M56*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.M44.f_4)
}

// -------------------------------------------------------------------

// Message4_M6_M19_M24_M33_M50_M63

// optional .fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63.E21 f_0 = 1;
inline bool Message4_M6_M19_M24_M33_M50_M63::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M24_M33_M50_M63::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 Message4_M6_M19_M24_M33_M50_M63::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M24_M33_M50_M63::set_f_0(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63.f_0)
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 Message4_M6_M19_M24_M33_M50_M63::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21>(_impl_.f_0_);
}
inline void Message4_M6_M19_M24_M33_M50_M63::_internal_set_f_0(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M24_M33_M50

// optional int64 f_0 = 1;
inline bool Message4_M6_M19_M24_M33_M50::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M24_M33_M50::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message4_M6_M19_M24_M33_M50::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M50.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M24_M33_M50::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M24.M33.M50.f_0)
}
inline ::int64_t Message4_M6_M19_M24_M33_M50::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M24_M33_M50::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M24.M33.M50.M63 f_1 = 3;
inline bool Message4_M6_M19_M24_M33_M50::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M24_M33_M50::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63& Message4_M6_M19_M24_M33_M50::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63&>(::fleetbench::proto::_Message4_M6_M19_M24_M33_M50_M63_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63& Message4_M6_M19_M24_M33_M50::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.M50.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M24_M33_M50::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.M50.f_1)
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* Message4_M6_M19_M24_M33_M50::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* Message4_M6_M19_M24_M33_M50::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M24.M33.M50.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* Message4_M6_M19_M24_M33_M50::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* Message4_M6_M19_M24_M33_M50::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M24.M33.M50.f_1)
  return _msg;
}
inline void Message4_M6_M19_M24_M33_M50::set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.M50.f_1)
}

// -------------------------------------------------------------------

// Message4_M6_M19_M24_M33

// optional int32 f_0 = 2;
inline bool Message4_M6_M19_M24_M33::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M6_M19_M24_M33::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message4_M6_M19_M24_M33::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M24_M33::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M24.M33.f_0)
}
inline ::int32_t Message4_M6_M19_M24_M33::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M24_M33::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M24.M33.M44 f_2 = 3;
inline bool Message4_M6_M19_M24_M33::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M24_M33::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44& Message4_M6_M19_M24_M33::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44&>(::fleetbench::proto::_Message4_M6_M19_M24_M33_M44_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M44& Message4_M6_M19_M24_M33::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.f_2)
  return _internal_f_2();
}
inline void Message4_M6_M19_M24_M33::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M6_M19_M24_M33_M44* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M44*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.f_2)
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* Message4_M6_M19_M24_M33::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* Message4_M6_M19_M24_M33::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M24.M33.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* Message4_M6_M19_M24_M33::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M24_M33_M44>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M44*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* Message4_M6_M19_M24_M33::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M44* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M24.M33.f_2)
  return _msg;
}
inline void Message4_M6_M19_M24_M33::set_allocated_f_2(::fleetbench::proto::Message4_M6_M19_M24_M33_M44* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M44*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.f_2)
}

// optional .fleetbench.proto.Message4.M6.M19.M24.M33.M50 f_3 = 4;
inline bool Message4_M6_M19_M24_M33::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M24_M33::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50& Message4_M6_M19_M24_M33::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50&>(::fleetbench::proto::_Message4_M6_M19_M24_M33_M50_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33_M50& Message4_M6_M19_M24_M33::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.M33.f_3)
  return _internal_f_3();
}
inline void Message4_M6_M19_M24_M33::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M24_M33_M50* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M50*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.f_3)
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* Message4_M6_M19_M24_M33::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* Message4_M6_M19_M24_M33::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M24.M33.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* Message4_M6_M19_M24_M33::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M24_M33_M50>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M50*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* Message4_M6_M19_M24_M33::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33_M50* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M24.M33.f_3)
  return _msg;
}
inline void Message4_M6_M19_M24_M33::set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M24_M33_M50* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33_M50*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M24.M33.f_3)
}

// -------------------------------------------------------------------

// Message4_M6_M19_M24

// optional fixed32 f_0 = 1;
inline bool Message4_M6_M19_M24::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M24::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message4_M6_M19_M24::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M24::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M24.f_0)
}
inline ::uint32_t Message4_M6_M19_M24::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M24::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M24.M33 f_1 = 2;
inline bool Message4_M6_M19_M24::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M24::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33& Message4_M6_M19_M24::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M24_M33* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M24_M33&>(::fleetbench::proto::_Message4_M6_M19_M24_M33_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M24_M33& Message4_M6_M19_M24::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M24.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M24::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M24.f_1)
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33* Message4_M6_M19_M24::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33* Message4_M6_M19_M24::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M24.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33* Message4_M6_M19_M24::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M24_M33>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M6_M19_M24_M33* Message4_M6_M19_M24::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M24_M33* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M24.f_1)
  return _msg;
}
inline void Message4_M6_M19_M24::set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M24_M33* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M24_M33*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M24.f_1)
}

// -------------------------------------------------------------------

// Message4_M6_M19_M26

// optional int32 f_0 = 2;
inline bool Message4_M6_M19_M26::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M26::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message4_M6_M19_M26::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M26.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M26::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M26.f_0)
}
inline ::int32_t Message4_M6_M19_M26::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M26::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M27_M31_M42_M54

// optional .fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54.E19 f_0 = 1;
inline bool Message4_M6_M19_M27_M31_M42_M54::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M27_M31_M42_M54::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 Message4_M6_M19_M27_M31_M42_M54::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M27_M31_M42_M54::set_f_0(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54.f_0)
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 Message4_M6_M19_M27_M31_M42_M54::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19>(_impl_.f_0_);
}
inline void Message4_M6_M19_M27_M31_M42_M54::_internal_set_f_0(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M27_M31_M42

// optional float f_0 = 1;
inline bool Message4_M6_M19_M27_M31_M42::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M27_M31_M42::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message4_M6_M19_M27_M31_M42::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.M31.M42.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M27_M31_M42::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M27.M31.M42.f_0)
}
inline float Message4_M6_M19_M27_M31_M42::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M27_M31_M42::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M27.M31.M42.M54 f_1 = 2;
inline bool Message4_M6_M19_M27_M31_M42::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M27_M31_M42::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54& Message4_M6_M19_M27_M31_M42::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54&>(::fleetbench::proto::_Message4_M6_M19_M27_M31_M42_M54_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54& Message4_M6_M19_M27_M31_M42::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.M31.M42.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M27_M31_M42::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M27.M31.M42.f_1)
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* Message4_M6_M19_M27_M31_M42::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* Message4_M6_M19_M27_M31_M42::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M27.M31.M42.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* Message4_M6_M19_M27_M31_M42::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* Message4_M6_M19_M27_M31_M42::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M27.M31.M42.f_1)
  return _msg;
}
inline void Message4_M6_M19_M27_M31_M42::set_allocated_f_1(::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M27.M31.M42.f_1)
}

// -------------------------------------------------------------------

// Message4_M6_M19_M27_M31

// optional int32 f_0 = 4;
inline bool Message4_M6_M19_M27_M31::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M27_M31::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message4_M6_M19_M27_M31::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.M31.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M27_M31::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M27.M31.f_0)
}
inline ::int32_t Message4_M6_M19_M27_M31::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M27_M31::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M27.M31.M42 f_4 = 6;
inline bool Message4_M6_M19_M27_M31::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M27_M31::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42& Message4_M6_M19_M27_M31::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42&>(::fleetbench::proto::_Message4_M6_M19_M27_M31_M42_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M27_M31_M42& Message4_M6_M19_M27_M31::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.M31.f_4)
  return _internal_f_4();
}
inline void Message4_M6_M19_M27_M31::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M27_M31_M42* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31_M42*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M27.M31.f_4)
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* Message4_M6_M19_M27_M31::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* Message4_M6_M19_M27_M31::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M27.M31.f_4)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* Message4_M6_M19_M27_M31::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M27_M31_M42>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31_M42*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* Message4_M6_M19_M27_M31::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31_M42* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M27.M31.f_4)
  return _msg;
}
inline void Message4_M6_M19_M27_M31::set_allocated_f_4(::fleetbench::proto::Message4_M6_M19_M27_M31_M42* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31_M42*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M27.M31.f_4)
}

// -------------------------------------------------------------------

// Message4_M6_M19_M27

// repeated float f_0 = 1 [packed = true];
inline int Message4_M6_M19_M27::_internal_f_0_size() const {
  return _internal_f_0().size();
}
inline int Message4_M6_M19_M27::f_0_size() const {
  return _internal_f_0_size();
}
inline void Message4_M6_M19_M27::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.Clear();
}
inline float Message4_M6_M19_M27::f_0(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.f_0)
  return _internal_f_0().Get(index);
}
inline void Message4_M6_M19_M27::set_f_0(int index, float value) {
  _internal_mutable_f_0()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M27.f_0)
}
inline void Message4_M6_M19_M27::add_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_0()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M6.M19.M27.f_0)
}
inline const ::google::protobuf::RepeatedField<float>& Message4_M6_M19_M27::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M6.M19.M27.f_0)
  return _internal_f_0();
}
inline ::google::protobuf::RepeatedField<float>* Message4_M6_M19_M27::mutable_f_0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M6.M19.M27.f_0)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_0();
}
inline const ::google::protobuf::RepeatedField<float>&
Message4_M6_M19_M27::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline ::google::protobuf::RepeatedField<float>* Message4_M6_M19_M27::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_0_;
}

// optional float f_1 = 2;
inline bool Message4_M6_M19_M27::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M27::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message4_M6_M19_M27::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M27::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M27.f_1)
}
inline float Message4_M6_M19_M27::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M6_M19_M27::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M27.E12 f_2 = 3;
inline bool Message4_M6_M19_M27::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M6_M19_M27::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_E12 Message4_M6_M19_M27::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.f_2)
  return _internal_f_2();
}
inline void Message4_M6_M19_M27::set_f_2(::fleetbench::proto::Message4_M6_M19_M27_E12 value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M27.f_2)
}
inline ::fleetbench::proto::Message4_M6_M19_M27_E12 Message4_M6_M19_M27::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M6_M19_M27_E12>(_impl_.f_2_);
}
inline void Message4_M6_M19_M27::_internal_set_f_2(::fleetbench::proto::Message4_M6_M19_M27_E12 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M6_M19_M27_E12_IsValid(value));
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M27.M31 f_3 = 5;
inline bool Message4_M6_M19_M27::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M27::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M27_M31& Message4_M6_M19_M27::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M27_M31* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M27_M31&>(::fleetbench::proto::_Message4_M6_M19_M27_M31_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M27_M31& Message4_M6_M19_M27::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M27.f_3)
  return _internal_f_3();
}
inline void Message4_M6_M19_M27::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M27_M31* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M27.f_3)
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31* Message4_M6_M19_M27::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31* Message4_M6_M19_M27::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M27.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31* Message4_M6_M19_M27::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M27_M31>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M6_M19_M27_M31* Message4_M6_M19_M27::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M6_M19_M27_M31* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M27.f_3)
  return _msg;
}
inline void Message4_M6_M19_M27::set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M27_M31* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M27_M31*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M27.f_3)
}

// -------------------------------------------------------------------

// Message4_M6_M19_M30_M32

// optional string f_0 = 3;
inline bool Message4_M6_M19_M30_M32::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M32::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M6_M19_M30_M32::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M32.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M6_M19_M30_M32::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M32.f_0)
}
inline std::string* Message4_M6_M19_M30_M32::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M30.M32.f_0)
  return _s;
}
inline const std::string& Message4_M6_M19_M30_M32::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M6_M19_M30_M32::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M6_M19_M30_M32::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M6_M19_M30_M32::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M30.M32.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M6_M19_M30_M32::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M30.M32.f_0)
}

// optional int32 f_1 = 4;
inline bool Message4_M6_M19_M30_M32::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M32::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message4_M6_M19_M30_M32::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M32.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M30_M32::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M32.f_1)
}
inline ::int32_t Message4_M6_M19_M30_M32::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M6_M19_M30_M32::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 5;
inline bool Message4_M6_M19_M30_M32::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M32::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M6_M19_M30_M32::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M32.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M6_M19_M30_M32::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M32.f_2)
}
inline std::string* Message4_M6_M19_M30_M32::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M30.M32.f_2)
  return _s;
}
inline const std::string& Message4_M6_M19_M30_M32::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M6_M19_M30_M32::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M6_M19_M30_M32::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M6_M19_M30_M32::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M30.M32.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M6_M19_M30_M32::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M30.M32.f_2)
}

// optional bool f_3 = 7;
inline bool Message4_M6_M19_M30_M32::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M32::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message4_M6_M19_M30_M32::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M32.f_3)
  return _internal_f_3();
}
inline void Message4_M6_M19_M30_M32::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M32.f_3)
}
inline bool Message4_M6_M19_M30_M32::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M6_M19_M30_M32::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M30.M32.E14 f_4 = 9;
inline bool Message4_M6_M19_M30_M32::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M32::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M32_E14 Message4_M6_M19_M30_M32::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M32.f_4)
  return _internal_f_4();
}
inline void Message4_M6_M19_M30_M32::set_f_4(::fleetbench::proto::Message4_M6_M19_M30_M32_E14 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M32.f_4)
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M32_E14 Message4_M6_M19_M30_M32::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M6_M19_M30_M32_E14>(_impl_.f_4_);
}
inline void Message4_M6_M19_M30_M32::_internal_set_f_4(::fleetbench::proto::Message4_M6_M19_M30_M32_E14 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M6_M19_M30_M32_E14_IsValid(value));
  _impl_.f_4_ = value;
}

// optional int32 f_5 = 11;
inline bool Message4_M6_M19_M30_M32::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M32::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message4_M6_M19_M30_M32::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M32.f_5)
  return _internal_f_5();
}
inline void Message4_M6_M19_M30_M32::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M32.f_5)
}
inline ::int32_t Message4_M6_M19_M30_M32::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M6_M19_M30_M32::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int64 f_6 = 13;
inline bool Message4_M6_M19_M30_M32::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M32::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t Message4_M6_M19_M30_M32::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M32.f_6)
  return _internal_f_6();
}
inline void Message4_M6_M19_M30_M32::set_f_6(::int64_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M32.f_6)
}
inline ::int64_t Message4_M6_M19_M30_M32::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message4_M6_M19_M30_M32::_internal_set_f_6(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M30_M39

// optional bool f_0 = 1;
inline bool Message4_M6_M19_M30_M39::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M39::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message4_M6_M19_M30_M39::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M39.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M30_M39::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M39.f_0)
}
inline bool Message4_M6_M19_M30_M39::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6_M19_M30_M39::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional fixed64 f_1 = 3;
inline bool Message4_M6_M19_M30_M39::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M39::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message4_M6_M19_M30_M39::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M39.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M30_M39::set_f_1(::uint64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M39.f_1)
}
inline ::uint64_t Message4_M6_M19_M30_M39::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M6_M19_M30_M39::_internal_set_f_1(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional bool f_2 = 5;
inline bool Message4_M6_M19_M30_M39::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M39::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool Message4_M6_M19_M30_M39::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M39.f_2)
  return _internal_f_2();
}
inline void Message4_M6_M19_M30_M39::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M39.f_2)
}
inline bool Message4_M6_M19_M30_M39::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M6_M19_M30_M39::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional string f_3 = 6;
inline bool Message4_M6_M19_M30_M39::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M39::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M6_M19_M30_M39::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M39.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M6_M19_M30_M39::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M39.f_3)
}
inline std::string* Message4_M6_M19_M30_M39::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M30.M39.f_3)
  return _s;
}
inline const std::string& Message4_M6_M19_M30_M39::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message4_M6_M19_M30_M39::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message4_M6_M19_M30_M39::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message4_M6_M19_M30_M39::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M30.M39.f_3)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M6_M19_M30_M39::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M30.M39.f_3)
}

// optional bool f_4 = 7;
inline bool Message4_M6_M19_M30_M39::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M6_M19_M30_M39::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Message4_M6_M19_M30_M39::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.M39.f_4)
  return _internal_f_4();
}
inline void Message4_M6_M19_M30_M39::set_f_4(bool value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.M39.f_4)
}
inline bool Message4_M6_M19_M30_M39::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M6_M19_M30_M39::_internal_set_f_4(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// -------------------------------------------------------------------

// Message4_M6_M19_M30

// optional .fleetbench.proto.Message4.M6.M19.M30.E13 f_0 = 1;
inline bool Message4_M6_M19_M30::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M6_M19_M30::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message4_M6_M19_M30_E13 Message4_M6_M19_M30::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_0)
  return _internal_f_0();
}
inline void Message4_M6_M19_M30::set_f_0(::fleetbench::proto::Message4_M6_M19_M30_E13 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.f_0)
}
inline ::fleetbench::proto::Message4_M6_M19_M30_E13 Message4_M6_M19_M30::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M6_M19_M30_E13>(_impl_.f_0_);
}
inline void Message4_M6_M19_M30::_internal_set_f_0(::fleetbench::proto::Message4_M6_M19_M30_E13 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M6_M19_M30_E13_IsValid(value));
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 2;
inline bool Message4_M6_M19_M30::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M6_M19_M30::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message4_M6_M19_M30::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19_M30::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.f_1)
}
inline ::int64_t Message4_M6_M19_M30::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M6_M19_M30::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional bool f_2 = 4;
inline bool Message4_M6_M19_M30::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M6_M19_M30::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool Message4_M6_M19_M30::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_2)
  return _internal_f_2();
}
inline void Message4_M6_M19_M30::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.f_2)
}
inline bool Message4_M6_M19_M30::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M6_M19_M30::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional string f_3 = 6;
inline bool Message4_M6_M19_M30::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19_M30::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M6_M19_M30::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_3)
  return _internal_f_3();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M6_M19_M30::set_f_3(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.f_3)
}
inline std::string* Message4_M6_M19_M30::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M30.f_3)
  return _s;
}
inline const std::string& Message4_M6_M19_M30::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_.Get();
}
inline void Message4_M6_M19_M30::_internal_set_f_3(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_3_.Set(value, GetArena());
}
inline std::string* Message4_M6_M19_M30::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_3_.Mutable( GetArena());
}
inline std::string* Message4_M6_M19_M30::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M30.f_3)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_3_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_3_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M6_M19_M30::set_allocated_f_3(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_3_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_3_.IsDefault()) {
          _impl_.f_3_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M30.f_3)
}

// optional int64 f_4 = 8;
inline bool Message4_M6_M19_M30::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M6_M19_M30::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t Message4_M6_M19_M30::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_4)
  return _internal_f_4();
}
inline void Message4_M6_M19_M30::set_f_4(::int64_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.f_4)
}
inline ::int64_t Message4_M6_M19_M30::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M6_M19_M30::_internal_set_f_4(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional uint64 f_5 = 9;
inline bool Message4_M6_M19_M30::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M6_M19_M30::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint64_t Message4_M6_M19_M30::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_5)
  return _internal_f_5();
}
inline void Message4_M6_M19_M30::set_f_5(::uint64_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.M30.f_5)
}
inline ::uint64_t Message4_M6_M19_M30::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M6_M19_M30::_internal_set_f_5(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M30.M32 f_9 = 10;
inline bool Message4_M6_M19_M30::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_9_ != nullptr);
  return value;
}
inline void Message4_M6_M19_M30::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ != nullptr) _impl_.f_9_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M30_M32& Message4_M6_M19_M30::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M30_M32* p = _impl_.f_9_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M30_M32&>(::fleetbench::proto::_Message4_M6_M19_M30_M32_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M30_M32& Message4_M6_M19_M30::f_9() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_9)
  return _internal_f_9();
}
inline void Message4_M6_M19_M30::unsafe_arena_set_allocated_f_9(::fleetbench::proto::Message4_M6_M19_M30_M32* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_9_);
  }
  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M30_M32*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.M30.f_9)
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M32* Message4_M6_M19_M30::release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M30_M32* released = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M32* Message4_M6_M19_M30::unsafe_arena_release_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.M30.f_9)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M30_M32* temp = _impl_.f_9_;
  _impl_.f_9_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M32* Message4_M6_M19_M30::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_9_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M30_M32>(GetArena());
    _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M30_M32*>(p);
  }
  return _impl_.f_9_;
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M32* Message4_M6_M19_M30::mutable_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M30_M32* _msg = _internal_mutable_f_9();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M30.f_9)
  return _msg;
}
inline void Message4_M6_M19_M30::set_allocated_f_9(::fleetbench::proto::Message4_M6_M19_M30_M32* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_9_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_9_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M30_M32*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.M30.f_9)
}

// repeated .fleetbench.proto.Message4.M6.M19.M30.M39 f_10 = 11;
inline int Message4_M6_M19_M30::_internal_f_10_size() const {
  return _internal_f_10().size();
}
inline int Message4_M6_M19_M30::f_10_size() const {
  return _internal_f_10_size();
}
inline void Message4_M6_M19_M30::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_.Clear();
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M39* Message4_M6_M19_M30::mutable_f_10(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.M30.f_10)
  return _internal_mutable_f_10()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>* Message4_M6_M19_M30::mutable_f_10()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M6.M19.M30.f_10)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_10();
}
inline const ::fleetbench::proto::Message4_M6_M19_M30_M39& Message4_M6_M19_M30::f_10(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.M30.f_10)
  return _internal_f_10().Get(index);
}
inline ::fleetbench::proto::Message4_M6_M19_M30_M39* Message4_M6_M19_M30::add_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M6_M19_M30_M39* _add = _internal_mutable_f_10()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M6.M19.M30.f_10)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>& Message4_M6_M19_M30::f_10() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M6.M19.M30.f_10)
  return _internal_f_10();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>&
Message4_M6_M19_M30::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_10_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M30_M39>*
Message4_M6_M19_M30::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_10_;
}

// -------------------------------------------------------------------

// Message4_M6_M19

// optional bytes f_0 = 1;
inline bool Message4_M6_M19::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M6_M19::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M6_M19::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M6_M19::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.f_0)
}
inline std::string* Message4_M6_M19::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.f_0)
  return _s;
}
inline const std::string& Message4_M6_M19::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M6_M19::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M6_M19::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M6_M19::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M6_M19::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.f_0)
}

// optional int32 f_1 = 2;
inline bool Message4_M6_M19::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M6_M19::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t Message4_M6_M19::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_1)
  return _internal_f_1();
}
inline void Message4_M6_M19::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.f_1)
}
inline ::int32_t Message4_M6_M19::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M6_M19::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 3;
inline bool Message4_M6_M19::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M6_M19::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t Message4_M6_M19::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_2)
  return _internal_f_2();
}
inline void Message4_M6_M19::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.M19.f_2)
}
inline ::int64_t Message4_M6_M19::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M6_M19::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional .fleetbench.proto.Message4.M6.M19.M20 f_3 = 4;
inline bool Message4_M6_M19::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M6_M19::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M20& Message4_M6_M19::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M20* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M20&>(::fleetbench::proto::_Message4_M6_M19_M20_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M20& Message4_M6_M19::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_3)
  return _internal_f_3();
}
inline void Message4_M6_M19::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M20* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M20*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.f_3)
}
inline ::fleetbench::proto::Message4_M6_M19_M20* Message4_M6_M19::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M20* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M20* Message4_M6_M19::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.f_3)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M20* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M20* Message4_M6_M19::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M20>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M20*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M6_M19_M20* Message4_M6_M19::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M6_M19_M20* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.f_3)
  return _msg;
}
inline void Message4_M6_M19::set_allocated_f_3(::fleetbench::proto::Message4_M6_M19_M20* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M20*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.f_3)
}

// repeated .fleetbench.proto.Message4.M6.M19.M24 f_4 = 5;
inline int Message4_M6_M19::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message4_M6_M19::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message4_M6_M19::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message4_M6_M19_M24* Message4_M6_M19::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>* Message4_M6_M19::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M6.M19.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message4_M6_M19_M24& Message4_M6_M19::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message4_M6_M19_M24* Message4_M6_M19::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M6_M19_M24* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M6.M19.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>& Message4_M6_M19::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M6.M19.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>&
Message4_M6_M19::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M24>*
Message4_M6_M19::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional .fleetbench.proto.Message4.M6.M19.M26 f_5 = 6;
inline bool Message4_M6_M19::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_5_ != nullptr);
  return value;
}
inline void Message4_M6_M19::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ != nullptr) _impl_.f_5_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M26& Message4_M6_M19::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M26* p = _impl_.f_5_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M26&>(::fleetbench::proto::_Message4_M6_M19_M26_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M26& Message4_M6_M19::f_5() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_5)
  return _internal_f_5();
}
inline void Message4_M6_M19::unsafe_arena_set_allocated_f_5(::fleetbench::proto::Message4_M6_M19_M26* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_5_);
  }
  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M26*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.f_5)
}
inline ::fleetbench::proto::Message4_M6_M19_M26* Message4_M6_M19::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M6_M19_M26* released = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M26* Message4_M6_M19::unsafe_arena_release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.f_5)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M6_M19_M26* temp = _impl_.f_5_;
  _impl_.f_5_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M26* Message4_M6_M19::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_5_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M26>(GetArena());
    _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M26*>(p);
  }
  return _impl_.f_5_;
}
inline ::fleetbench::proto::Message4_M6_M19_M26* Message4_M6_M19::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M6_M19_M26* _msg = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.f_5)
  return _msg;
}
inline void Message4_M6_M19::set_allocated_f_5(::fleetbench::proto::Message4_M6_M19_M26* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_5_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_5_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M26*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.f_5)
}

// repeated .fleetbench.proto.Message4.M6.M19.M27 f_6 = 7;
inline int Message4_M6_M19::_internal_f_6_size() const {
  return _internal_f_6().size();
}
inline int Message4_M6_M19::f_6_size() const {
  return _internal_f_6_size();
}
inline void Message4_M6_M19::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_.Clear();
}
inline ::fleetbench::proto::Message4_M6_M19_M27* Message4_M6_M19::mutable_f_6(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.f_6)
  return _internal_mutable_f_6()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>* Message4_M6_M19::mutable_f_6()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M6.M19.f_6)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_6();
}
inline const ::fleetbench::proto::Message4_M6_M19_M27& Message4_M6_M19::f_6(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_6)
  return _internal_f_6().Get(index);
}
inline ::fleetbench::proto::Message4_M6_M19_M27* Message4_M6_M19::add_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M6_M19_M27* _add = _internal_mutable_f_6()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M6.M19.f_6)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>& Message4_M6_M19::f_6() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M6.M19.f_6)
  return _internal_f_6();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>&
Message4_M6_M19::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M6_M19_M27>*
Message4_M6_M19::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_6_;
}

// optional .fleetbench.proto.Message4.M6.M19.M30 f_7 = 8;
inline bool Message4_M6_M19::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message4_M6_M19::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message4_M6_M19_M30& Message4_M6_M19::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19_M30* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19_M30&>(::fleetbench::proto::_Message4_M6_M19_M30_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19_M30& Message4_M6_M19::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.M19.f_7)
  return _internal_f_7();
}
inline void Message4_M6_M19::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message4_M6_M19_M30* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M30*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.M19.f_7)
}
inline ::fleetbench::proto::Message4_M6_M19_M30* Message4_M6_M19::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message4_M6_M19_M30* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19_M30* Message4_M6_M19::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.M19.f_7)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message4_M6_M19_M30* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19_M30* Message4_M6_M19::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19_M30>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M30*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message4_M6_M19_M30* Message4_M6_M19::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message4_M6_M19_M30* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.M19.f_7)
  return _msg;
}
inline void Message4_M6_M19::set_allocated_f_7(::fleetbench::proto::Message4_M6_M19_M30* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19_M30*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.M19.f_7)
}

// -------------------------------------------------------------------

// Message4_M6

// optional int32 f_0 = 1;
inline bool Message4_M6::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M6::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message4_M6::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.f_0)
  return _internal_f_0();
}
inline void Message4_M6::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M6.f_0)
}
inline ::int32_t Message4_M6::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M6::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M6.M11 f_1 = 2;
inline bool Message4_M6::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M6::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M6_M11& Message4_M6::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M11* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M11&>(::fleetbench::proto::_Message4_M6_M11_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M11& Message4_M6::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.f_1)
  return _internal_f_1();
}
inline void Message4_M6::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M6_M11* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M11*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.f_1)
}
inline ::fleetbench::proto::Message4_M6_M11* Message4_M6::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M11* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M11* Message4_M6::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M6_M11* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M11* Message4_M6::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M11>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M11*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M6_M11* Message4_M6::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M6_M11* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.f_1)
  return _msg;
}
inline void Message4_M6::set_allocated_f_1(::fleetbench::proto::Message4_M6_M11* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M11*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.f_1)
}

// optional .fleetbench.proto.Message4.M6.M19 f_2 = 3;
inline bool Message4_M6::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M6::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M6_M19& Message4_M6::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6_M19* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6_M19&>(::fleetbench::proto::_Message4_M6_M19_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6_M19& Message4_M6::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M6.f_2)
  return _internal_f_2();
}
inline void Message4_M6::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M6_M19* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M6.f_2)
}
inline ::fleetbench::proto::Message4_M6_M19* Message4_M6::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6_M19* Message4_M6::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M6.f_2)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M6_M19* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6_M19* Message4_M6::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6_M19>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M6_M19* Message4_M6::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M6_M19* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M6.f_2)
  return _msg;
}
inline void Message4_M6::set_allocated_f_2(::fleetbench::proto::Message4_M6_M19* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M6_M19*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M6.f_2)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76.E27 f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76::set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76.f_0)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27>(_impl_.f_0_);
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76::_internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81

// optional string f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81.f_0)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81.f_0)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81.f_0)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78

// optional double f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::set_f_0(double value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_0)
}
inline double Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::_internal_set_f_0(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional float f_1 = 4;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::set_f_1(float value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_1)
}
inline float Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::_internal_set_f_1(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.M81 f_4 = 6;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_4)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_4)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_4)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78::set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_M81*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78.f_4)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85.E30 f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85::set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85.f_0)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30>(_impl_.f_0_);
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85::_internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.E29 f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.f_0)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29>(_impl_.f_0_);
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::_internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.M85 f_1 = 3;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.f_1)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.f_1)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82::set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82.f_1)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79

// optional string f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_0)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_0)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_0)
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.M82 f_1 = 2;
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>&
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82>*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91

// optional int64 f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M91.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M91.f_0)
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92

// optional int32 f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M92.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M92.f_0)
}
inline ::int32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90

// optional int32 f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_0)
}
inline ::int32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M91 f_2 = 3;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_2)
  return _internal_f_2();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_2)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_2)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M91*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_2)
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.M92 f_3 = 4;
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>&
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_M92>*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.E31 f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.f_0)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31>(_impl_.f_0_);
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::_internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_IsValid(value));
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.M90 f_1 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.f_1)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.f_1)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89::set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_M90*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89.f_1)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88

// optional fixed64 f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.f_0)
}
inline ::uint64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.M89 f_1 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.f_1)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.f_1)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88::set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88.f_1)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87

// optional float f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.f_0)
}
inline float Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.M88 f_2 = 4;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.f_2)
  return _internal_f_2();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.f_2)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.f_2)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87::set_allocated_f_2(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87.f_2)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86

// optional string f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_0)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_0)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_0)
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.M87 f_1 = 3;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_1)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_1)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86::set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86.f_1)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84

// optional string f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_0)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_0)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_0)
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.M86 f_2 = 3;
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>&
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86>*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83

// optional int64 f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.f_0)
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.M84 f_2 = 4;
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>&
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84>*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80

// optional int64 f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.f_0)
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.M83 f_2 = 3;
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>&
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83>*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77

// optional string f_0 = 2;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_0)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_0)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_0)
}

// optional string f_1 = 3;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_1)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_1)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_1)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_1)
}

// optional bytes f_2 = 5;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_2_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_2)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_2)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_2)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_2)
}

// optional fixed32 f_3 = 6;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_3)
  return _internal_f_3();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_3)
}
inline ::uint32_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional bool f_4 = 7;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_4(bool value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_4)
}
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_4(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional string f_5 = 9;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_5)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_5)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_5)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_5)
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.E28 f_6 = 10;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_6)
  return _internal_f_6();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_6(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_6)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28>(_impl_.f_6_);
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_6(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_IsValid(value));
  _impl_.f_6_ = value;
}

// optional int64 f_7 = 11;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_7() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_7)
  return _internal_f_7();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_f_7(::int64_t value) {
  _internal_set_f_7(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_7)
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_set_f_7(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M78 f_11 = 12;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_11_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ != nullptr) _impl_.f_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* p = _impl_.f_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_11)
  return _internal_f_11();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_11_);
  }
  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_11)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* released = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::unsafe_arena_release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_11)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* temp = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78>(GetArena());
    _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78*>(p);
  }
  return _impl_.f_11_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* _msg = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_11)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_allocated_f_11(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M78*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_11)
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M79 f_12 = 13;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_12_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ != nullptr) _impl_.f_12_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* p = _impl_.f_12_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_12() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_12)
  return _internal_f_12();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_12_);
  }
  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_12)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* released = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::unsafe_arena_release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_12)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* temp = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79>(GetArena());
    _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79*>(p);
  }
  return _impl_.f_12_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* _msg = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_12)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::set_allocated_f_12(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_12_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_12)
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.M80 f_13 = 14;
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_13_size() const {
  return _internal_f_13().size();
}
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_13_size() const {
  return _internal_f_13_size();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_13_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_13(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_13)
  return _internal_mutable_f_13()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::mutable_f_13()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_13)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_13();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_13(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_13)
  return _internal_f_13().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::add_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80* _add = _internal_mutable_f_13()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_13)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>& Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::f_13() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77.f_13)
  return _internal_f_13();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>&
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_13_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80>*
Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_13_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66_M73

// optional int64 f_0 = 3;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_0)
}
inline ::int64_t Message4_M7_M14_M29_M34_M41_M58_M66_M73::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M76 f_3 = 4;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66_M73::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& Message4_M7_M14_M29_M34_M41_M58_M66_M73::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76& Message4_M7_M14_M29_M34_M41_M58_M66_M73::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_3)
  return _internal_f_3();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_3)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* Message4_M7_M14_M29_M34_M41_M58_M66_M73::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* Message4_M7_M14_M29_M34_M41_M58_M66_M73::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* Message4_M7_M14_M29_M34_M41_M58_M66_M73::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* Message4_M7_M14_M29_M34_M41_M58_M66_M73::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_3)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73::set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_3)
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.M77 f_4 = 6;
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message4_M7_M14_M29_M34_M41_M58_M66_M73::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66_M73::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* Message4_M7_M14_M29_M34_M41_M58_M66_M73::mutable_f_4(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_4)
  return _internal_mutable_f_4()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>* Message4_M7_M14_M29_M34_M41_M58_M66_M73::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77& Message4_M7_M14_M29_M34_M41_M58_M66_M73::f_4(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_4)
  return _internal_f_4().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* Message4_M7_M14_M29_M34_M41_M58_M66_M73::add_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77* _add = _internal_mutable_f_4()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_4)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>& Message4_M7_M14_M29_M34_M41_M58_M66_M73::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73.f_4)
  return _internal_f_4();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>&
Message4_M7_M14_M29_M34_M41_M58_M66_M73::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77>*
Message4_M7_M14_M29_M34_M41_M58_M66_M73::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58_M66

// optional float f_0 = 3;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float Message4_M7_M14_M29_M34_M41_M58_M66::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.f_0)
}
inline float Message4_M7_M14_M29_M34_M41_M58_M66::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.M73 f_3 = 5;
inline bool Message4_M7_M14_M29_M34_M41_M58_M66::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_3_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ != nullptr) _impl_.f_3_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73& Message4_M7_M14_M29_M34_M41_M58_M66::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* p = _impl_.f_3_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_M73_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73& Message4_M7_M14_M29_M34_M41_M58_M66::f_3() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.f_3)
  return _internal_f_3();
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66::unsafe_arena_set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_3_);
  }
  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.f_3)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* Message4_M7_M14_M29_M34_M41_M58_M66::release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* released = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* Message4_M7_M14_M29_M34_M41_M58_M66::unsafe_arena_release_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.f_3)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* temp = _impl_.f_3_;
  _impl_.f_3_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* Message4_M7_M14_M29_M34_M41_M58_M66::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_3_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73>(GetArena());
    _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73*>(p);
  }
  return _impl_.f_3_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* Message4_M7_M14_M29_M34_M41_M58_M66::mutable_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* _msg = _internal_mutable_f_3();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.f_3)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58_M66::set_allocated_f_3(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_3_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_3_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66.f_3)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M58

// optional fixed64 f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M58::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t Message4_M7_M14_M29_M34_M41_M58::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M58::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_0)
}
inline ::uint64_t Message4_M7_M14_M29_M34_M41_M58::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M58::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 3;
inline bool Message4_M7_M14_M29_M34_M41_M58::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_1)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_1)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_1)
}

// optional bytes f_2 = 4;
inline bool Message4_M7_M14_M29_M34_M41_M58::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34_M41_M58::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_2)
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_2)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34_M41_M58::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M7_M14_M29_M34_M41_M58::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34_M41_M58::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34_M41_M58::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_2)
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.M66 f_4 = 5;
inline bool Message4_M7_M14_M29_M34_M41_M58::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M58::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66& Message4_M7_M14_M29_M34_M41_M58::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_M58_M66_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66& Message4_M7_M14_M29_M34_M41_M58::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M14_M29_M34_M41_M58::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_4)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* Message4_M7_M14_M29_M34_M41_M58::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* Message4_M7_M14_M29_M34_M41_M58::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_4)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* Message4_M7_M14_M29_M34_M41_M58::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* Message4_M7_M14_M29_M34_M41_M58::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_4)
  return _msg;
}
inline void Message4_M7_M14_M29_M34_M41_M58::set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58.f_4)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41_M61

// optional float f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41_M61::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41_M61::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float Message4_M7_M14_M29_M34_M41_M61::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M61.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41_M61::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.M61.f_0)
}
inline float Message4_M7_M14_M29_M34_M41_M61::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34_M41_M61::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34_M41

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41.E17 f_0 = 1;
inline bool Message4_M7_M14_M29_M34_M41::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34_M41::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 Message4_M7_M14_M29_M34_M41::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34_M41::set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_0)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 Message4_M7_M14_M29_M34_M41::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17>(_impl_.f_0_);
}
inline void Message4_M7_M14_M29_M34_M41::_internal_set_f_0(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M58 f_1 = 2;
inline int Message4_M7_M14_M29_M34_M41::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message4_M7_M14_M29_M34_M41::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message4_M7_M14_M29_M34_M41::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58* Message4_M7_M14_M29_M34_M41::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>* Message4_M7_M14_M29_M34_M41::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58& Message4_M7_M14_M29_M34_M41::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58* Message4_M7_M14_M29_M34_M41::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>& Message4_M7_M14_M29_M34_M41::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>&
Message4_M7_M14_M29_M34_M41::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58>*
Message4_M7_M14_M29_M34_M41::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// repeated .fleetbench.proto.Message4.M7.M14.M29.M34.M41.M61 f_2 = 4;
inline int Message4_M7_M14_M29_M34_M41::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message4_M7_M14_M29_M34_M41::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message4_M7_M14_M29_M34_M41::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61* Message4_M7_M14_M29_M34_M41::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>* Message4_M7_M14_M29_M34_M41::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61& Message4_M7_M14_M29_M34_M41::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61* Message4_M7_M14_M29_M34_M41::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>& Message4_M7_M14_M29_M34_M41::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M14.M29.M34.M41.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>&
Message4_M7_M14_M29_M34_M41::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M61>*
Message4_M7_M14_M29_M34_M41::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29_M34

// optional int32 f_0 = 1;
inline bool Message4_M7_M14_M29_M34::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message4_M7_M14_M29_M34::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29_M34::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.f_0)
}
inline ::int32_t Message4_M7_M14_M29_M34::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29_M34::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int32 f_1 = 2;
inline bool Message4_M7_M14_M29_M34::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t Message4_M7_M14_M29_M34::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14_M29_M34::set_f_1(::int32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.f_1)
}
inline ::int32_t Message4_M7_M14_M29_M34::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M7_M14_M29_M34::_internal_set_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional string f_2 = 4;
inline bool Message4_M7_M14_M29_M34::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14_M29_M34::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14_M29_M34::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14_M29_M34::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.M34.f_2)
}
inline std::string* Message4_M7_M14_M29_M34::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.f_2)
  return _s;
}
inline const std::string& Message4_M7_M14_M29_M34::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M7_M14_M29_M34::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14_M29_M34::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14_M29_M34::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.f_2)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14_M29_M34::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.f_2)
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34.M41 f_4 = 5;
inline bool Message4_M7_M14_M29_M34::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29_M34::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41& Message4_M7_M14_M29_M34::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_M41_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34_M41& Message4_M7_M14_M29_M34::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.M34.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M14_M29_M34::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.f_4)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* Message4_M7_M14_M29_M34::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* Message4_M7_M14_M29_M34::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.M34.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* Message4_M7_M14_M29_M34::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34_M41>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* Message4_M7_M14_M29_M34::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34_M41* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.M34.f_4)
  return _msg;
}
inline void Message4_M7_M14_M29_M34::set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34_M41* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34_M41*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.M34.f_4)
}

// -------------------------------------------------------------------

// Message4_M7_M14_M29

// optional fixed32 f_0 = 3;
inline bool Message4_M7_M14_M29::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M14_M29::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Message4_M7_M14_M29::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M14_M29::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.f_0)
}
inline ::uint32_t Message4_M7_M14_M29::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M14_M29::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 4;
inline bool Message4_M7_M14_M29::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M14_M29::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message4_M7_M14_M29::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14_M29::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.M29.f_1)
}
inline ::int64_t Message4_M7_M14_M29::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M7_M14_M29::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14.M29.M34 f_4 = 5;
inline bool Message4_M7_M14_M29::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M7_M14_M29::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34& Message4_M7_M14_M29::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29_M34* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29_M34&>(::fleetbench::proto::_Message4_M7_M14_M29_M34_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29_M34& Message4_M7_M14_M29::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.M29.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M14_M29::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.M29.f_4)
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34* Message4_M7_M14_M29::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34* Message4_M7_M14_M29::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.M29.f_4)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34* Message4_M7_M14_M29::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29_M34>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29_M34* Message4_M7_M14_M29::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14_M29_M34* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.M29.f_4)
  return _msg;
}
inline void Message4_M7_M14_M29::set_allocated_f_4(::fleetbench::proto::Message4_M7_M14_M29_M34* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29_M34*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.M29.f_4)
}

// -------------------------------------------------------------------

// Message4_M7_M14

// optional string f_0 = 1;
inline bool Message4_M7_M14::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M14::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M14::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M14::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M14.f_0)
}
inline std::string* Message4_M7_M14::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.f_0)
  return _s;
}
inline const std::string& Message4_M7_M14::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M14::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M14::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M14::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M14::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.f_0)
}

// optional .fleetbench.proto.Message4.M7.M14.M29 f_1 = 2;
inline bool Message4_M7_M14::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M7_M14::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M7_M14_M29& Message4_M7_M14::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14_M29* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14_M29&>(::fleetbench::proto::_Message4_M7_M14_M29_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14_M29& Message4_M7_M14::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M14.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M14::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M14.f_1)
}
inline ::fleetbench::proto::Message4_M7_M14_M29* Message4_M7_M14::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14_M29* Message4_M7_M14::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M14.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14_M29* Message4_M7_M14::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14_M29>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M7_M14_M29* Message4_M7_M14::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M7_M14_M29* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M14.f_1)
  return _msg;
}
inline void Message4_M7_M14::set_allocated_f_1(::fleetbench::proto::Message4_M7_M14_M29* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14_M29*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M14.f_1)
}

// -------------------------------------------------------------------

// Message4_M7_M15

// optional .fleetbench.proto.Message4.M7.M15.E3 f_0 = 1;
inline bool Message4_M7_M15::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7_M15::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::fleetbench::proto::Message4_M7_M15_E3 Message4_M7_M15::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M15.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M15::set_f_0(::fleetbench::proto::Message4_M7_M15_E3 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M15.f_0)
}
inline ::fleetbench::proto::Message4_M7_M15_E3 Message4_M7_M15::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M15_E3>(_impl_.f_0_);
}
inline void Message4_M7_M15::_internal_set_f_0(::fleetbench::proto::Message4_M7_M15_E3 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M15_E3_IsValid(value));
  _impl_.f_0_ = value;
}

// optional int64 f_1 = 2;
inline bool Message4_M7_M15::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M15::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message4_M7_M15::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M15.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M15::set_f_1(::int64_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M15.f_1)
}
inline ::int64_t Message4_M7_M15::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M7_M15::_internal_set_f_1(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional int64 f_2 = 3;
inline bool Message4_M7_M15::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M15::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Message4_M7_M15::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M15.f_2)
  return _internal_f_2();
}
inline void Message4_M7_M15::set_f_2(::int64_t value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M15.f_2)
}
inline ::int64_t Message4_M7_M15::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M7_M15::_internal_set_f_2(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional uint64 f_3 = 4;
inline bool Message4_M7_M15::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M7_M15::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint64_t Message4_M7_M15::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M15.f_3)
  return _internal_f_3();
}
inline void Message4_M7_M15::set_f_3(::uint64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M15.f_3)
}
inline ::uint64_t Message4_M7_M15::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M7_M15::_internal_set_f_3(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional .fleetbench.proto.Message4.M7.M15.E4 f_4 = 6;
inline bool Message4_M7_M15::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M7_M15::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::fleetbench::proto::Message4_M7_M15_E4 Message4_M7_M15::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M15.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M15::set_f_4(::fleetbench::proto::Message4_M7_M15_E4 value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M15.f_4)
}
inline ::fleetbench::proto::Message4_M7_M15_E4 Message4_M7_M15::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M15_E4>(_impl_.f_4_);
}
inline void Message4_M7_M15::_internal_set_f_4(::fleetbench::proto::Message4_M7_M15_E4 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M15_E4_IsValid(value));
  _impl_.f_4_ = value;
}

// optional string f_5 = 8;
inline bool Message4_M7_M15::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M15::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M15::f_5() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M15.f_5)
  return _internal_f_5();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M15::set_f_5(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M15.f_5)
}
inline std::string* Message4_M7_M15::mutable_f_5() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_5();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M15.f_5)
  return _s;
}
inline const std::string& Message4_M7_M15::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_.Get();
}
inline void Message4_M7_M15::_internal_set_f_5(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_5_.Set(value, GetArena());
}
inline std::string* Message4_M7_M15::_internal_mutable_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_5_.Mutable( GetArena());
}
inline std::string* Message4_M7_M15::release_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M15.f_5)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_5_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_5_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M15::set_allocated_f_5(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_5_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_5_.IsDefault()) {
          _impl_.f_5_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M15.f_5)
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M40

// optional bytes f_0 = 1;
inline bool Message4_M7_M16_M28_M35_M40::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M40::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M16_M28_M35_M40::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35_M40::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_0)
}
inline std::string* Message4_M7_M16_M28_M35_M40::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_0)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35_M40::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M16_M28_M35_M40::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M40::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M40::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35_M40::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_0)
}

// optional bool f_1 = 2;
inline bool Message4_M7_M16_M28_M35_M40::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M40::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Message4_M7_M16_M28_M35_M40::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M16_M28_M35_M40::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_1)
}
inline bool Message4_M7_M16_M28_M35_M40::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M7_M16_M28_M35_M40::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional bool f_2 = 3;
inline bool Message4_M7_M16_M28_M35_M40::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M40::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message4_M7_M16_M28_M35_M40::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_2)
  return _internal_f_2();
}
inline void Message4_M7_M16_M28_M35_M40::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_2)
}
inline bool Message4_M7_M16_M28_M35_M40::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M7_M16_M28_M35_M40::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// optional uint32 f_3 = 4;
inline bool Message4_M7_M16_M28_M35_M40::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M40::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t Message4_M7_M16_M28_M35_M40::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_3)
  return _internal_f_3();
}
inline void Message4_M7_M16_M28_M35_M40::set_f_3(::uint32_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_3)
}
inline ::uint32_t Message4_M7_M16_M28_M35_M40::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M7_M16_M28_M35_M40::_internal_set_f_3(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional float f_4 = 5;
inline bool Message4_M7_M16_M28_M35_M40::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M40::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float Message4_M7_M16_M28_M35_M40::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M16_M28_M35_M40::set_f_4(float value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_4)
}
inline float Message4_M7_M16_M28_M35_M40::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M7_M16_M28_M35_M40::_internal_set_f_4(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional uint32 f_5 = 7;
inline bool Message4_M7_M16_M28_M35_M40::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M40::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t Message4_M7_M16_M28_M35_M40::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_5)
  return _internal_f_5();
}
inline void Message4_M7_M16_M28_M35_M40::set_f_5(::uint32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_5)
}
inline ::uint32_t Message4_M7_M16_M28_M35_M40::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M7_M16_M28_M35_M40::_internal_set_f_5(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional int32 f_6 = 8;
inline bool Message4_M7_M16_M28_M35_M40::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M40::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t Message4_M7_M16_M28_M35_M40::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_6)
  return _internal_f_6();
}
inline void Message4_M7_M16_M28_M35_M40::set_f_6(::int32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M40.f_6)
}
inline ::int32_t Message4_M7_M16_M28_M35_M40::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message4_M7_M16_M28_M35_M40::_internal_set_f_6(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M43_M62_M68

// optional bool f_0 = 1;
inline bool Message4_M7_M16_M28_M35_M43_M62_M68::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43_M62_M68::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message4_M7_M16_M28_M35_M43_M62_M68::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M68.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M16_M28_M35_M43_M62_M68::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M68.f_0)
}
inline bool Message4_M7_M16_M28_M35_M43_M62_M68::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M16_M28_M35_M43_M62_M68::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M43_M62_M70

// optional string f_0 = 1;
inline bool Message4_M7_M16_M28_M35_M43_M62_M70::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43_M62_M70::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M16_M28_M35_M43_M62_M70::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35_M43_M62_M70::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70.f_0)
}
inline std::string* Message4_M7_M16_M28_M35_M43_M62_M70::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70.f_0)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35_M43_M62_M70::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M16_M28_M35_M43_M62_M70::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M43_M62_M70::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M43_M62_M70::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35_M43_M62_M70::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70.f_0)
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M43_M62

// optional int32 f_0 = 1;
inline bool Message4_M7_M16_M28_M35_M43_M62::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43_M62::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t Message4_M7_M16_M28_M35_M43_M62::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M16_M28_M35_M43_M62::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_0)
}
inline ::int32_t Message4_M7_M16_M28_M35_M43_M62::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M16_M28_M35_M43_M62::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional fixed32 f_1 = 2;
inline bool Message4_M7_M16_M28_M35_M43_M62::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43_M62::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t Message4_M7_M16_M28_M35_M43_M62::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M16_M28_M35_M43_M62::set_f_1(::uint32_t value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_1)
}
inline ::uint32_t Message4_M7_M16_M28_M35_M43_M62::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4_M7_M16_M28_M35_M43_M62::_internal_set_f_1(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M68 f_2 = 3;
inline bool Message4_M7_M16_M28_M35_M43_M62::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28_M35_M43_M62::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68& Message4_M7_M16_M28_M35_M43_M62::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_M43_M62_M68_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68& Message4_M7_M16_M28_M35_M43_M62::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_2)
  return _internal_f_2();
}
inline void Message4_M7_M16_M28_M35_M43_M62::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_2)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* Message4_M7_M16_M28_M35_M43_M62::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* Message4_M7_M16_M28_M35_M43_M62::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* Message4_M7_M16_M28_M35_M43_M62::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* Message4_M7_M16_M28_M35_M43_M62::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_2)
  return _msg;
}
inline void Message4_M7_M16_M28_M35_M43_M62::set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M68*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_2)
}

// repeated .fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.M70 f_3 = 4;
inline int Message4_M7_M16_M28_M35_M43_M62::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message4_M7_M16_M28_M35_M43_M62::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message4_M7_M16_M28_M35_M43_M62::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70* Message4_M7_M16_M28_M35_M43_M62::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>* Message4_M7_M16_M28_M35_M43_M62::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70& Message4_M7_M16_M28_M35_M43_M62::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70* Message4_M7_M16_M28_M35_M43_M62::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>& Message4_M7_M16_M28_M35_M43_M62::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>&
Message4_M7_M16_M28_M35_M43_M62::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62_M70>*
Message4_M7_M16_M28_M35_M43_M62::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M43

// optional string f_0 = 2;
inline bool Message4_M7_M16_M28_M35_M43::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M16_M28_M35_M43::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35_M43::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_0)
}
inline std::string* Message4_M7_M16_M28_M35_M43::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_0)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35_M43::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M16_M28_M35_M43::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M43::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M43::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35_M43::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_0)
}

// repeated int32 f_1 = 3 [packed = true];
inline int Message4_M7_M16_M28_M35_M43::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message4_M7_M16_M28_M35_M43::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message4_M7_M16_M28_M35_M43::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::int32_t Message4_M7_M16_M28_M35_M43::f_1(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_1)
  return _internal_f_1().Get(index);
}
inline void Message4_M7_M16_M28_M35_M43::set_f_1(int index, ::int32_t value) {
  _internal_mutable_f_1()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_1)
}
inline void Message4_M7_M16_M28_M35_M43::add_f_1(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_1()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_1)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message4_M7_M16_M28_M35_M43::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_1)
  return _internal_f_1();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message4_M7_M16_M28_M35_M43::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message4_M7_M16_M28_M35_M43::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message4_M7_M16_M28_M35_M43::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// optional bytes f_2 = 5;
inline bool Message4_M7_M16_M28_M35_M43::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M7_M16_M28_M35_M43::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35_M43::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_2)
}
inline std::string* Message4_M7_M16_M28_M35_M43::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_2)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35_M43::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M7_M16_M28_M35_M43::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M43::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M43::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35_M43::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_2)
}

// optional int64 f_3 = 6;
inline bool Message4_M7_M16_M28_M35_M43::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t Message4_M7_M16_M28_M35_M43::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_3)
  return _internal_f_3();
}
inline void Message4_M7_M16_M28_M35_M43::set_f_3(::int64_t value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_3)
}
inline ::int64_t Message4_M7_M16_M28_M35_M43::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M7_M16_M28_M35_M43::_internal_set_f_3(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional int32 f_4 = 7;
inline bool Message4_M7_M16_M28_M35_M43::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M43::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t Message4_M7_M16_M28_M35_M43::f_4() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_4)
  return _internal_f_4();
}
inline void Message4_M7_M16_M28_M35_M43::set_f_4(::int32_t value) {
  _internal_set_f_4(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_4)
}
inline ::int32_t Message4_M7_M16_M28_M35_M43::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline void Message4_M7_M16_M28_M35_M43::_internal_set_f_4(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_ = value;
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.M43.M62 f_7 = 9;
inline bool Message4_M7_M16_M28_M35_M43::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_7_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28_M35_M43::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ != nullptr) _impl_.f_7_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62& Message4_M7_M16_M28_M35_M43::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* p = _impl_.f_7_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_M43_M62_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62& Message4_M7_M16_M28_M35_M43::f_7() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_7)
  return _internal_f_7();
}
inline void Message4_M7_M16_M28_M35_M43::unsafe_arena_set_allocated_f_7(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_7_);
  }
  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_7)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* Message4_M7_M16_M28_M35_M43::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* released = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* Message4_M7_M16_M28_M35_M43::unsafe_arena_release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_7)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* temp = _impl_.f_7_;
  _impl_.f_7_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* Message4_M7_M16_M28_M35_M43::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_7_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62>(GetArena());
    _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62*>(p);
  }
  return _impl_.f_7_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* Message4_M7_M16_M28_M35_M43::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* _msg = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_7)
  return _msg;
}
inline void Message4_M7_M16_M28_M35_M43::set_allocated_f_7(::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_7_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_7_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43_M62*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M43.f_7)
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M46

// optional int64 f_0 = 1;
inline bool Message4_M7_M16_M28_M35_M46::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M46::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t Message4_M7_M16_M28_M35_M46::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M46.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M16_M28_M35_M46::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M46.f_0)
}
inline ::int64_t Message4_M7_M16_M28_M35_M46::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M16_M28_M35_M46::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M51

// optional int32 f_0 = 1;
inline bool Message4_M7_M16_M28_M35_M51::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M51::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t Message4_M7_M16_M28_M35_M51::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M16_M28_M35_M51::set_f_0(::int32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_0)
}
inline ::int32_t Message4_M7_M16_M28_M35_M51::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M16_M28_M35_M51::_internal_set_f_0(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 5;
inline bool Message4_M7_M16_M28_M35_M51::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M51::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M16_M28_M35_M51::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35_M51::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_1)
}
inline std::string* Message4_M7_M16_M28_M35_M51::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_1)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35_M51::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message4_M7_M16_M28_M35_M51::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M51::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M51::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35_M51::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_1)
}

// optional string f_2 = 6;
inline bool Message4_M7_M16_M28_M35_M51::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M51::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M7_M16_M28_M35_M51::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35_M51::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_2)
}
inline std::string* Message4_M7_M16_M28_M35_M51::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_2)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35_M51::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M7_M16_M28_M35_M51::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M51::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M51::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35_M51::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M51.f_2)
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M52_M57

// optional bytes f_0 = 1;
inline bool Message4_M7_M16_M28_M35_M52_M57::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M52_M57::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M16_M28_M35_M52_M57::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35_M52_M57::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57.f_0)
}
inline std::string* Message4_M7_M16_M28_M35_M52_M57::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57.f_0)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35_M52_M57::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M16_M28_M35_M52_M57::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M52_M57::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35_M52_M57::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35_M52_M57::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57.f_0)
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35_M52

// optional int64 f_0 = 2;
inline bool Message4_M7_M16_M28_M35_M52::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35_M52::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t Message4_M7_M16_M28_M35_M52::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M52.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M16_M28_M35_M52::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.M52.f_0)
}
inline ::int64_t Message4_M7_M16_M28_M35_M52::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M16_M28_M35_M52::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.M52.M57 f_2 = 3;
inline bool Message4_M7_M16_M28_M35_M52::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28_M35_M52::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57& Message4_M7_M16_M28_M35_M52::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_M52_M57_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57& Message4_M7_M16_M28_M35_M52::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.M52.f_2)
  return _internal_f_2();
}
inline void Message4_M7_M16_M28_M35_M52::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M52.f_2)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* Message4_M7_M16_M28_M35_M52::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* Message4_M7_M16_M28_M35_M52::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.M52.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* Message4_M7_M16_M28_M35_M52::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* Message4_M7_M16_M28_M35_M52::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.M52.f_2)
  return _msg;
}
inline void Message4_M7_M16_M28_M35_M52::set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M52_M57*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.M52.f_2)
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28_M35

// optional uint64 f_0 = 2;
inline bool Message4_M7_M16_M28_M35::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::uint64_t Message4_M7_M16_M28_M35::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M16_M28_M35::set_f_0(::uint64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_0)
}
inline ::uint64_t Message4_M7_M16_M28_M35::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_0(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional string f_1 = 3;
inline bool Message4_M7_M16_M28_M35::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M16_M28_M35::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_1)
  return _internal_f_1();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35::set_f_1(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_1)
}
inline std::string* Message4_M7_M16_M28_M35::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_1)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_.Get();
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_1(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_1_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_1_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_1)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_1_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_1_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_1(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_1_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_1_.IsDefault()) {
          _impl_.f_1_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_1)
}

// optional string f_2 = 6;
inline bool Message4_M7_M16_M28_M35::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message4_M7_M16_M28_M35::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_2)
  return _internal_f_2();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35::set_f_2(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_2)
}
inline std::string* Message4_M7_M16_M28_M35::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_2)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_.Get();
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_2(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.f_2_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.f_2_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_2)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.f_2_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_2_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_2(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.f_2_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_2_.IsDefault()) {
          _impl_.f_2_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_2)
}

// optional float f_3 = 7;
inline bool Message4_M7_M16_M28_M35::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline float Message4_M7_M16_M28_M35::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_3)
  return _internal_f_3();
}
inline void Message4_M7_M16_M28_M35::set_f_3(float value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_3)
}
inline float Message4_M7_M16_M28_M35::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_3(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// optional string f_4 = 9;
inline bool Message4_M7_M16_M28_M35::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Message4_M7_M16_M28_M35::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_4)
  return _internal_f_4();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35::set_f_4(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_4)
}
inline std::string* Message4_M7_M16_M28_M35::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_4)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_.Get();
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_4(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.f_4_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.f_4_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_4)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.f_4_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_4_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_4(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.f_4_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_4_.IsDefault()) {
          _impl_.f_4_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_4)
}

// optional bool f_5 = 11;
inline bool Message4_M7_M16_M28_M35::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool Message4_M7_M16_M28_M35::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_5)
  return _internal_f_5();
}
inline void Message4_M7_M16_M28_M35::set_f_5(bool value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_5)
}
inline bool Message4_M7_M16_M28_M35::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_5(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional fixed32 f_6 = 14;
inline bool Message4_M7_M16_M28_M35::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::uint32_t Message4_M7_M16_M28_M35::f_6() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_6)
  return _internal_f_6();
}
inline void Message4_M7_M16_M28_M35::set_f_6(::uint32_t value) {
  _internal_set_f_6(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_6)
}
inline ::uint32_t Message4_M7_M16_M28_M35::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_6_;
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_6(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_6_ = value;
}

// optional bytes f_7 = 15;
inline bool Message4_M7_M16_M28_M35::has_f_7() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_7_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Message4_M7_M16_M28_M35::f_7() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_7)
  return _internal_f_7();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28_M35::set_f_7(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_7_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_7)
}
inline std::string* Message4_M7_M16_M28_M35::mutable_f_7() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_7();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_7)
  return _s;
}
inline const std::string& Message4_M7_M16_M28_M35::_internal_f_7() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_7_.Get();
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_7(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.f_7_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::_internal_mutable_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.f_7_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28_M35::release_f_7() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_7)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.f_7_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_7_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_7(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.f_7_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_7_.IsDefault()) {
          _impl_.f_7_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_7)
}

// optional fixed32 f_8 = 17;
inline bool Message4_M7_M16_M28_M35::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t Message4_M7_M16_M28_M35::f_8() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_8)
  return _internal_f_8();
}
inline void Message4_M7_M16_M28_M35::set_f_8(::uint32_t value) {
  _internal_set_f_8(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_8)
}
inline ::uint32_t Message4_M7_M16_M28_M35::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_8_;
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_8(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_8_ = value;
}

// optional int64 f_9 = 20;
inline bool Message4_M7_M16_M28_M35::has_f_9() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int64_t Message4_M7_M16_M28_M35::f_9() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_9)
  return _internal_f_9();
}
inline void Message4_M7_M16_M28_M35::set_f_9(::int64_t value) {
  _internal_set_f_9(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_9)
}
inline ::int64_t Message4_M7_M16_M28_M35::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_9(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_ = value;
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.E15 f_10 = 21;
inline bool Message4_M7_M16_M28_M35::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_10_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_E15 Message4_M7_M16_M28_M35::f_10() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_10)
  return _internal_f_10();
}
inline void Message4_M7_M16_M28_M35::set_f_10(::fleetbench::proto::Message4_M7_M16_M28_M35_E15 value) {
  _internal_set_f_10(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.M35.f_10)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_E15 Message4_M7_M16_M28_M35::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_E15>(_impl_.f_10_);
}
inline void Message4_M7_M16_M28_M35::_internal_set_f_10(::fleetbench::proto::Message4_M7_M16_M28_M35_E15 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M16_M28_M35_E15_IsValid(value));
  _impl_.f_10_ = value;
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.M40 f_21 = 23;
inline bool Message4_M7_M16_M28_M35::has_f_21() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_21_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_21_ != nullptr) _impl_.f_21_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M40& Message4_M7_M16_M28_M35::_internal_f_21() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* p = _impl_.f_21_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35_M40&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_M40_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M40& Message4_M7_M16_M28_M35::f_21() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_21)
  return _internal_f_21();
}
inline void Message4_M7_M16_M28_M35::unsafe_arena_set_allocated_f_21(::fleetbench::proto::Message4_M7_M16_M28_M35_M40* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_21_);
  }
  _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M40*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_21)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* Message4_M7_M16_M28_M35::release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* released = _impl_.f_21_;
  _impl_.f_21_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* Message4_M7_M16_M28_M35::unsafe_arena_release_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_21)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* temp = _impl_.f_21_;
  _impl_.f_21_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* Message4_M7_M16_M28_M35::_internal_mutable_f_21() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_21_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35_M40>(GetArena());
    _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M40*>(p);
  }
  return _impl_.f_21_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* Message4_M7_M16_M28_M35::mutable_f_21() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M40* _msg = _internal_mutable_f_21();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_21)
  return _msg;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_21(::fleetbench::proto::Message4_M7_M16_M28_M35_M40* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_21_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_21_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M40*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_21)
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.M43 f_23 = 25;
inline bool Message4_M7_M16_M28_M35::has_f_23() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_23_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ != nullptr) _impl_.f_23_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43& Message4_M7_M16_M28_M35::_internal_f_23() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* p = _impl_.f_23_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_M43_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M43& Message4_M7_M16_M28_M35::f_23() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_23)
  return _internal_f_23();
}
inline void Message4_M7_M16_M28_M35::unsafe_arena_set_allocated_f_23(::fleetbench::proto::Message4_M7_M16_M28_M35_M43* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_23_);
  }
  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_23)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* Message4_M7_M16_M28_M35::release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* released = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* Message4_M7_M16_M28_M35::unsafe_arena_release_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_23)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* temp = _impl_.f_23_;
  _impl_.f_23_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* Message4_M7_M16_M28_M35::_internal_mutable_f_23() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_23_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35_M43>(GetArena());
    _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43*>(p);
  }
  return _impl_.f_23_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* Message4_M7_M16_M28_M35::mutable_f_23() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M43* _msg = _internal_mutable_f_23();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_23)
  return _msg;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_23(::fleetbench::proto::Message4_M7_M16_M28_M35_M43* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_23_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_23_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M43*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_23)
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.M46 f_25 = 26;
inline bool Message4_M7_M16_M28_M35::has_f_25() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_25_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_25_ != nullptr) _impl_.f_25_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M46& Message4_M7_M16_M28_M35::_internal_f_25() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* p = _impl_.f_25_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35_M46&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_M46_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M46& Message4_M7_M16_M28_M35::f_25() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_25)
  return _internal_f_25();
}
inline void Message4_M7_M16_M28_M35::unsafe_arena_set_allocated_f_25(::fleetbench::proto::Message4_M7_M16_M28_M35_M46* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_25_);
  }
  _impl_.f_25_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M46*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_25)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* Message4_M7_M16_M28_M35::release_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* released = _impl_.f_25_;
  _impl_.f_25_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* Message4_M7_M16_M28_M35::unsafe_arena_release_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_25)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* temp = _impl_.f_25_;
  _impl_.f_25_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* Message4_M7_M16_M28_M35::_internal_mutable_f_25() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_25_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35_M46>(GetArena());
    _impl_.f_25_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M46*>(p);
  }
  return _impl_.f_25_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* Message4_M7_M16_M28_M35::mutable_f_25() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M46* _msg = _internal_mutable_f_25();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_25)
  return _msg;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_25(::fleetbench::proto::Message4_M7_M16_M28_M35_M46* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_25_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.f_25_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M46*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_25)
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35.M51 f_26 = 27;
inline bool Message4_M7_M16_M28_M35::has_f_26() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_26_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28_M35::clear_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_26_ != nullptr) _impl_.f_26_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M51& Message4_M7_M16_M28_M35::_internal_f_26() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* p = _impl_.f_26_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35_M51&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_M51_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M51& Message4_M7_M16_M28_M35::f_26() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_26)
  return _internal_f_26();
}
inline void Message4_M7_M16_M28_M35::unsafe_arena_set_allocated_f_26(::fleetbench::proto::Message4_M7_M16_M28_M35_M51* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_26_);
  }
  _impl_.f_26_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M51*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_26)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* Message4_M7_M16_M28_M35::release_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* released = _impl_.f_26_;
  _impl_.f_26_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* Message4_M7_M16_M28_M35::unsafe_arena_release_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.M35.f_26)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* temp = _impl_.f_26_;
  _impl_.f_26_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* Message4_M7_M16_M28_M35::_internal_mutable_f_26() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_26_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35_M51>(GetArena());
    _impl_.f_26_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M51*>(p);
  }
  return _impl_.f_26_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* Message4_M7_M16_M28_M35::mutable_f_26() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M51* _msg = _internal_mutable_f_26();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_26)
  return _msg;
}
inline void Message4_M7_M16_M28_M35::set_allocated_f_26(::fleetbench::proto::Message4_M7_M16_M28_M35_M51* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_26_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.f_26_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35_M51*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.M35.f_26)
}

// repeated .fleetbench.proto.Message4.M7.M16.M28.M35.M52 f_27 = 28;
inline int Message4_M7_M16_M28_M35::_internal_f_27_size() const {
  return _internal_f_27().size();
}
inline int Message4_M7_M16_M28_M35::f_27_size() const {
  return _internal_f_27_size();
}
inline void Message4_M7_M16_M28_M35::clear_f_27() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_27_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M52* Message4_M7_M16_M28_M35::mutable_f_27(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.M35.f_27)
  return _internal_mutable_f_27()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>* Message4_M7_M16_M28_M35::mutable_f_27()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M16.M28.M35.f_27)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_27();
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35_M52& Message4_M7_M16_M28_M35::f_27(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.M35.f_27)
  return _internal_f_27().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35_M52* Message4_M7_M16_M28_M35::add_f_27() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M16_M28_M35_M52* _add = _internal_mutable_f_27()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M16.M28.M35.f_27)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>& Message4_M7_M16_M28_M35::f_27() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M16.M28.M35.f_27)
  return _internal_f_27();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>&
Message4_M7_M16_M28_M35::_internal_f_27() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_27_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M16_M28_M35_M52>*
Message4_M7_M16_M28_M35::_internal_mutable_f_27() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_27_;
}

// -------------------------------------------------------------------

// Message4_M7_M16_M28

// optional string f_0 = 1;
inline bool Message4_M7_M16_M28::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M16_M28::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M7_M16_M28::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M7_M16_M28::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.M28.f_0)
}
inline std::string* Message4_M7_M16_M28::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.f_0)
  return _s;
}
inline const std::string& Message4_M7_M16_M28::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M7_M16_M28::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M7_M16_M28::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M7_M16_M28::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M7_M16_M28::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.f_0)
}

// optional .fleetbench.proto.Message4.M7.M16.M28.M35 f_1 = 2;
inline bool Message4_M7_M16_M28::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M7_M16_M28::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35& Message4_M7_M16_M28::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28_M35* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28_M35&>(::fleetbench::proto::_Message4_M7_M16_M28_M35_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28_M35& Message4_M7_M16_M28::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.M28.f_1)
  return _internal_f_1();
}
inline void Message4_M7_M16_M28::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M16_M28_M35* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.M28.f_1)
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35* Message4_M7_M16_M28::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35* Message4_M7_M16_M28::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.M28.f_1)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35* Message4_M7_M16_M28::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28_M35>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28_M35* Message4_M7_M16_M28::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M7_M16_M28_M35* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.M28.f_1)
  return _msg;
}
inline void Message4_M7_M16_M28::set_allocated_f_1(::fleetbench::proto::Message4_M7_M16_M28_M35* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28_M35*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.M28.f_1)
}

// -------------------------------------------------------------------

// Message4_M7_M16

// optional fixed32 f_0 = 2;
inline bool Message4_M7_M16::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M7_M16::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t Message4_M7_M16::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M16::set_f_0(::uint32_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M16.f_0)
}
inline ::uint32_t Message4_M7_M16::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M16::_internal_set_f_0(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M16.M28 f_2 = 3;
inline bool Message4_M7_M16::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_2_ != nullptr);
  return value;
}
inline void Message4_M7_M16::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ != nullptr) _impl_.f_2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M16_M28& Message4_M7_M16::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16_M28* p = _impl_.f_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16_M28&>(::fleetbench::proto::_Message4_M7_M16_M28_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16_M28& Message4_M7_M16::f_2() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M16.f_2)
  return _internal_f_2();
}
inline void Message4_M7_M16::unsafe_arena_set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_2_);
  }
  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.M16.f_2)
}
inline ::fleetbench::proto::Message4_M7_M16_M28* Message4_M7_M16::release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28* released = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16_M28* Message4_M7_M16::unsafe_arena_release_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.M16.f_2)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28* temp = _impl_.f_2_;
  _impl_.f_2_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16_M28* Message4_M7_M16::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_2_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16_M28>(GetArena());
    _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28*>(p);
  }
  return _impl_.f_2_;
}
inline ::fleetbench::proto::Message4_M7_M16_M28* Message4_M7_M16::mutable_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M16_M28* _msg = _internal_mutable_f_2();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M16.f_2)
  return _msg;
}
inline void Message4_M7_M16::set_allocated_f_2(::fleetbench::proto::Message4_M7_M16_M28* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_2_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_2_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16_M28*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.M16.f_2)
}

// -------------------------------------------------------------------

// Message4_M7_M18_M22_M36

// optional .fleetbench.proto.Message4.M7.M18.M22.M36.E16 f_0 = 1;
inline bool Message4_M7_M18_M22_M36::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M18_M22_M36::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M7_M18_M22_M36_E16 Message4_M7_M18_M22_M36::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M18.M22.M36.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M18_M22_M36::set_f_0(::fleetbench::proto::Message4_M7_M18_M22_M36_E16 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M18.M22.M36.f_0)
}
inline ::fleetbench::proto::Message4_M7_M18_M22_M36_E16 Message4_M7_M18_M22_M36::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M18_M22_M36_E16>(_impl_.f_0_);
}
inline void Message4_M7_M18_M22_M36::_internal_set_f_0(::fleetbench::proto::Message4_M7_M18_M22_M36_E16 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M18_M22_M36_E16_IsValid(value));
  _impl_.f_0_ = value;
}

// -------------------------------------------------------------------

// Message4_M7_M18_M22

// optional bool f_0 = 1;
inline bool Message4_M7_M18_M22::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M18_M22::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Message4_M7_M18_M22::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M18.M22.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M18_M22::set_f_0(bool value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M18.M22.f_0)
}
inline bool Message4_M7_M18_M22::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7_M18_M22::_internal_set_f_0(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M7.M18.M22.M36 f_1 = 2;
inline int Message4_M7_M18_M22::_internal_f_1_size() const {
  return _internal_f_1().size();
}
inline int Message4_M7_M18_M22::f_1_size() const {
  return _internal_f_1_size();
}
inline void Message4_M7_M18_M22::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M18_M22_M36* Message4_M7_M18_M22::mutable_f_1(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M18.M22.f_1)
  return _internal_mutable_f_1()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>* Message4_M7_M18_M22::mutable_f_1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M18.M22.f_1)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_1();
}
inline const ::fleetbench::proto::Message4_M7_M18_M22_M36& Message4_M7_M18_M22::f_1(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M18.M22.f_1)
  return _internal_f_1().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M18_M22_M36* Message4_M7_M18_M22::add_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M18_M22_M36* _add = _internal_mutable_f_1()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M18.M22.f_1)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>& Message4_M7_M18_M22::f_1() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M18.M22.f_1)
  return _internal_f_1();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>&
Message4_M7_M18_M22::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22_M36>*
Message4_M7_M18_M22::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_1_;
}

// -------------------------------------------------------------------

// Message4_M7_M18

// optional .fleetbench.proto.Message4.M7.M18.E8 f_0 = 2;
inline bool Message4_M7_M18::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M7_M18::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::fleetbench::proto::Message4_M7_M18_E8 Message4_M7_M18::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M18.f_0)
  return _internal_f_0();
}
inline void Message4_M7_M18::set_f_0(::fleetbench::proto::Message4_M7_M18_E8 value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.M18.f_0)
}
inline ::fleetbench::proto::Message4_M7_M18_E8 Message4_M7_M18::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M7_M18_E8>(_impl_.f_0_);
}
inline void Message4_M7_M18::_internal_set_f_0(::fleetbench::proto::Message4_M7_M18_E8 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M7_M18_E8_IsValid(value));
  _impl_.f_0_ = value;
}

// repeated .fleetbench.proto.Message4.M7.M18.M22 f_2 = 3;
inline int Message4_M7_M18::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message4_M7_M18::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message4_M7_M18::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M18_M22* Message4_M7_M18::mutable_f_2(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.M18.f_2)
  return _internal_mutable_f_2()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>* Message4_M7_M18::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.M18.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::fleetbench::proto::Message4_M7_M18_M22& Message4_M7_M18::f_2(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.M18.f_2)
  return _internal_f_2().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M18_M22* Message4_M7_M18::add_f_2() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M18_M22* _add = _internal_mutable_f_2()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.M18.f_2)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>& Message4_M7_M18::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.M18.f_2)
  return _internal_f_2();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>&
Message4_M7_M18::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M18_M22>*
Message4_M7_M18::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// -------------------------------------------------------------------

// Message4_M7

// optional float f_0 = 1;
inline bool Message4_M7::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Message4_M7::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float Message4_M7::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.f_0)
  return _internal_f_0();
}
inline void Message4_M7::set_f_0(float value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M7.f_0)
}
inline float Message4_M7::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4_M7::_internal_set_f_0(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional .fleetbench.proto.Message4.M7.M14 f_1 = 3;
inline bool Message4_M7::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_1_ != nullptr);
  return value;
}
inline void Message4_M7::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ != nullptr) _impl_.f_1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M7_M14& Message4_M7::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M14* p = _impl_.f_1_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M14&>(::fleetbench::proto::_Message4_M7_M14_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M14& Message4_M7::f_1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.f_1)
  return _internal_f_1();
}
inline void Message4_M7::unsafe_arena_set_allocated_f_1(::fleetbench::proto::Message4_M7_M14* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_1_);
  }
  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.f_1)
}
inline ::fleetbench::proto::Message4_M7_M14* Message4_M7::release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14* released = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M14* Message4_M7::unsafe_arena_release_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.f_1)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M7_M14* temp = _impl_.f_1_;
  _impl_.f_1_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M14* Message4_M7::_internal_mutable_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M14>(GetArena());
    _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14*>(p);
  }
  return _impl_.f_1_;
}
inline ::fleetbench::proto::Message4_M7_M14* Message4_M7::mutable_f_1() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M7_M14* _msg = _internal_mutable_f_1();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.f_1)
  return _msg;
}
inline void Message4_M7::set_allocated_f_1(::fleetbench::proto::Message4_M7_M14* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_1_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M14*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.f_1)
}

// repeated .fleetbench.proto.Message4.M7.M15 f_3 = 4;
inline int Message4_M7::_internal_f_3_size() const {
  return _internal_f_3().size();
}
inline int Message4_M7::f_3_size() const {
  return _internal_f_3_size();
}
inline void Message4_M7::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_.Clear();
}
inline ::fleetbench::proto::Message4_M7_M15* Message4_M7::mutable_f_3(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.f_3)
  return _internal_mutable_f_3()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>* Message4_M7::mutable_f_3()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.M7.f_3)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_3();
}
inline const ::fleetbench::proto::Message4_M7_M15& Message4_M7::f_3(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.f_3)
  return _internal_f_3().Get(index);
}
inline ::fleetbench::proto::Message4_M7_M15* Message4_M7::add_f_3() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M7_M15* _add = _internal_mutable_f_3()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.M7.f_3)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>& Message4_M7::f_3() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.M7.f_3)
  return _internal_f_3();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>&
Message4_M7::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M7_M15>*
Message4_M7::_internal_mutable_f_3() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_3_;
}

// optional .fleetbench.proto.Message4.M7.M16 f_4 = 6;
inline bool Message4_M7::has_f_4() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_4_ != nullptr);
  return value;
}
inline void Message4_M7::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ != nullptr) _impl_.f_4_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M7_M16& Message4_M7::_internal_f_4() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M16* p = _impl_.f_4_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M16&>(::fleetbench::proto::_Message4_M7_M16_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M16& Message4_M7::f_4() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.f_4)
  return _internal_f_4();
}
inline void Message4_M7::unsafe_arena_set_allocated_f_4(::fleetbench::proto::Message4_M7_M16* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_4_);
  }
  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.f_4)
}
inline ::fleetbench::proto::Message4_M7_M16* Message4_M7::release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M16* released = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M16* Message4_M7::unsafe_arena_release_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.f_4)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M7_M16* temp = _impl_.f_4_;
  _impl_.f_4_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M16* Message4_M7::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_4_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M16>(GetArena());
    _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16*>(p);
  }
  return _impl_.f_4_;
}
inline ::fleetbench::proto::Message4_M7_M16* Message4_M7::mutable_f_4() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M7_M16* _msg = _internal_mutable_f_4();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.f_4)
  return _msg;
}
inline void Message4_M7::set_allocated_f_4(::fleetbench::proto::Message4_M7_M16* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_4_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_4_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M16*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.f_4)
}

// optional .fleetbench.proto.Message4.M7.M18 f_6 = 7;
inline bool Message4_M7::has_f_6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_6_ != nullptr);
  return value;
}
inline void Message4_M7::clear_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ != nullptr) _impl_.f_6_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M7_M18& Message4_M7::_internal_f_6() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7_M18* p = _impl_.f_6_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7_M18&>(::fleetbench::proto::_Message4_M7_M18_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7_M18& Message4_M7::f_6() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M7.f_6)
  return _internal_f_6();
}
inline void Message4_M7::unsafe_arena_set_allocated_f_6(::fleetbench::proto::Message4_M7_M18* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_6_);
  }
  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M18*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.M7.f_6)
}
inline ::fleetbench::proto::Message4_M7_M18* Message4_M7::release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M7_M18* released = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7_M18* Message4_M7::unsafe_arena_release_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M7.f_6)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M7_M18* temp = _impl_.f_6_;
  _impl_.f_6_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7_M18* Message4_M7::_internal_mutable_f_6() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_6_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7_M18>(GetArena());
    _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M18*>(p);
  }
  return _impl_.f_6_;
}
inline ::fleetbench::proto::Message4_M7_M18* Message4_M7::mutable_f_6() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M7_M18* _msg = _internal_mutable_f_6();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M7.f_6)
  return _msg;
}
inline void Message4_M7::set_allocated_f_6(::fleetbench::proto::Message4_M7_M18* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_6_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_6_ = reinterpret_cast<::fleetbench::proto::Message4_M7_M18*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M7.f_6)
}

// -------------------------------------------------------------------

// Message4_M8

// optional string f_0 = 1;
inline bool Message4_M8::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Message4_M8::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message4_M8::f_0() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M8.f_0)
  return _internal_f_0();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Message4_M8::set_f_0(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M8.f_0)
}
inline std::string* Message4_M8::mutable_f_0() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_f_0();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.M8.f_0)
  return _s;
}
inline const std::string& Message4_M8::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_.Get();
}
inline void Message4_M8::_internal_set_f_0(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.f_0_.Set(value, GetArena());
}
inline std::string* Message4_M8::_internal_mutable_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.f_0_.Mutable( GetArena());
}
inline std::string* Message4_M8::release_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.M8.f_0)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.f_0_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.f_0_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Message4_M8::set_allocated_f_0(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.f_0_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.f_0_.IsDefault()) {
          _impl_.f_0_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.M8.f_0)
}

// optional .fleetbench.proto.Message4.M8.E2 f_1 = 3;
inline bool Message4_M8::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Message4_M8::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::fleetbench::proto::Message4_M8_E2 Message4_M8::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M8.f_1)
  return _internal_f_1();
}
inline void Message4_M8::set_f_1(::fleetbench::proto::Message4_M8_E2 value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M8.f_1)
}
inline ::fleetbench::proto::Message4_M8_E2 Message4_M8::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::fleetbench::proto::Message4_M8_E2>(_impl_.f_1_);
}
inline void Message4_M8::_internal_set_f_1(::fleetbench::proto::Message4_M8_E2 value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  assert(::fleetbench::proto::Message4_M8_E2_IsValid(value));
  _impl_.f_1_ = value;
}

// optional bool f_2 = 4;
inline bool Message4_M8::has_f_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Message4_M8::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Message4_M8::f_2() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.M8.f_2)
  return _internal_f_2();
}
inline void Message4_M8::set_f_2(bool value) {
  _internal_set_f_2(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.M8.f_2)
}
inline bool Message4_M8::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline void Message4_M8::_internal_set_f_2(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_ = value;
}

// -------------------------------------------------------------------

// Message4

// optional int64 f_0 = 1;
inline bool Message4::has_f_0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void Message4::clear_f_0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t Message4::f_0() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_0)
  return _internal_f_0();
}
inline void Message4::set_f_0(::int64_t value) {
  _internal_set_f_0(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.f_0)
}
inline ::int64_t Message4::_internal_f_0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_0_;
}
inline void Message4::_internal_set_f_0(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_0_ = value;
}

// optional bool f_1 = 2;
inline bool Message4::has_f_1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Message4::clear_f_1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool Message4::f_1() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_1)
  return _internal_f_1();
}
inline void Message4::set_f_1(bool value) {
  _internal_set_f_1(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.f_1)
}
inline bool Message4::_internal_f_1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_1_;
}
inline void Message4::_internal_set_f_1(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_1_ = value;
}

// repeated int32 f_2 = 3 [packed = true];
inline int Message4::_internal_f_2_size() const {
  return _internal_f_2().size();
}
inline int Message4::f_2_size() const {
  return _internal_f_2_size();
}
inline void Message4::clear_f_2() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_2_.Clear();
}
inline ::int32_t Message4::f_2(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_2)
  return _internal_f_2().Get(index);
}
inline void Message4::set_f_2(int index, ::int32_t value) {
  _internal_mutable_f_2()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.f_2)
}
inline void Message4::add_f_2(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_2()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.f_2)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Message4::f_2() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.f_2)
  return _internal_f_2();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message4::mutable_f_2()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.f_2)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_2();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
Message4::_internal_f_2() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_2_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Message4::_internal_mutable_f_2() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_2_;
}

// optional bool f_3 = 5;
inline bool Message4::has_f_3() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void Message4::clear_f_3() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool Message4::f_3() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_3)
  return _internal_f_3();
}
inline void Message4::set_f_3(bool value) {
  _internal_set_f_3(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.f_3)
}
inline bool Message4::_internal_f_3() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_3_;
}
inline void Message4::_internal_set_f_3(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_3_ = value;
}

// repeated .fleetbench.proto.Message4.E1 f_4 = 6 [packed = true];
inline int Message4::_internal_f_4_size() const {
  return _internal_f_4().size();
}
inline int Message4::f_4_size() const {
  return _internal_f_4_size();
}
inline void Message4::clear_f_4() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_4_.Clear();
}
inline ::fleetbench::proto::Message4_E1 Message4::f_4(int index) const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_4)
  return static_cast<::fleetbench::proto::Message4_E1>(_internal_f_4().Get(index));
}
inline void Message4::set_f_4(int index, ::fleetbench::proto::Message4_E1 value) {
  assert(::fleetbench::proto::Message4_E1_IsValid(value));
  _internal_mutable_f_4()->Set(index, value);
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.f_4)
}
inline void Message4::add_f_4(::fleetbench::proto::Message4_E1 value) {
  assert(::fleetbench::proto::Message4_E1_IsValid(value));
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_f_4()->Add(value);
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.f_4)
}
inline const ::google::protobuf::RepeatedField<int>& Message4::f_4() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.f_4)
  return _internal_f_4();
}
inline ::google::protobuf::RepeatedField<int>* Message4::mutable_f_4()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.f_4)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_4();
}
inline const ::google::protobuf::RepeatedField<int>& Message4::_internal_f_4()
    const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_4_;
}
inline ::google::protobuf::RepeatedField<int>* Message4::_internal_mutable_f_4() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_4_;
}

// optional int32 f_5 = 8;
inline bool Message4::has_f_5() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void Message4::clear_f_5() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t Message4::f_5() const {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_5)
  return _internal_f_5();
}
inline void Message4::set_f_5(::int32_t value) {
  _internal_set_f_5(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:fleetbench.proto.Message4.f_5)
}
inline ::int32_t Message4::_internal_f_5() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_5_;
}
inline void Message4::_internal_set_f_5(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_5_ = value;
}

// optional .fleetbench.proto.Message4.M1 f_8 = 9;
inline bool Message4::has_f_8() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_8_ != nullptr);
  return value;
}
inline void Message4::clear_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ != nullptr) _impl_.f_8_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::fleetbench::proto::Message4_M1& Message4::_internal_f_8() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M1* p = _impl_.f_8_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M1&>(::fleetbench::proto::_Message4_M1_default_instance_);
}
inline const ::fleetbench::proto::Message4_M1& Message4::f_8() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_8)
  return _internal_f_8();
}
inline void Message4::unsafe_arena_set_allocated_f_8(::fleetbench::proto::Message4_M1* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_8_);
  }
  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message4_M1*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.f_8)
}
inline ::fleetbench::proto::Message4_M1* Message4::release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M1* released = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M1* Message4::unsafe_arena_release_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.f_8)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::fleetbench::proto::Message4_M1* temp = _impl_.f_8_;
  _impl_.f_8_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M1* Message4::_internal_mutable_f_8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_8_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M1>(GetArena());
    _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message4_M1*>(p);
  }
  return _impl_.f_8_;
}
inline ::fleetbench::proto::Message4_M1* Message4::mutable_f_8() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::fleetbench::proto::Message4_M1* _msg = _internal_mutable_f_8();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_8)
  return _msg;
}
inline void Message4::set_allocated_f_8(::fleetbench::proto::Message4_M1* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_8_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.f_8_ = reinterpret_cast<::fleetbench::proto::Message4_M1*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.f_8)
}

// repeated .fleetbench.proto.Message4.M2 f_9 = 10;
inline int Message4::_internal_f_9_size() const {
  return _internal_f_9().size();
}
inline int Message4::f_9_size() const {
  return _internal_f_9_size();
}
inline void Message4::clear_f_9() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.f_9_.Clear();
}
inline ::fleetbench::proto::Message4_M2* Message4::mutable_f_9(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_9)
  return _internal_mutable_f_9()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>* Message4::mutable_f_9()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:fleetbench.proto.Message4.f_9)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_f_9();
}
inline const ::fleetbench::proto::Message4_M2& Message4::f_9(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_9)
  return _internal_f_9().Get(index);
}
inline ::fleetbench::proto::Message4_M2* Message4::add_f_9() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::fleetbench::proto::Message4_M2* _add = _internal_mutable_f_9()->Add();
  // @@protoc_insertion_point(field_add:fleetbench.proto.Message4.f_9)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>& Message4::f_9() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:fleetbench.proto.Message4.f_9)
  return _internal_f_9();
}
inline const ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>&
Message4::_internal_f_9() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.f_9_;
}
inline ::google::protobuf::RepeatedPtrField<::fleetbench::proto::Message4_M2>*
Message4::_internal_mutable_f_9() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.f_9_;
}

// optional .fleetbench.proto.Message4.M3 f_10 = 11;
inline bool Message4::has_f_10() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_10_ != nullptr);
  return value;
}
inline void Message4::clear_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ != nullptr) _impl_.f_10_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::fleetbench::proto::Message4_M3& Message4::_internal_f_10() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M3* p = _impl_.f_10_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M3&>(::fleetbench::proto::_Message4_M3_default_instance_);
}
inline const ::fleetbench::proto::Message4_M3& Message4::f_10() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_10)
  return _internal_f_10();
}
inline void Message4::unsafe_arena_set_allocated_f_10(::fleetbench::proto::Message4_M3* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_10_);
  }
  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message4_M3*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.f_10)
}
inline ::fleetbench::proto::Message4_M3* Message4::release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3* released = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M3* Message4::unsafe_arena_release_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.f_10)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::fleetbench::proto::Message4_M3* temp = _impl_.f_10_;
  _impl_.f_10_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M3* Message4::_internal_mutable_f_10() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_10_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M3>(GetArena());
    _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message4_M3*>(p);
  }
  return _impl_.f_10_;
}
inline ::fleetbench::proto::Message4_M3* Message4::mutable_f_10() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::fleetbench::proto::Message4_M3* _msg = _internal_mutable_f_10();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_10)
  return _msg;
}
inline void Message4::set_allocated_f_10(::fleetbench::proto::Message4_M3* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_10_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.f_10_ = reinterpret_cast<::fleetbench::proto::Message4_M3*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.f_10)
}

// optional .fleetbench.proto.Message4.M4 f_11 = 12;
inline bool Message4::has_f_11() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_11_ != nullptr);
  return value;
}
inline void Message4::clear_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ != nullptr) _impl_.f_11_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::fleetbench::proto::Message4_M4& Message4::_internal_f_11() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M4* p = _impl_.f_11_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M4&>(::fleetbench::proto::_Message4_M4_default_instance_);
}
inline const ::fleetbench::proto::Message4_M4& Message4::f_11() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_11)
  return _internal_f_11();
}
inline void Message4::unsafe_arena_set_allocated_f_11(::fleetbench::proto::Message4_M4* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_11_);
  }
  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message4_M4*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.f_11)
}
inline ::fleetbench::proto::Message4_M4* Message4::release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M4* released = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M4* Message4::unsafe_arena_release_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.f_11)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::fleetbench::proto::Message4_M4* temp = _impl_.f_11_;
  _impl_.f_11_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M4* Message4::_internal_mutable_f_11() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_11_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M4>(GetArena());
    _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message4_M4*>(p);
  }
  return _impl_.f_11_;
}
inline ::fleetbench::proto::Message4_M4* Message4::mutable_f_11() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::fleetbench::proto::Message4_M4* _msg = _internal_mutable_f_11();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_11)
  return _msg;
}
inline void Message4::set_allocated_f_11(::fleetbench::proto::Message4_M4* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_11_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.f_11_ = reinterpret_cast<::fleetbench::proto::Message4_M4*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.f_11)
}

// optional .fleetbench.proto.Message4.M5 f_12 = 13;
inline bool Message4::has_f_12() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_12_ != nullptr);
  return value;
}
inline void Message4::clear_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ != nullptr) _impl_.f_12_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::fleetbench::proto::Message4_M5& Message4::_internal_f_12() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M5* p = _impl_.f_12_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M5&>(::fleetbench::proto::_Message4_M5_default_instance_);
}
inline const ::fleetbench::proto::Message4_M5& Message4::f_12() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_12)
  return _internal_f_12();
}
inline void Message4::unsafe_arena_set_allocated_f_12(::fleetbench::proto::Message4_M5* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_12_);
  }
  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message4_M5*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.f_12)
}
inline ::fleetbench::proto::Message4_M5* Message4::release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message4_M5* released = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M5* Message4::unsafe_arena_release_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.f_12)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::fleetbench::proto::Message4_M5* temp = _impl_.f_12_;
  _impl_.f_12_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M5* Message4::_internal_mutable_f_12() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_12_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M5>(GetArena());
    _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message4_M5*>(p);
  }
  return _impl_.f_12_;
}
inline ::fleetbench::proto::Message4_M5* Message4::mutable_f_12() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::fleetbench::proto::Message4_M5* _msg = _internal_mutable_f_12();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_12)
  return _msg;
}
inline void Message4::set_allocated_f_12(::fleetbench::proto::Message4_M5* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_12_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.f_12_ = reinterpret_cast<::fleetbench::proto::Message4_M5*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.f_12)
}

// optional .fleetbench.proto.Message4.M6 f_13 = 14;
inline bool Message4::has_f_13() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_13_ != nullptr);
  return value;
}
inline void Message4::clear_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ != nullptr) _impl_.f_13_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::fleetbench::proto::Message4_M6& Message4::_internal_f_13() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M6* p = _impl_.f_13_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M6&>(::fleetbench::proto::_Message4_M6_default_instance_);
}
inline const ::fleetbench::proto::Message4_M6& Message4::f_13() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_13)
  return _internal_f_13();
}
inline void Message4::unsafe_arena_set_allocated_f_13(::fleetbench::proto::Message4_M6* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_13_);
  }
  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message4_M6*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.f_13)
}
inline ::fleetbench::proto::Message4_M6* Message4::release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message4_M6* released = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M6* Message4::unsafe_arena_release_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.f_13)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::fleetbench::proto::Message4_M6* temp = _impl_.f_13_;
  _impl_.f_13_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M6* Message4::_internal_mutable_f_13() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_13_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M6>(GetArena());
    _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message4_M6*>(p);
  }
  return _impl_.f_13_;
}
inline ::fleetbench::proto::Message4_M6* Message4::mutable_f_13() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::fleetbench::proto::Message4_M6* _msg = _internal_mutable_f_13();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_13)
  return _msg;
}
inline void Message4::set_allocated_f_13(::fleetbench::proto::Message4_M6* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_13_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.f_13_ = reinterpret_cast<::fleetbench::proto::Message4_M6*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.f_13)
}

// optional .fleetbench.proto.Message4.M7 f_14 = 16;
inline bool Message4::has_f_14() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_14_ != nullptr);
  return value;
}
inline void Message4::clear_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ != nullptr) _impl_.f_14_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::fleetbench::proto::Message4_M7& Message4::_internal_f_14() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M7* p = _impl_.f_14_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M7&>(::fleetbench::proto::_Message4_M7_default_instance_);
}
inline const ::fleetbench::proto::Message4_M7& Message4::f_14() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_14)
  return _internal_f_14();
}
inline void Message4::unsafe_arena_set_allocated_f_14(::fleetbench::proto::Message4_M7* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_14_);
  }
  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message4_M7*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.f_14)
}
inline ::fleetbench::proto::Message4_M7* Message4::release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message4_M7* released = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M7* Message4::unsafe_arena_release_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.f_14)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::fleetbench::proto::Message4_M7* temp = _impl_.f_14_;
  _impl_.f_14_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M7* Message4::_internal_mutable_f_14() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_14_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M7>(GetArena());
    _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message4_M7*>(p);
  }
  return _impl_.f_14_;
}
inline ::fleetbench::proto::Message4_M7* Message4::mutable_f_14() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::fleetbench::proto::Message4_M7* _msg = _internal_mutable_f_14();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_14)
  return _msg;
}
inline void Message4::set_allocated_f_14(::fleetbench::proto::Message4_M7* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_14_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.f_14_ = reinterpret_cast<::fleetbench::proto::Message4_M7*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.f_14)
}

// optional .fleetbench.proto.Message4.M8 f_16 = 17;
inline bool Message4::has_f_16() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.f_16_ != nullptr);
  return value;
}
inline void Message4::clear_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_16_ != nullptr) _impl_.f_16_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::fleetbench::proto::Message4_M8& Message4::_internal_f_16() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::fleetbench::proto::Message4_M8* p = _impl_.f_16_;
  return p != nullptr ? *p : reinterpret_cast<const ::fleetbench::proto::Message4_M8&>(::fleetbench::proto::_Message4_M8_default_instance_);
}
inline const ::fleetbench::proto::Message4_M8& Message4::f_16() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:fleetbench.proto.Message4.f_16)
  return _internal_f_16();
}
inline void Message4::unsafe_arena_set_allocated_f_16(::fleetbench::proto::Message4_M8* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.f_16_);
  }
  _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message4_M8*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fleetbench.proto.Message4.f_16)
}
inline ::fleetbench::proto::Message4_M8* Message4::release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message4_M8* released = _impl_.f_16_;
  _impl_.f_16_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::fleetbench::proto::Message4_M8* Message4::unsafe_arena_release_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:fleetbench.proto.Message4.f_16)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::fleetbench::proto::Message4_M8* temp = _impl_.f_16_;
  _impl_.f_16_ = nullptr;
  return temp;
}
inline ::fleetbench::proto::Message4_M8* Message4::_internal_mutable_f_16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.f_16_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::fleetbench::proto::Message4_M8>(GetArena());
    _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message4_M8*>(p);
  }
  return _impl_.f_16_;
}
inline ::fleetbench::proto::Message4_M8* Message4::mutable_f_16() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::fleetbench::proto::Message4_M8* _msg = _internal_mutable_f_16();
  // @@protoc_insertion_point(field_mutable:fleetbench.proto.Message4.f_16)
  return _msg;
}
inline void Message4::set_allocated_f_16(::fleetbench::proto::Message4_M8* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.f_16_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.f_16_ = reinterpret_cast<::fleetbench::proto::Message4_M8*>(value);
  // @@protoc_insertion_point(field_set_allocated:fleetbench.proto.Message4.f_16)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace fleetbench


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_M38_M45_E18_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_M74_E26_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E24_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_M38_M47_M53_M71_E25_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M59_E20_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E22_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_M38_M49_M65_E23_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M3_M9_M25_E11> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M3_M9_M25_E11>() {
  return ::fleetbench::proto::Message4_M3_M9_M25_E11_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M5_M17_E5> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M5_M17_E5>() {
  return ::fleetbench::proto::Message4_M5_M17_E5_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M5_M17_E6> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M5_M17_E6>() {
  return ::fleetbench::proto::Message4_M5_M17_E6_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M5_M17_E7> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M5_M17_E7>() {
  return ::fleetbench::proto::Message4_M5_M17_E7_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M6_M19_M20_E9> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M6_M19_M20_E9>() {
  return ::fleetbench::proto::Message4_M6_M19_M20_E9_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M6_M19_M20_E10> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M6_M19_M20_E10>() {
  return ::fleetbench::proto::Message4_M6_M19_M20_E10_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21>() {
  return ::fleetbench::proto::Message4_M6_M19_M24_M33_M50_M63_E21_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19>() {
  return ::fleetbench::proto::Message4_M6_M19_M27_M31_M42_M54_E19_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M6_M19_M27_E12> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M6_M19_M27_E12>() {
  return ::fleetbench::proto::Message4_M6_M19_M27_E12_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M6_M19_M30_M32_E14> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M6_M19_M30_M32_E14>() {
  return ::fleetbench::proto::Message4_M6_M19_M30_M32_E14_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M6_M19_M30_E13> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M6_M19_M30_E13>() {
  return ::fleetbench::proto::Message4_M6_M19_M30_E13_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27>() {
  return ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M76_E27_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30>() {
  return ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_M85_E30_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29>() {
  return ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M79_M82_E29_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31>() {
  return ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_M80_M83_M84_M86_M87_M88_M89_E31_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28>() {
  return ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_M58_M66_M73_M77_E28_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17>() {
  return ::fleetbench::proto::Message4_M7_M14_M29_M34_M41_E17_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M15_E3> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M15_E3>() {
  return ::fleetbench::proto::Message4_M7_M15_E3_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M15_E4> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M15_E4>() {
  return ::fleetbench::proto::Message4_M7_M15_E4_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M16_M28_M35_E15> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M16_M28_M35_E15>() {
  return ::fleetbench::proto::Message4_M7_M16_M28_M35_E15_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M18_M22_M36_E16> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M18_M22_M36_E16>() {
  return ::fleetbench::proto::Message4_M7_M18_M22_M36_E16_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M7_M18_E8> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M7_M18_E8>() {
  return ::fleetbench::proto::Message4_M7_M18_E8_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_M8_E2> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_M8_E2>() {
  return ::fleetbench::proto::Message4_M8_E2_descriptor();
}
template <>
struct is_proto_enum<::fleetbench::proto::Message4_E1> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::fleetbench::proto::Message4_E1>() {
  return ::fleetbench::proto::Message4_E1_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_protos_2fMessage4_2eproto_2epb_2eh
