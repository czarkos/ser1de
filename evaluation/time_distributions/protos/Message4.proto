// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message4 {
  optional int64 f_0 = 1;
  optional bool f_1 = 2;
  repeated int32 f_2 = 3 [packed = true];
  optional bool f_3 = 5;
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 125;
    E1_CONST_2 = 32;
    E1_CONST_3 = 11;
    E1_CONST_4 = 12;
    E1_CONST_5 = 99;
  }
  repeated E1 f_4 = 6 [packed = true];
  optional int32 f_5 = 8;
  message M1 {
    optional int64 f_0 = 1;
    message M13 {
      optional string f_0 = 1;
    }
    repeated M13 f_1 = 2;
  }
  optional M1 f_8 = 9;
  message M2 {
    optional int32 f_0 = 2;
    optional int64 f_1 = 3;
  }
  repeated M2 f_9 = 10;
  message M3 {
    optional int64 f_0 = 2;
    optional fixed64 f_1 = 3;
    optional int64 f_2 = 4;
    optional string f_3 = 5;
    optional float f_4 = 7;
    optional fixed32 f_5 = 9;
    optional bytes f_6 = 10;
    message M9 {
      optional string f_0 = 2;
      message M21 {
        optional int64 f_0 = 1;
      }
      optional M21 f_2 = 3;
      message M25 {
        optional fixed32 f_0 = 2;
        optional float f_1 = 3;
        optional int32 f_2 = 4;
        optional fixed32 f_3 = 5;
        optional string f_4 = 6;
        optional float f_5 = 7;
        optional int64 f_6 = 8;
        optional bytes f_7 = 10;
        //optional bytes f_7 = 10 [ctype = CORD];
        optional int32 f_8 = 11;
        optional int32 f_9 = 12;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 67;
          E11_CONST_2 = 96;
          E11_CONST_3 = 43;
          E11_CONST_4 = 24;
          E11_CONST_5 = 25;
        }
        optional E11 f_10 = 13;
        message M38 {
          optional double f_0 = 1;
          optional int32 f_1 = 2;
          message M45 {
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 40;
              E18_CONST_2 = 74;
              E18_CONST_3 = 98;
              E18_CONST_4 = 4;
              E18_CONST_5 = 28;
            }
            optional E18 f_0 = 1;
          }
          optional M45 f_2 = 4;
          message M47 {
            optional int64 f_0 = 1;
            message M53 {
              optional int32 f_0 = 1;
              message M71 {
                optional bytes f_0 = 2;
                optional fixed32 f_1 = 4;
                enum E24 {
                  E24_UNSPECIFIED = 0;
                  E24_CONST_1 = 77;
                  E24_CONST_2 = 60;
                  E24_CONST_3 = 56;
                  E24_CONST_4 = 104;
                  E24_CONST_5 = 125;
                }
                optional E24 f_2 = 6;
                optional string f_3 = 9;
                optional string f_4 = 11;
                optional int64 f_5 = 12;
                enum E25 {
                  E25_UNSPECIFIED = 0;
                  E25_CONST_1 = 71;
                  E25_CONST_2 = 51;
                  E25_CONST_3 = 53;
                  E25_CONST_4 = 118;
                  E25_CONST_5 = 124;
                }
                optional E25 f_6 = 14;
                optional bool f_7 = 16;
                optional double f_8 = 17;
                optional bytes f_9 = 20;
                optional float f_10 = 21;
                optional int32 f_11 = 23;
                message M74 {
                  optional string f_0 = 1;
                  optional uint32 f_1 = 2;
                  enum E26 {
                    E26_UNSPECIFIED = 0;
                    E26_CONST_1 = 116;
                    E26_CONST_2 = 48;
                    E26_CONST_3 = 67;
                    E26_CONST_4 = 42;
                    E26_CONST_5 = 110;
                  }
                  optional E26 f_2 = 4;
                  optional int32 f_3 = 5;
                  optional int64 f_4 = 7;
                }
                repeated M74 f_23 = 24;
              }
              optional M71 f_1 = 2;
            }
            optional M53 f_1 = 4;
            message M60 {
              optional int64 f_0 = 1;
              optional int32 f_1 = 3;
              optional double f_2 = 4;
              optional fixed32 f_3 = 5;
              optional uint64 f_4 = 9;
              message M67 {
                optional string f_0 = 1;
              }
              optional M67 f_9 = 10;
            }
            optional M60 f_4 = 5;
          }
          repeated M47 f_4 = 7;
          message M48 {
            optional float f_0 = 1;
          }
          repeated M48 f_7 = 8;
          message M49 {
            optional string f_0 = 2;
            message M59 {
              enum E20 {
                E20_UNSPECIFIED = 0;
                E20_CONST_1 = 73;
                E20_CONST_2 = 6;
                E20_CONST_3 = 80;
                E20_CONST_4 = 84;
                E20_CONST_5 = 33;
              }
              optional E20 f_0 = 2;
            }
            optional M59 f_2 = 4;
            message M64 {
              optional uint64 f_0 = 2;
            }
            optional M64 f_4 = 5;
            message M65 {
              optional fixed64 f_0 = 1;
              enum E22 {
                E22_UNSPECIFIED = 0;
                E22_CONST_1 = 11;
                E22_CONST_2 = 126;
                E22_CONST_3 = 86;
                E22_CONST_4 = 56;
                E22_CONST_5 = 61;
              }
              optional E22 f_1 = 2;
              optional int64 f_2 = 4;
              optional int64 f_3 = 5;
              optional uint64 f_4 = 6;
              optional int64 f_5 = 7;
              repeated int32 f_6 = 9 [packed = true];
              enum E23 {
                E23_UNSPECIFIED = 0;
                E23_CONST_1 = 106;
                E23_CONST_2 = 41;
                E23_CONST_3 = 3;
                E23_CONST_4 = 40;
                E23_CONST_5 = 28;
              }
              optional E23 f_7 = 10;
              optional fixed32 f_8 = 12;
              message M69 {
                optional int64 f_0 = 3;
                message M72 {
                  optional fixed32 f_0 = 3;
                  optional float f_1 = 5;
                }
                optional M72 f_3 = 4;
                message M75 {
                  optional int32 f_0 = 2;
                  optional int64 f_1 = 3;
                }
                optional M75 f_4 = 7;
              }
              repeated M69 f_12 = 13;
            }
            optional M65 f_5 = 6;
          }
          optional M49 f_8 = 9;
        }
        optional M38 f_13 = 17;
      }
      optional M25 f_3 = 4;
    }
    optional M9 f_10 = 11;
  }
  optional M3 f_10 = 11;
  message M4 {
    optional bytes f_0 = 2;
    //optional bytes f_0 = 2 [ctype = CORD];
    message M12 {
      optional double f_0 = 3;
      message M23 {
        optional float f_0 = 3;
        message M37 {
          optional float f_0 = 2;
        }
        optional M37 f_3 = 4;
      }
      repeated M23 f_3 = 4;
    }
    repeated M12 f_2 = 4;
  }
  optional M4 f_11 = 12;
  message M5 {
    optional int32 f_0 = 1;
    message M10 {
      optional int64 f_0 = 1;
    }
    repeated M10 f_1 = 2;
    message M17 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 18;
        E5_CONST_2 = 94;
        E5_CONST_3 = 114;
        E5_CONST_4 = 103;
        E5_CONST_5 = 122;
      }
      optional E5 f_0 = 2;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 116;
        E6_CONST_2 = 94;
        E6_CONST_3 = 89;
        E6_CONST_4 = 11;
        E6_CONST_5 = 9;
      }
      optional E6 f_1 = 4;
      optional int64 f_2 = 5;
      optional float f_3 = 6;
      optional string f_4 = 7;
      optional int32 f_5 = 8;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 4;
        E7_CONST_2 = 36;
        E7_CONST_3 = 121;
        E7_CONST_4 = 96;
        E7_CONST_5 = 70;
      }
      optional E7 f_6 = 9;
    }
    optional M17 f_2 = 3;
  }
  optional M5 f_12 = 13;
  message M6 {
    optional int32 f_0 = 1;
    message M11 {
      optional fixed32 f_0 = 1;
    }
    optional M11 f_1 = 2;
    message M19 {
      optional bytes f_0 = 1;
      //optional bytes f_0 = 1 [ctype = CORD];
      optional int32 f_1 = 2;
      optional int64 f_2 = 3;
      message M20 {
        optional double f_0 = 1;
        optional int64 f_1 = 3;
        optional string f_2 = 4;
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 55;
          E9_CONST_2 = 97;
          E9_CONST_3 = 40;
          E9_CONST_4 = 45;
          E9_CONST_5 = 9;
        }
        optional E9 f_3 = 5;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 125;
          E10_CONST_2 = 83;
          E10_CONST_3 = 63;
          E10_CONST_4 = 14;
          E10_CONST_5 = 75;
        }
        optional E10 f_4 = 6;
      }
      optional M20 f_3 = 4;
      message M24 {
        optional fixed32 f_0 = 1;
        message M33 {
          optional int32 f_0 = 2;
          message M44 {
            optional string f_0 = 1;
            message M55 {
              optional double f_0 = 1;
            }
            repeated M55 f_1 = 4;
            message M56 {
              optional uint32 f_0 = 1;
            }
            optional M56 f_4 = 10;
          }
          optional M44 f_2 = 3;
          message M50 {
            optional int64 f_0 = 1;
            message M63 {
              enum E21 {
                E21_UNSPECIFIED = 0;
                E21_CONST_1 = 122;
                E21_CONST_2 = 26;
                E21_CONST_3 = 3;
                E21_CONST_4 = 106;
                E21_CONST_5 = 37;
              }
              optional E21 f_0 = 1;
            }
            optional M63 f_1 = 3;
          }
          optional M50 f_3 = 4;
        }
        optional M33 f_1 = 2;
      }
      repeated M24 f_4 = 5;
      message M26 {
        optional int32 f_0 = 2;
      }
      optional M26 f_5 = 6;
      message M27 {
        repeated float f_0 = 1 [packed = true];
        optional float f_1 = 2;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 113;
          E12_CONST_2 = 50;
          E12_CONST_3 = 87;
          E12_CONST_4 = 95;
          E12_CONST_5 = 23;
        }
        optional E12 f_2 = 3;
        message M31 {
          optional int32 f_0 = 4;
          message M42 {
            optional float f_0 = 1;
            message M54 {
              enum E19 {
                E19_UNSPECIFIED = 0;
                E19_CONST_1 = 22;
                E19_CONST_2 = 39;
                E19_CONST_3 = 56;
                E19_CONST_4 = 83;
                E19_CONST_5 = 117;
              }
              optional E19 f_0 = 1;
            }
            optional M54 f_1 = 2;
          }
          optional M42 f_4 = 6;
        }
        optional M31 f_3 = 5;
      }
      repeated M27 f_6 = 7;
      message M30 {
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 27;
          E13_CONST_2 = 121;
          E13_CONST_3 = 52;
          E13_CONST_4 = 42;
          E13_CONST_5 = 93;
        }
        optional E13 f_0 = 1;
        optional int64 f_1 = 2;
        optional bool f_2 = 4;
        optional string f_3 = 6;
        optional int64 f_4 = 8;
        optional uint64 f_5 = 9;
        message M32 {
          optional string f_0 = 3;
          optional int32 f_1 = 4;
          optional string f_2 = 5;
          optional bool f_3 = 7;
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 112;
            E14_CONST_2 = 67;
            E14_CONST_3 = 52;
            E14_CONST_4 = 23;
            E14_CONST_5 = 51;
          }
          optional E14 f_4 = 9;
          optional int32 f_5 = 11;
          optional int64 f_6 = 13;
        }
        optional M32 f_9 = 10;
        message M39 {
          optional bool f_0 = 1;
          optional fixed64 f_1 = 3;
          optional bool f_2 = 5;
          optional string f_3 = 6;
          optional bool f_4 = 7;
        }
        repeated M39 f_10 = 11;
      }
      optional M30 f_7 = 8;
    }
    optional M19 f_2 = 3;
  }
  optional M6 f_13 = 14;
  message M7 {
    optional float f_0 = 1;
    message M14 {
      optional string f_0 = 1;
      message M29 {
        optional fixed32 f_0 = 3;
        optional int64 f_1 = 4;
        message M34 {
          optional int32 f_0 = 1;
          optional int32 f_1 = 2;
          optional string f_2 = 4;
          message M41 {
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 2;
              E17_CONST_2 = 119;
              E17_CONST_3 = 97;
              E17_CONST_4 = 30;
              E17_CONST_5 = 29;
            }
            optional E17 f_0 = 1;
            message M58 {
              optional fixed64 f_0 = 1;
              optional string f_1 = 3;
              optional bytes f_2 = 4;
              message M66 {
                optional float f_0 = 3;
                message M73 {
                  optional int64 f_0 = 3;
                  message M76 {
                    enum E27 {
                      E27_UNSPECIFIED = 0;
                      E27_CONST_1 = 16;
                      E27_CONST_2 = 42;
                      E27_CONST_3 = 94;
                      E27_CONST_4 = 41;
                      E27_CONST_5 = 18;
                    }
                    optional E27 f_0 = 2;
                  }
                  optional M76 f_3 = 4;
                  message M77 {
                    optional string f_0 = 2;
                    optional string f_1 = 3;
                    optional bytes f_2 = 5;
                    optional fixed32 f_3 = 6;
                    optional bool f_4 = 7;
                    optional string f_5 = 9;
                    enum E28 {
                      E28_UNSPECIFIED = 0;
                      E28_CONST_1 = 84;
                      E28_CONST_2 = 72;
                      E28_CONST_3 = 77;
                      E28_CONST_4 = 43;
                      E28_CONST_5 = 107;
                    }
                    optional E28 f_6 = 10;
                    optional int64 f_7 = 11;
                    message M78 {
                      optional double f_0 = 2;
                      optional float f_1 = 4;
                      message M81 {
                        optional string f_0 = 1;
                      }
                      optional M81 f_4 = 6;
                    }
                    optional M78 f_11 = 12;
                    message M79 {
                      optional string f_0 = 1;
                      message M82 {
                        enum E29 {
                          E29_UNSPECIFIED = 0;
                          E29_CONST_1 = 84;
                          E29_CONST_2 = 100;
                          E29_CONST_3 = 32;
                          E29_CONST_4 = 31;
                          E29_CONST_5 = 101;
                        }
                        optional E29 f_0 = 1;
                        message M85 {
                          enum E30 {
                            E30_UNSPECIFIED = 0;
                            E30_CONST_1 = 123;
                            E30_CONST_2 = 2;
                            E30_CONST_3 = 110;
                            E30_CONST_4 = 81;
                            E30_CONST_5 = 21;
                          }
                          optional E30 f_0 = 1;
                        }
                        optional M85 f_1 = 3;
                      }
                      repeated M82 f_1 = 2;
                    }
                    optional M79 f_12 = 13;
                    message M80 {
                      optional int64 f_0 = 2;
                      message M83 {
                        optional int64 f_0 = 2;
                        message M84 {
                          optional string f_0 = 2;
                          message M86 {
                            optional string f_0 = 1;
                            message M87 {
                              optional float f_0 = 2;
                              message M88 {
                                optional fixed64 f_0 = 1;
                                message M89 {
                                  enum E31 {
                                    E31_UNSPECIFIED = 0;
                                    E31_CONST_1 = 24;
                                    E31_CONST_2 = 113;
                                    E31_CONST_3 = 97;
                                    E31_CONST_4 = 20;
                                    E31_CONST_5 = 58;
                                  }
                                  optional E31 f_0 = 1;
                                  message M90 {
                                    optional int32 f_0 = 2;
                                    message M91 {
                                      optional int64 f_0 = 2;
                                    }
                                    optional M91 f_2 = 3;
                                    message M92 {
                                      optional int32 f_0 = 1;
                                    }
                                    repeated M92 f_3 = 4;
                                  }
                                  optional M90 f_1 = 2;
                                }
                                optional M89 f_1 = 2;
                              }
                              optional M88 f_2 = 4;
                            }
                            optional M87 f_1 = 3;
                          }
                          repeated M86 f_2 = 3;
                        }
                        repeated M84 f_2 = 4;
                      }
                      repeated M83 f_2 = 3;
                    }
                    repeated M80 f_13 = 14;
                  }
                  repeated M77 f_4 = 6;
                }
                optional M73 f_3 = 5;
              }
              optional M66 f_4 = 5;
            }
            repeated M58 f_1 = 2;
            message M61 {
              optional float f_0 = 1;
            }
            repeated M61 f_2 = 4;
          }
          optional M41 f_4 = 5;
        }
        optional M34 f_4 = 5;
      }
      optional M29 f_1 = 2;
    }
    optional M14 f_1 = 3;
    message M15 {
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 118;
        E3_CONST_2 = 6;
        E3_CONST_3 = 19;
        E3_CONST_4 = 77;
        E3_CONST_5 = 45;
      }
      optional E3 f_0 = 1;
      optional int64 f_1 = 2;
      optional int64 f_2 = 3;
      optional uint64 f_3 = 4;
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 112;
        E4_CONST_2 = 51;
        E4_CONST_3 = 48;
        E4_CONST_4 = 38;
        E4_CONST_5 = 68;
      }
      optional E4 f_4 = 6;
      optional string f_5 = 8;
    }
    repeated M15 f_3 = 4;
    message M16 {
      optional fixed32 f_0 = 2;
      message M28 {
        optional string f_0 = 1 ;
        message M35 {
          optional uint64 f_0 = 2;
          optional string f_1 = 3;
          optional string f_2 = 6;
          optional float f_3 = 7;
          optional string f_4 = 9;
          optional bool f_5 = 11;
          optional fixed32 f_6 = 14;
          optional bytes f_7 = 15;
          //optional bytes f_7 = 15 [ctype = CORD];
          optional fixed32 f_8 = 17;
          optional int64 f_9 = 20;
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 28;
            E15_CONST_2 = 96;
            E15_CONST_3 = 35;
            E15_CONST_4 = 57;
            E15_CONST_5 = 71;
          }
          optional E15 f_10 = 21;
          message M40 {
            optional bytes f_0 = 1;
            //optional bytes f_0 = 1 [ctype = CORD];
            optional bool f_1 = 2;
            optional bool f_2 = 3;
            optional uint32 f_3 = 4;
            optional float f_4 = 5;
            optional uint32 f_5 = 7;
            optional int32 f_6 = 8;
          }
          optional M40 f_21 = 23;
          message M43 {
            optional string f_0 = 2;
            repeated int32 f_1 = 3 [packed = true];
            optional bytes f_2 = 5;
            optional int64 f_3 = 6;
            optional int32 f_4 = 7;
            message M62 {
              optional int32 f_0 = 1;
              optional fixed32 f_1 = 2;
              message M68 {
                optional bool f_0 = 1;
              }
              optional M68 f_2 = 3;
              message M70 {
                optional string f_0 = 1;
              }
              repeated M70 f_3 = 4;
            }
            optional M62 f_7 = 9;
          }
          optional M43 f_23 = 25;
          message M46 {
            optional int64 f_0 = 1;
          }
          optional M46 f_25 = 26;
          message M51 {
            optional int32 f_0 = 1;
            optional string f_1 = 5;
            optional string f_2 = 6;
          }
          optional M51 f_26 = 27;
          message M52 {
            optional int64 f_0 = 2;
            message M57 {
              optional bytes f_0 = 1;
            }
            optional M57 f_2 = 3;
          }
          repeated M52 f_27 = 28;
        }
        optional M35 f_1 = 2;
      }
      optional M28 f_2 = 3;
    }
    optional M16 f_4 = 6;
    message M18 {
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 68;
        E8_CONST_2 = 96;
        E8_CONST_3 = 18;
        E8_CONST_4 = 108;
        E8_CONST_5 = 79;
      }
      optional E8 f_0 = 2;
      message M22 {
        optional bool f_0 = 1;
        message M36 {
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 90;
            E16_CONST_2 = 116;
            E16_CONST_3 = 77;
            E16_CONST_4 = 28;
            E16_CONST_5 = 33;
          }
          optional E16 f_0 = 1;
        }
        repeated M36 f_1 = 2;
      }
      repeated M22 f_2 = 3;
    }
    optional M18 f_6 = 7;
  }
  optional M7 f_14 = 16;
  message M8 {
    optional string f_0 = 1;
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 110;
      E2_CONST_2 = 23;
      E2_CONST_3 = 102;
      E2_CONST_4 = 50;
      E2_CONST_5 = 2;
    }
    optional E2 f_1 = 3;
    optional bool f_2 = 4;
  }
  optional M8 f_16 = 17;
}
