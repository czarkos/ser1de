// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message1 {
  optional int32 f_0 = 1;
  optional int32 f_1 = 3;
  optional float f_2 = 4;
  optional int32 f_3 = 5;
  optional int64 f_4 = 6;
  repeated string f_5 = 7;
  message M1 {
    optional bool f_0 = 1;
    message M21 {
      optional string f_0 = 1;
    }
    optional M21 f_1 = 3;
    message M25 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 67;
        E4_CONST_2 = 46;
        E4_CONST_3 = 53;
        E4_CONST_4 = 100;
        E4_CONST_5 = 54;
      }
      optional E4 f_0 = 1;
      message M31 {
        optional uint32 f_0 = 1;
        optional int64 f_1 = 2;
        optional float f_2 = 3;
        optional int64 f_3 = 4;
        optional string f_4 = 5;
        optional string f_5 = 7;
        optional float f_6 = 8;
        optional int64 f_7 = 9;
        optional int64 f_8 = 10;
        optional bytes f_9 = 11;
        optional int64 f_10 = 13;
        optional int32 f_11 = 14;
        optional float f_12 = 15;
        message M51 {
          optional bool f_0 = 1;
          message M65 {
            optional int64 f_0 = 1;
            message M76 {
              optional double f_0 = 1;
            }
            repeated M76 f_1 = 2;
          }
          optional M65 f_1 = 3;
        }
        optional M51 f_15 = 16;
      }
      optional M31 f_1 = 2;
    }
    repeated M25 f_3 = 4;
    message M26 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 109;
        E5_CONST_2 = 110;
        E5_CONST_3 = 108;
        E5_CONST_4 = 33;
        E5_CONST_5 = 66;
      }
      optional E5 f_0 = 1;
      optional string f_1 = 2;
      optional string f_2 = 3;
      optional float f_3 = 4;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 41;
        E6_CONST_2 = 60;
        E6_CONST_3 = 90;
        E6_CONST_4 = 104;
        E6_CONST_5 = 108;
      }
      optional E6 f_4 = 5;
    }
    optional M26 f_4 = 5;
  }
  optional M1 f_7 = 8;
  message M2 {
    optional int64 f_0 = 1;
    message M22 {
      optional int32 f_0 = 1;
      message M34 {
        optional int64 f_0 = 1;
        message M44 {
          optional float f_0 = 4;
          optional bool f_1 = 6;
          optional int32 f_2 = 7;
          optional float f_3 = 9;
          optional string f_4 = 11;
          optional int64 f_5 = 13;
          optional string f_6 = 15;
          optional int64 f_7 = 16;
        }
        optional M44 f_1 = 2;
        message M48 {
          optional int32 f_0 = 1;
          message M60 {
            optional bool f_0 = 2;
            message M69 {
              optional bool f_0 = 2;
              optional int64 f_1 = 3;
            }
            optional M69 f_2 = 3;
          }
          repeated M60 f_1 = 3;
        }
        repeated M48 f_2 = 4;
      }
      optional M34 f_1 = 2;
    }
    repeated M22 f_1 = 2;
    message M29 {
      optional float f_0 = 4;
      message M35 {
        optional bool f_0 = 1;
      }
      optional M35 f_4 = 6;
    }
    repeated M29 f_2 = 3;
  }
  optional M2 f_8 = 9;
  message M3 {
    optional string f_0 = 1;
  }
  optional M3 f_9 = 11;
  message M4 {
    repeated int64 f_0 = 2 [packed = true];
    message M28 {
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 126;
        E7_CONST_2 = 112;
        E7_CONST_3 = 18;
        E7_CONST_4 = 80;
        E7_CONST_5 = 109;
      }
      optional E7 f_0 = 1;
    }
    optional M28 f_2 = 4;
  }
  repeated M4 f_11 = 12;
  message M5 {
    optional fixed64 f_0 = 2;
  }
  repeated M5 f_12 = 13;
  message M6 {
    optional int64 f_0 = 1;
    message M16 {
      optional bool f_0 = 1;
      message M38 {
        optional int32 f_0 = 1;
        optional string f_1 = 3;
        message M46 {
          optional int64 f_0 = 3;
          message M55 {
            optional bytes f_0 = 2;
            optional int64 f_1 = 3;
            enum E22 {
              E22_UNSPECIFIED = 0;
              E22_CONST_1 = 89;
              E22_CONST_2 = 70;
              E22_CONST_3 = 62;
              E22_CONST_4 = 68;
              E22_CONST_5 = 71;
            }
            optional E22 f_2 = 4;
            optional bool f_3 = 5;
          }
          optional M55 f_3 = 4;
        }
        optional M46 f_3 = 4;
        message M50 {
          optional string f_0 = 4;
          message M64 {
            enum E23 {
              E23_UNSPECIFIED = 0;
              E23_CONST_1 = 78;
              E23_CONST_2 = 37;
              E23_CONST_3 = 54;
              E23_CONST_4 = 1;
              E23_CONST_5 = 57;
            }
            optional E23 f_0 = 2;
            repeated int64 f_1 = 3 [packed = true];
            optional double f_2 = 5;
            optional int64 f_3 = 6;
            optional int32 f_4 = 7;
            optional uint64 f_5 = 8;
            optional float f_6 = 9;
          }
          repeated M64 f_4 = 5;
        }
        optional M50 f_4 = 5;
      }
      optional M38 f_1 = 2;
    }
    optional M16 f_1 = 4;
    message M24 {
      enum E2 {
        E2_UNSPECIFIED = 0;
        E2_CONST_1 = 9;
        E2_CONST_2 = 54;
        E2_CONST_3 = 14;
        E2_CONST_4 = 80;
        E2_CONST_5 = 30;
      }
      optional E2 f_0 = 1;
      enum E3 {
        E3_UNSPECIFIED = 0;
        E3_CONST_1 = 71;
        E3_CONST_2 = 32;
        E3_CONST_3 = 12;
        E3_CONST_4 = 119;
        E3_CONST_5 = 31;
      }
      optional E3 f_1 = 3;
      optional double f_2 = 5;
    }
    optional M24 f_4 = 6;
    message M27 {
      optional bytes f_0 = 1;
      //optional bytes f_0 = 1 [ctype = CORD];
    }
    optional M27 f_6 = 9;
  }
  optional M6 f_13 = 14;
  message M7 {
    optional float f_0 = 1;
    message M14 {
      optional uint64 f_0 = 2;
      message M41 {
        optional string f_0 = 2;
        message M47 {
          optional int32 f_0 = 2;
          message M63 {
            optional int64 f_0 = 2;
            message M70 {
              repeated float f_0 = 2 [packed = true];
              message M88 {
                optional int32 f_0 = 1;
              }
              optional M88 f_2 = 3;
              message M89 {
                optional float f_0 = 1;
                message M95 {
                  optional int32 f_0 = 3;
                  message M101 {
                    optional int64 f_0 = 1;
                    message M105 {
                      optional string f_0 = 2;
                      message M109 {
                        optional int32 f_0 = 1;
                      }
                      optional M109 f_2 = 3;
                      message M110 {
                        optional fixed64 f_0 = 1;
                        message M111 {
                          optional int32 f_0 = 1;
                          message M113 {
                            optional int32 f_0 = 2;
                            optional uint64 f_1 = 3;
                            message M114 {
                              optional bool f_0 = 2;
                              message M115 {
                                optional float f_0 = 2;
                                message M116 {
                                  optional bool f_0 = 2;
                                  message M117 {
                                    enum E49 {
                                      E49_UNSPECIFIED = 0;
                                      E49_CONST_1 = 69;
                                      E49_CONST_2 = 105;
                                      E49_CONST_3 = 93;
                                      E49_CONST_4 = 75;
                                      E49_CONST_5 = 43;
                                    }
                                    optional E49 f_0 = 2;
                                    message M118 {
                                      optional int64 f_0 = 2;
                                    }
                                    optional M118 f_2 = 4;
                                    message M119 {
                                      optional string f_0 = 1;
                                    }
                                    optional M119 f_4 = 5;
                                  }
                                  optional M117 f_2 = 4;
                                }
                                repeated M116 f_2 = 3;
                              }
                              optional M115 f_2 = 3;
                            }
                            optional M114 f_3 = 6;
                          }
                          repeated M113 f_1 = 2;
                        }
                        optional M111 f_1 = 2;
                        message M112 {
                          optional bytes f_0 = 1;
                        }
                        repeated M112 f_2 = 3;
                      }
                      optional M110 f_3 = 4;
                    }
                    repeated M105 f_1 = 3;
                    message M107 {
                      optional int32 f_0 = 3;
                      optional bool f_1 = 5;
                      optional bool f_2 = 6;
                      optional uint64 f_3 = 8;
                      message M108 {
                        optional uint64 f_0 = 1;
                      }
                      optional M108 f_8 = 9;
                    }
                    repeated M107 f_3 = 5;
                  }
                  optional M101 f_3 = 4;
                  message M103 {
                    optional bytes f_0 = 2;
                    optional string f_1 = 3;
                  }
                  repeated M103 f_4 = 6;
                  message M104 {
                    optional bytes f_0 = 1;
                  }
                  optional M104 f_6 = 8;
                }
                optional M95 f_1 = 2;
                message M99 {
                  optional int32 f_0 = 1;
                }
                optional M99 f_2 = 4;
              }
              repeated M89 f_3 = 4;
            }
            optional M70 f_2 = 4;
            message M74 {
              optional float f_0 = 1;
              optional int64 f_1 = 3;
            }
            repeated M74 f_4 = 5;
            message M79 {
              optional fixed32 f_0 = 1;
            }
            repeated M79 f_5 = 7;
          }
          optional M63 f_2 = 3;
        }
        repeated M47 f_2 = 3;
        message M52 {
          optional int32 f_0 = 3;
          message M66 {
            optional uint64 f_0 = 4;
            optional float f_1 = 5;
            optional string f_2 = 6;
          }
          optional M66 f_3 = 4;
        }
        optional M52 f_3 = 4;
      }
      optional M41 f_2 = 4;
    }
    repeated M14 f_1 = 3;
    message M18 {
      optional int64 f_0 = 1;
      message M32 {
        optional int32 f_0 = 1;
        message M53 {
          optional int32 f_0 = 1;
          optional string f_1 = 2;
          enum E21 {
            E21_UNSPECIFIED = 0;
            E21_CONST_1 = 9;
            E21_CONST_2 = 3;
            E21_CONST_3 = 64;
            E21_CONST_4 = 29;
            E21_CONST_5 = 124;
          }
          optional E21 f_2 = 3;
          optional float f_3 = 4;
          optional int32 f_4 = 7;
          optional int64 f_5 = 8;
          optional int64 f_6 = 9;
          optional string f_7 = 12;
          optional string f_8 = 13;
          optional int32 f_9 = 14;
          optional string f_10 = 15;
          optional int64 f_11 = 17;
          optional int64 f_12 = 19;
          optional int32 f_13 = 20;
          optional int64 f_14 = 21;
        }
        optional M53 f_1 = 2;
      }
      repeated M32 f_1 = 3;
      message M39 {
        enum E8 {
          E8_UNSPECIFIED = 0;
          E8_CONST_1 = 88;
          E8_CONST_2 = 20;
          E8_CONST_3 = 87;
          E8_CONST_4 = 98;
          E8_CONST_5 = 23;
        }
        optional E8 f_0 = 1;
        message M45 {
          enum E20 {
            E20_UNSPECIFIED = 0;
            E20_CONST_1 = 60;
            E20_CONST_2 = 23;
            E20_CONST_3 = 72;
            E20_CONST_4 = 61;
            E20_CONST_5 = 3;
          }
          optional E20 f_0 = 2;
          message M54 {
            optional string f_0 = 1;
            message M77 {
              optional int64 f_0 = 1;
            }
            repeated M77 f_1 = 2;
            message M80 {
              enum E24 {
                E24_UNSPECIFIED = 0;
                E24_CONST_1 = 63;
                E24_CONST_2 = 112;
                E24_CONST_3 = 119;
                E24_CONST_4 = 109;
                E24_CONST_5 = 104;
              }
              optional E24 f_0 = 1;
              message M91 {
                optional float f_0 = 3;
                optional int64 f_1 = 5;
                repeated bytes f_2 = 6 ;
                message M96 {
                  optional int64 f_0 = 5;
                }
                optional M96 f_6 = 7;
                message M97 {
                  optional string f_0 = 1;
                  message M102 {
                    repeated bytes f_0 = 1;
                    message M106 {
                      optional int64 f_0 = 1;
                    }
                    optional M106 f_1 = 2;
                  }
                  optional M102 f_1 = 3;
                }
                optional M97 f_7 = 8;
              }
              repeated M91 f_1 = 2;
              message M94 {
                optional int64 f_0 = 3;
              }
              repeated M94 f_2 = 4;
            }
            optional M80 f_2 = 3;
            message M82 {
              optional string f_0 = 1;
              message M93 {
                enum E29 {
                  E29_UNSPECIFIED = 0;
                  E29_CONST_1 = 86;
                  E29_CONST_2 = 49;
                  E29_CONST_3 = 65;
                  E29_CONST_4 = 67;
                  E29_CONST_5 = 110;
                }
                optional E29 f_0 = 1;
              }
              optional M93 f_1 = 4;
            }
            repeated M82 f_3 = 4;
          }
          repeated M54 f_2 = 3;
          message M59 {
            optional int64 f_0 = 2;
            message M67 {
              optional uint32 f_0 = 2;
              message M85 {
                enum E26 {
                  E26_UNSPECIFIED = 0;
                  E26_CONST_1 = 112;
                  E26_CONST_2 = 25;
                  E26_CONST_3 = 35;
                  E26_CONST_4 = 109;
                  E26_CONST_5 = 118;
                }
                optional E26 f_0 = 1;
                optional int32 f_1 = 2;
                optional double f_2 = 4;
                message M98 {
                  optional int64 f_0 = 3;
                  optional string f_1 = 4;
                }
                optional M98 f_4 = 6;
                message M100 {
                  optional uint64 f_0 = 1;
                  optional int32 f_1 = 2;
                  enum E30 {
                    E30_UNSPECIFIED = 0;
                    E30_CONST_1 = 59;
                    E30_CONST_2 = 64;
                    E30_CONST_3 = 14;
                    E30_CONST_4 = 48;
                    E30_CONST_5 = 11408;
                  }
                  optional E30 f_2 = 3;
                  optional float f_3 = 4;
                  optional int64 f_4 = 5;
                  optional int64 f_5 = 7;
                  enum E31 {
                    E31_UNSPECIFIED = 0;
                    E31_CONST_1 = 66;
                    E31_CONST_2 = 101;
                    E31_CONST_3 = 11;
                    E31_CONST_4 = 65;
                    E31_CONST_5 = 103;
                  }
                  optional E31 f_6 = 8;
                  enum E32 {
                    E32_UNSPECIFIED = 0;
                    E32_CONST_1 = 44;
                    E32_CONST_2 = 106;
                    E32_CONST_3 = 100;
                    E32_CONST_4 = 9;
                    E32_CONST_5 = 70;
                  }
                  optional E32 f_7 = 9;
                  optional bytes f_8 = 10;
                  optional string f_9 = 12;
                  optional bytes f_10 = 13;
                  //optional bytes f_10 = 13 [ctype = CORD];
                  optional uint32 f_11 = 16;
                  optional string f_12 = 17;
                  optional bool f_13 = 19;
                  optional int64 f_14 = 22;
                  enum E33 {
                    E33_UNSPECIFIED = 0;
                    E33_CONST_1 = 57;
                    E33_CONST_2 = 104;
                    E33_CONST_3 = 50;
                    E33_CONST_4 = 53;
                    E33_CONST_5 = 62;
                  }
                  optional E33 f_15 = 23;
                  optional fixed64 f_16 = 24;
                  optional int32 f_17 = 25;
                  optional fixed32 f_18 = 26;
                  optional int32 f_19 = 28;
                  optional double f_20 = 30;
                  optional fixed32 f_21 = 31;
                  enum E34 {
                    E34_UNSPECIFIED = 0;
                    E34_CONST_1 = 49;
                    E34_CONST_2 = 94;
                    E34_CONST_3 = 16;
                    E34_CONST_4 = 62;
                    E34_CONST_5 = 32;
                  }
                  optional E34 f_22 = 32;
                  optional uint32 f_23 = 33;
                  optional string f_24 = 34;
                  optional string f_25 = 36;
                  enum E35 {
                    E35_UNSPECIFIED = 0;
                    E35_CONST_1 = 123;
                    E35_CONST_2 = 105;
                    E35_CONST_3 = 94;
                    E35_CONST_4 = 45;
                    E35_CONST_5 = 122;
                  }
                  optional E35 f_26 = 37;
                  optional uint64 f_27 = 39;
                  enum E36 {
                    E36_UNSPECIFIED = 0;
                    E36_CONST_1 = 110;
                    E36_CONST_2 = 16;
                    E36_CONST_3 = 77;
                    E36_CONST_4 = 26;
                    E36_CONST_5 = 71;
                  }
                  optional E36 f_28 = 41;
                  enum E37 {
                    E37_UNSPECIFIED = 0;
                    E37_CONST_1 = 103;
                    E37_CONST_2 = 89;
                    E37_CONST_3 = 88;
                    E37_CONST_4 = 121;
                    E37_CONST_5 = 125;
                  }
                  optional E37 f_29 = 43;
                  optional string f_30 = 45;
                  optional string f_31 = 47;
                  optional bool f_32 = 48;
                  enum E38 {
                    E38_UNSPECIFIED = 0;
                    E38_CONST_1 = 112;
                    E38_CONST_2 = 1;
                    E38_CONST_3 = 28;
                    E38_CONST_4 = 119;
                    E38_CONST_5 = 124;
                  }
                  optional E38 f_33 = 49;
                  optional int64 f_34 = 50;
                  repeated string f_35 = 51;
                  optional bool f_36 = 52;
                  optional int32 f_37 = 53;
                  optional bool f_38 = 54;
                  optional fixed32 f_39 = 56;
                  optional int64 f_40 = 59;
                  optional int64 f_41 = 60;
                  optional int32 f_42 = 61;
                  optional string f_43 = 62;
                  optional bool f_44 = 63;
                  enum E39 {
                    E39_UNSPECIFIED = 0;
                    E39_CONST_1 = 46;
                    E39_CONST_2 = 99;
                    E39_CONST_3 = 8;
                    E39_CONST_4 = 123;
                    E39_CONST_5 = 115;
                  }
                  optional E39 f_45 = 65;
                  optional float f_46 = 66;
                  enum E40 {
                    E40_UNSPECIFIED = 0;
                    E40_CONST_1 = 36;
                    E40_CONST_2 = 19;
                    E40_CONST_3 = 117;
                    E40_CONST_4 = 13;
                    E40_CONST_5 = 49;
                  }
                  optional E40 f_47 = 68;
                  optional float f_48 = 71;
                  optional int32 f_49 = 72;
                  optional string f_50 = 74;
                  enum E41 {
                    E41_UNSPECIFIED = 0;
                    E41_CONST_1 = 4;
                    E41_CONST_2 = 34;
                    E41_CONST_3 = 66;
                    E41_CONST_4 = 97;
                    E41_CONST_5 = 48;
                  }
                  optional E41 f_51 = 76;
                  optional int64 f_52 = 80;
                  optional int64 f_53 = 81;
                  optional float f_54 = 83;
                  optional int64 f_55 = 84;
                  optional float f_56 = 85;
                  optional int32 f_57 = 86;
                  optional uint64 f_58 = 89;
                  optional uint32 f_59 = 91;
                  optional float f_60 = 92;
                  optional int64 f_61 = 94;
                  optional bool f_62 = 96;
                  enum E42 {
                    E42_UNSPECIFIED = 0;
                    E42_CONST_1 = 95;
                    E42_CONST_2 = 51;
                    E42_CONST_3 = 59;
                    E42_CONST_4 = 5;
                    E42_CONST_5 = 88;
                  }
                  optional E42 f_63 = 97;
                  optional bool f_64 = 100;
                  optional bool f_65 = 102;
                  optional int64 f_66 = 103;
                  optional int32 f_67 = 104;
                  optional int64 f_68 = 105;
                  optional fixed64 f_69 = 107;
                  optional bytes f_70 = 110;
                  optional string f_71 = 111;
                  optional fixed32 f_72 = 112;
                  enum E43 {
                    E43_UNSPECIFIED = 0;
                    E43_CONST_1 = 115;
                    E43_CONST_2 = 63;
                    E43_CONST_3 = 107;
                    E43_CONST_4 = 108;
                    E43_CONST_5 = 95;
                  }
                  repeated E43 f_73 = 113 [packed = true];
                  enum E44 {
                    E44_UNSPECIFIED = 0;
                    E44_CONST_1 = 17;
                    E44_CONST_2 = 32;
                    E44_CONST_3 = 26;
                    E44_CONST_4 = 121;
                    E44_CONST_5 = 35;
                  }
                  optional E44 f_74 = 114;
                  optional float f_75 = 115;
                  optional int64 f_76 = 116;
                  optional float f_77 = 117;
                  enum E45 {
                    E45_UNSPECIFIED = 0;
                    E45_CONST_1 = 45;
                    E45_CONST_2 = 101;
                    E45_CONST_3 = 29;
                    E45_CONST_4 = 28;
                    E45_CONST_5 = 65;
                  }
                  optional E45 f_78 = 118;
                  optional int64 f_79 = 120;
                  optional string f_80 = 121;
                  optional int32 f_81 = 122;
                  optional float f_82 = 124;
                  optional int32 f_83 = 125;
                  optional string f_84 = 129;
                  optional float f_85 = 130;
                  optional int64 f_86 = 131;
                  optional int32 f_87 = 132;
                  enum E46 {
                    E46_UNSPECIFIED = 0;
                    E46_CONST_1 = 29;
                    E46_CONST_2 = 87;
                    E46_CONST_3 = 69;
                    E46_CONST_4 = 68;
                    E46_CONST_5 = 22;
                  }
                  optional E46 f_88 = 134;
                  optional int32 f_89 = 136;
                  optional int64 f_90 = 138;
                  optional string f_91 = 139;
                  optional int32 f_92 = 140;
                  optional uint32 f_93 = 144;
                  optional string f_94 = 145;
                  optional int64 f_95 = 147;
                  optional float f_96 = 148;
                  optional float f_97 = 149;
                  optional int32 f_98 = 152;
                  optional uint32 f_99 = 153;
                  optional int64 f_100 = 154;
                  repeated int32 f_101 = 156 [packed = true];
                  optional float f_102 = 158;
                  optional int32 f_103 = 160;
                  enum E47 {
                    E47_UNSPECIFIED = 0;
                    E47_CONST_1 = 93;
                    E47_CONST_2 = 12;
                    E47_CONST_3 = 58;
                    E47_CONST_4 = 71;
                    E47_CONST_5 = 122;
                  }
                  optional E47 f_104 = 161;
                  optional int32 f_105 = 163;
                  optional bytes f_106 = 164;
                  enum E48 {
                    E48_UNSPECIFIED = 0;
                    E48_CONST_1 = 114;
                    E48_CONST_2 = 85;
                    E48_CONST_3 = 54;
                    E48_CONST_4 = 125;
                    E48_CONST_5 = 55;
                  }
                  optional E48 f_107 = 166;
                  optional int64 f_108 = 167;
                  repeated fixed64 f_109 = 168 [packed = true];
                  optional bool f_110 = 169;
                  optional uint32 f_111 = 170;
                }
                optional M100 f_6 = 7;
              }
              optional M85 f_2 = 3;
            }
            repeated M67 f_2 = 3;
            message M73 {
              optional bytes f_0 = 1;
              //optional bytes f_0 = 1 [ctype = CORD];
              message M87 {
                optional bool f_0 = 1;
              }
              repeated M87 f_1 = 2;
            }
            optional M73 f_3 = 4;
          }
          optional M59 f_3 = 5;
        }
        optional M45 f_1 = 2;
      }
      repeated M39 f_3 = 6;
    }
    optional M18 f_3 = 4;
  }
  optional M7 f_14 = 16;
  message M8 {
    optional uint64 f_0 = 1;
    optional fixed32 f_1 = 2;
    optional int32 f_2 = 4;
  }
  optional M8 f_16 = 17;
  message M9 {
    optional string f_0 = 1;
    message M17 {
      optional double f_0 = 2;
    }
    repeated M17 f_1 = 3;
  }
  optional M9 f_17 = 21;
  message M10 {
    optional int64 f_0 = 1;
    message M19 {
      optional int64 f_0 = 2;
      message M40 {
        enum E9 {
          E9_UNSPECIFIED = 0;
          E9_CONST_1 = 50;
          E9_CONST_2 = 101;
          E9_CONST_3 = 8;
          E9_CONST_4 = 87;
          E9_CONST_5 = 21;
        }
        optional E9 f_0 = 1;
        message M49 {
          optional bool f_0 = 1;
          message M56 {
            optional float f_0 = 2;
            optional int64 f_1 = 3;
          }
          repeated M56 f_1 = 2;
          message M57 {
            optional int64 f_0 = 1;
            message M71 {
              optional uint64 f_0 = 1;
            }
            optional M71 f_1 = 3;
            message M72 {
              optional int32 f_0 = 2;
              message M84 {
                optional float f_0 = 1;
              }
              optional M84 f_2 = 4;
            }
            optional M72 f_3 = 5;
            message M75 {
              optional fixed64 f_0 = 1;
              optional int32 f_1 = 4;
            }
            optional M75 f_5 = 6;
          }
          repeated M57 f_2 = 3;
          message M61 {
            optional string f_0 = 1;
          }
          optional M61 f_3 = 4;
        }
        optional M49 f_1 = 5;
      }
      optional M40 f_2 = 5;
      message M42 {
        optional float f_0 = 1;
        optional float f_1 = 4;
        repeated int64 f_2 = 8 [packed = true];
        optional float f_3 = 9;
        optional int64 f_4 = 10;
        optional int64 f_5 = 13;
        optional int64 f_6 = 14;
        optional string f_7 = 15;
        optional int32 f_8 = 16;
        optional bool f_9 = 18;
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 119;
          E10_CONST_2 = 32;
          E10_CONST_3 = 113;
          E10_CONST_4 = 22;
          E10_CONST_5 = 76;
        }
        optional E10 f_10 = 19;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 50;
          E11_CONST_2 = 22;
          E11_CONST_3 = 66;
          E11_CONST_4 = 72;
          E11_CONST_5 = 15;
        }
        repeated E11 f_11 = 20 [packed = true];
        optional int64 f_12 = 22;
        enum E12 {
          E12_UNSPECIFIED = 0;
          E12_CONST_1 = 4;
          E12_CONST_2 = 33;
          E12_CONST_3 = 35;
          E12_CONST_4 = 22;
          E12_CONST_5 = 74;
        }
        optional E12 f_13 = 23;
        optional int64 f_14 = 24;
        optional double f_15 = 26;
        enum E13 {
          E13_UNSPECIFIED = 0;
          E13_CONST_1 = 37;
          E13_CONST_2 = 88;
          E13_CONST_3 = 69;
          E13_CONST_4 = 87;
          E13_CONST_5 = 45;
        }
        optional E13 f_16 = 27;
        optional int32 f_17 = 28;
        enum E14 {
          E14_UNSPECIFIED = 0;
          E14_CONST_1 = 24;
          E14_CONST_2 = 18;
          E14_CONST_3 = 58;
          E14_CONST_4 = 83;
          E14_CONST_5 = 56;
        }
        optional E14 f_18 = 29;
        optional bool f_19 = 31;
        optional string f_20 = 32;
        optional float f_21 = 35;
        optional float f_22 = 37;
        optional int64 f_23 = 38;
        enum E15 {
          E15_UNSPECIFIED = 0;
          E15_CONST_1 = 89;
          E15_CONST_2 = 49;
          E15_CONST_3 = 37;
          E15_CONST_4 = 75;
          E15_CONST_5 = 125;
        }
        optional E15 f_24 = 39;
        optional uint64 f_25 = 40;
        optional int32 f_26 = 43;
        optional double f_27 = 45;
        optional string f_28 = 47;
        optional string f_29 = 48;
        optional int64 f_30 = 50;
        optional int64 f_31 = 51;
        optional int64 f_32 = 52;
        optional string f_33 = 53;
        optional int64 f_34 = 54;
        optional float f_35 = 55;
        enum E16 {
          E16_UNSPECIFIED = 0;
          E16_CONST_1 = 99;
          E16_CONST_2 = 92;
          E16_CONST_3 = 85;
          E16_CONST_4 = 98;
          E16_CONST_5 = 43;
        }
        optional E16 f_36 = 56;
        enum E17 {
          E17_UNSPECIFIED = 0;
          E17_CONST_1 = 91;
          E17_CONST_2 = 85;
          E17_CONST_3 = 74;
          E17_CONST_4 = 12;
          E17_CONST_5 = 4;
        }
        optional E17 f_37 = 58;
        enum E18 {
          E18_UNSPECIFIED = 0;
          E18_CONST_1 = 6;
          E18_CONST_2 = 79;
          E18_CONST_3 = 95;
          E18_CONST_4 = 84;
          E18_CONST_5 = 101;
        }
        optional E18 f_38 = 60;
        optional int32 f_39 = 62;
        optional string f_40 = 64;
        optional float f_41 = 65;
        optional bytes f_42 = 67;
        optional sint64 f_43 = 68;
        optional double f_44 = 69;
        optional fixed32 f_45 = 70;
        optional string f_46 = 71;
        enum E19 {
          E19_UNSPECIFIED = 0;
          E19_CONST_1 = 68;
          E19_CONST_2 = 25;
          E19_CONST_3 = 67;
          E19_CONST_4 = 15;
          E19_CONST_5 = 58;
        }
        optional E19 f_47 = 74;
        optional int32 f_48 = 75;
        optional int32 f_49 = 78;
        optional string f_50 = 79;
        optional bool f_51 = 80;
        optional int32 f_52 = 82;
        optional string f_53 = 83;
        optional string f_54 = 84;
        repeated int64 f_55 = 86 [packed = true];
        optional int64 f_56 = 89;
        optional int64 f_57 = 92;
        optional int64 f_58 = 93;
        optional int32 f_59 = 95;
      }
      optional M42 f_5 = 7;
    }
    optional M19 f_1 = 2;
  }
  repeated M10 f_21 = 22;
  message M11 {
    optional uint64 f_0 = 2;
    message M20 {
      optional bool f_0 = 1;
    }
    optional M20 f_2 = 4;
    message M23 {
      optional int64 f_0 = 2;
      message M37 {
        optional float f_0 = 2;
        message M43 {
          optional int64 f_0 = 2;
          message M58 {
            optional string f_0 = 1;
            message M81 {
              optional bool f_0 = 1;
            }
            optional M81 f_1 = 2;
            message M83 {
              optional bytes f_0 = 3;
              enum E25 {
                E25_UNSPECIFIED = 0;
                E25_CONST_1 = 9;
                E25_CONST_2 = 124;
                E25_CONST_3 = 33;
                E25_CONST_4 = 105;
                E25_CONST_5 = 16;
              }
              optional E25 f_1 = 4;
              optional int64 f_2 = 6;
              message M92 {
                enum E27 {
                  E27_UNSPECIFIED = 0;
                  E27_CONST_1 = 43;
                  E27_CONST_2 = 100;
                  E27_CONST_3 = 87;
                  E27_CONST_4 = 40;
                  E27_CONST_5 = 108;
                }
                optional E27 f_0 = 1;
                enum E28 {
                  E28_UNSPECIFIED = 0;
                  E28_CONST_1 = 14;
                  E28_CONST_2 = 99;
                  E28_CONST_3 = 67;
                  E28_CONST_4 = 100;
                  E28_CONST_5 = 110;
                }
                optional E28 f_1 = 3;
              }
              optional M92 f_6 = 8;
            }
            repeated M83 f_2 = 3;
          }
          optional M58 f_2 = 3;
          message M62 {
            optional bytes f_0 = 1 ;
            optional string f_1 = 3;
            message M68 {
              optional int64 f_0 = 1;
              message M90 {
                optional bytes f_0 = 1;
                //optional bytes f_0 = 1 [ctype = CORD];
              }
              repeated M90 f_1 = 2;
            }
            optional M68 f_3 = 5;
            message M78 {
              optional int32 f_0 = 1;
              optional bytes f_1 = 3;
              optional int64 f_2 = 4;
              repeated int32 f_3 = 7 [packed = true];
              optional string f_4 = 8;
              optional string f_5 = 9;
              message M86 {
                optional bool f_0 = 1;
              }
              optional M86 f_9 = 11;
            }
            optional M78 f_5 = 6;
          }
          optional M62 f_3 = 4;
        }
        optional M43 f_2 = 3;
      }
      repeated M37 f_2 = 3;
    }
    repeated M23 f_4 = 5;
  }
  repeated M11 f_22 = 23;
  message M12 {
    repeated int32 f_0 = 1 [packed = true];
  }
  optional M12 f_23 = 25;
  message M13 {
    enum E1 {
      E1_UNSPECIFIED = 0;
      E1_CONST_1 = 65;
      E1_CONST_2 = 66;
      E1_CONST_3 = 105;
      E1_CONST_4 = 79;
      E1_CONST_5 = 15;
    }
    optional E1 f_0 = 1;
    optional bool f_1 = 2;
    message M15 {
      optional bool f_0 = 1;
      message M33 {
        optional string f_0 = 1;
      }
      optional M33 f_1 = 4;
      message M36 {
        optional string f_0 = 1;
      }
      repeated M36 f_4 = 5;
    }
    optional M15 f_2 = 3;
    message M30 {
      optional int32 f_0 = 1;
    }
    optional M30 f_3 = 4;
  }
  repeated M13 f_25 = 26;
}
