// Copyright 2023 The Fleetbench Authors
//
// Licensed under the Apache License, Version 2.0 (the "License" );
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an " AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// WARNING: DO NOT EDIT! This file is auto-generated.
syntax = "proto2";

package fleetbench.proto;

message Message0 {
  enum E1 {
    E1_UNSPECIFIED = 0;
    E1_CONST_1 = 26;
    E1_CONST_2 = 23;
    E1_CONST_3 = 36;
    E1_CONST_4 = 1;
    E1_CONST_5 = 47;
  }
  optional E1 f_0 = 1;
  optional double f_1 = 3;
  optional int32 f_2 = 4;
  optional string f_3 = 6;
  optional bytes f_4 = 8;
  optional int32 f_5 = 11;
  message M1 {
    optional int64 f_0 = 3;
  }
  optional M1 f_11 = 12;
  message M2 {
    optional bool f_0 = 1;
    message M16 {
      enum E5 {
        E5_UNSPECIFIED = 0;
        E5_CONST_1 = 65;
        E5_CONST_2 = 2;
        E5_CONST_3 = 19;
        E5_CONST_4 = 77;
        E5_CONST_5 = 116;
      }
      optional E5 f_0 = 1;
      optional bytes f_1 = 2;
      enum E6 {
        E6_UNSPECIFIED = 0;
        E6_CONST_1 = 43;
        E6_CONST_2 = 61;
        E6_CONST_3 = 126;
        E6_CONST_4 = 104;
        E6_CONST_5 = 15;
      }
      optional E6 f_2 = 4;
      optional float f_3 = 5;
      optional bool f_4 = 7;
      optional fixed32 f_5 = 9;
      optional string f_6 = 10;
      enum E7 {
        E7_UNSPECIFIED = 0;
        E7_CONST_1 = 9;
        E7_CONST_2 = 65;
        E7_CONST_3 = 95;
        E7_CONST_4 = 14;
        E7_CONST_5 = 104;
      }
      repeated E7 f_7 = 11 [packed = true];
      optional bool f_8 = 14;
      message M20 {
        optional int32 f_0 = 1;
        optional string f_1 = 2;
        optional int64 f_2 = 3;
        message M30 {
          optional fixed32 f_0 = 1;
        }
        repeated M30 f_3 = 4;
        message M31 {
          optional string f_0 = 1;
          message M57 {
            optional string f_0 = 1;
            message M65 {
              enum E22 {
                E22_UNSPECIFIED = 0;
                E22_CONST_1 = 24;
                E22_CONST_2 = 68;
                E22_CONST_3 = 111;
                E22_CONST_4 = 38;
                E22_CONST_5 = 124;
              }
              optional E22 f_0 = 3;
            }
            optional M65 f_1 = 3;
            message M69 {
              enum E25 {
                E25_UNSPECIFIED = 0;
                E25_CONST_1 = 48;
                E25_CONST_2 = 65;
                E25_CONST_3 = 51;
                E25_CONST_4 = 111;
                E25_CONST_5 = 74;
              }
              optional E25 f_0 = 1;
              message M77 {
                optional uint32 f_0 = 1;
              }
              optional M77 f_1 = 2;
            }
            repeated M69 f_3 = 4;
          }
          optional M57 f_1 = 3;
        }
        optional M31 f_4 = 5;
        message M40 {
          enum E14 {
            E14_UNSPECIFIED = 0;
            E14_CONST_1 = 104;
            E14_CONST_2 = 7;
            E14_CONST_3 = 108;
            E14_CONST_4 = 101;
            E14_CONST_5 = 26;
          }
          optional E14 f_0 = 1;
          message M53 {
            enum E18 {
              E18_UNSPECIFIED = 0;
              E18_CONST_1 = 107;
              E18_CONST_2 = 114;
              E18_CONST_3 = 39;
              E18_CONST_4 = 7;
              E18_CONST_5 = 2;
            }
            optional E18 f_0 = 1;
            optional bytes f_1 = 3;
          }
          optional M53 f_1 = 2;
          message M58 {
            optional float f_0 = 2;
            message M73 {
              optional string f_0 = 1;
              message M78 {
                repeated int32 f_0 = 2 [packed = true];
                message M81 {
                  optional string f_0 = 2;
                }
                optional M81 f_2 = 3;
                message M87 {
                  optional float f_0 = 1;
                }
                optional M87 f_3 = 5;
              }
              optional M78 f_1 = 2;
            }
            optional M73 f_2 = 3;
          }
          optional M58 f_2 = 4;
        }
        repeated M40 f_5 = 6;
        message M44 {
          optional float f_0 = 1;
          enum E16 {
            E16_UNSPECIFIED = 0;
            E16_CONST_1 = 71;
            E16_CONST_2 = 103;
            E16_CONST_3 = 121;
            E16_CONST_4 = 51;
            E16_CONST_5 = 88;
          }
          optional E16 f_1 = 2;
          optional float f_2 = 4;
          optional double f_3 = 5;
          optional int64 f_4 = 6;
          optional int32 f_5 = 8;
          message M59 {
            enum E19 {
              E19_UNSPECIFIED = 0;
              E19_CONST_1 = 103;
              E19_CONST_2 = 78;
              E19_CONST_3 = 70;
              E19_CONST_4 = 68;
              E19_CONST_5 = 61;
            }
            optional E19 f_0 = 1;
            message M72 {
              optional int64 f_0 = 1;
            }
            repeated M72 f_1 = 2;
          }
          repeated M59 f_8 = 11;
          message M61 {
            optional string f_0 = 1;
          }
          optional M61 f_11 = 12;
          message M62 {
            optional float f_0 = 1;
            optional int32 f_1 = 2;
            optional int32 f_2 = 3;
            message M74 {
              optional int64 f_0 = 1;
            }
            optional M74 f_3 = 4;
          }
          optional M62 f_12 = 15;
        }
        optional M44 f_6 = 7;
      }
      optional M20 f_14 = 15;
      message M22 {
        optional string f_0 = 1;
        message M29 {
          optional string f_0 = 2;
          optional string f_1 = 3;
          enum E12 {
            E12_UNSPECIFIED = 0;
            E12_CONST_1 = 109;
            E12_CONST_2 = 92;
            E12_CONST_3 = 61;
            E12_CONST_4 = 84;
            E12_CONST_5 = 101;
          }
          optional E12 f_2 = 5;
        }
        optional M29 f_1 = 4;
        message M32 {
          repeated uint64 f_0 = 1 [packed = true];
          optional fixed64 f_1 = 3;
          optional int64 f_2 = 4;
          optional bool f_3 = 5;
          optional bool f_4 = 6;
          message M47 {
            optional string f_0 = 1;
          }
          repeated M47 f_6 = 8;
          message M50 {
            optional float f_0 = 4;
          }
          optional M50 f_8 = 10;
        }
        optional M32 f_4 = 5;
        message M43 {
          optional int32 f_0 = 1;
          message M46 {
            enum E17 {
              E17_UNSPECIFIED = 0;
              E17_CONST_1 = 78;
              E17_CONST_2 = 16;
              E17_CONST_3 = 30;
              E17_CONST_4 = 114;
              E17_CONST_5 = 4;
            }
            optional E17 f_0 = 1;
            optional int64 f_1 = 3;
            message M67 {
              optional float f_0 = 1;
            }
            optional M67 f_3 = 4;
          }
          optional M46 f_1 = 2;
          message M48 {
            optional uint64 f_0 = 1;
          }
          optional M48 f_2 = 4;
          message M51 {
            optional int64 f_0 = 1;
          }
          optional M51 f_4 = 6;
        }
        optional M43 f_5 = 6;
      }
      optional M22 f_15 = 16;
    }
    repeated M16 f_1 = 2;
  }
  optional M2 f_12 = 13;
  message M3 {
    enum E2 {
      E2_UNSPECIFIED = 0;
      E2_CONST_1 = 52;
      E2_CONST_2 = 65;
      E2_CONST_3 = 77;
      E2_CONST_4 = 27;
      E2_CONST_5 = 61;
    }
    optional E2 f_0 = 2;
    optional double f_1 = 3;
  }
  optional M3 f_13 = 14;
  message M4 {
    optional double f_0 = 3;
  }
  optional M4 f_14 = 16;
  message M5 {
    repeated string f_0 = 1;
  }
  repeated M5 f_16 = 17;
  message M6 {
    optional string f_0 = 1;
    message M18 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 4;
      optional bool f_2 = 5;
      optional float f_3 = 6;
      optional string f_4 = 9;
      optional float f_5 = 10;
      optional fixed32 f_6 = 11;
      optional float f_7 = 12;
      enum E8 {
        E8_UNSPECIFIED = 0;
        E8_CONST_1 = 109;
        E8_CONST_2 = 96;
        E8_CONST_3 = 13;
        E8_CONST_4 = 25;
        E8_CONST_5 = 23;
      }
      optional E8 f_8 = 13;
      optional float f_9 = 14;
      optional bytes f_10 = 15;
      optional bool f_11 = 19;
      optional string f_12 = 20;
      optional int32 f_13 = 21;
      optional int64 f_14 = 24;
      enum E9 {
        E9_UNSPECIFIED = 0;
        E9_CONST_1 = 111;
        E9_CONST_2 = 19;
        E9_CONST_3 = 61;
        E9_CONST_4 = 88;
        E9_CONST_5 = 112;
      }
      optional E9 f_15 = 25;
      optional bytes f_16 = 26;
      optional string f_17 = 29;
      optional uint32 f_18 = 32;
      optional int64 f_19 = 33;
    }
    optional M18 f_1 = 2;
  }
  optional M6 f_17 = 19;
  message M7 {
    optional int64 f_0 = 1;
    optional int64 f_1 = 2;
    message M14 {
      enum E4 {
        E4_UNSPECIFIED = 0;
        E4_CONST_1 = 79;
        E4_CONST_2 = 110;
        E4_CONST_3 = 68;
        E4_CONST_4 = 36;
        E4_CONST_5 = 72;
      }
      optional E4 f_0 = 2;
      message M23 {
        repeated int32 f_0 = 3 [packed = true];
      }
      optional M23 f_2 = 3;
      message M25 {
        optional float f_0 = 1;
        optional uint64 f_1 = 2;
        optional sint32 f_2 = 3;
        optional bytes f_3 = 4;
        //optional bytes f_3 = 4 [ctype = CORD];
        optional int64 f_4 = 6;
        optional bool f_5 = 7;
        optional string f_6 = 8;
        optional int64 f_7 = 9;
        enum E11 {
          E11_UNSPECIFIED = 0;
          E11_CONST_1 = 52;
          E11_CONST_2 = 57;
          E11_CONST_3 = 21;
          E11_CONST_4 = 17;
          E11_CONST_5 = 51;
        }
        optional E11 f_8 = 11;
        optional int32 f_9 = 12;
        optional uint64 f_10 = 13;
        optional int64 f_11 = 15;
        optional fixed64 f_12 = 17;
      }
      optional M25 f_3 = 4;
      message M28 {
        optional uint64 f_0 = 2;
      }
      optional M28 f_4 = 5;
    }
    repeated M14 f_2 = 4;
  }
  optional M7 f_19 = 20;
  message M8 {
    optional bytes f_0 = 1;
  }
  optional M8 f_20 = 21;
  message M9 {
    optional int64 f_0 = 2;
    message M17 {
      optional int32 f_0 = 1;
      optional int64 f_1 = 2;
      optional bytes f_2 = 3;
      //optional bytes f_2 = 3 [ctype = CORD];
      message M19 {
        optional int32 f_0 = 1;
      }
      optional M19 f_3 = 4;
      message M24 {
        enum E10 {
          E10_UNSPECIFIED = 0;
          E10_CONST_1 = 52;
          E10_CONST_2 = 56;
          E10_CONST_3 = 87;
          E10_CONST_4 = 29;
          E10_CONST_5 = 97;
        }
        optional E10 f_0 = 1;
        optional string f_1 = 2;
        message M34 {
          optional bool f_0 = 1;
        }
        repeated M34 f_2 = 3;
        message M36 {
          optional uint64 f_0 = 1;
          message M49 {
            optional fixed32 f_0 = 1;
            message M75 {
              enum E26 {
                E26_UNSPECIFIED = 0;
                E26_CONST_1 = 76;
                E26_CONST_2 = 86;
                E26_CONST_3 = 77;
                E26_CONST_4 = 56;
                E26_CONST_5 = 62;
              }
              optional E26 f_0 = 1;
              optional uint64 f_1 = 3;
              optional int32 f_2 = 4;
              optional bool f_3 = 6;
              optional int64 f_4 = 10;
              optional int32 f_5 = 11;
              optional int64 f_6 = 12;
              optional uint32 f_7 = 14;
              optional int64 f_8 = 17;
              enum E27 {
                E27_UNSPECIFIED = 0;
                E27_CONST_1 = 34;
                E27_CONST_2 = 87;
                E27_CONST_3 = 119;
                E27_CONST_4 = 54;
                E27_CONST_5 = 26;
              }
              optional E27 f_9 = 18;
              repeated int32 f_10 = 20 [packed = true];
              optional int32 f_11 = 21;
              optional bool f_12 = 22;
              optional string f_13 = 23;
            }
            repeated M75 f_1 = 2;
          }
          repeated M49 f_1 = 2;
        }
        repeated M36 f_3 = 5;
        message M38 {
          optional string f_0 = 1;
          message M56 {
            optional string f_0 = 5;
          }
          optional M56 f_1 = 3;
        }
        optional M38 f_5 = 6;
        message M41 {
          enum E15 {
            E15_UNSPECIFIED = 0;
            E15_CONST_1 = 87;
            E15_CONST_2 = 59;
            E15_CONST_3 = 41;
            E15_CONST_4 = 28;
            E15_CONST_5 = 51;
          }
          optional E15 f_0 = 1;
          message M45 {
            optional int32 f_0 = 1;
            message M64 {
              optional string f_0 = 1;
            }
            optional M64 f_1 = 2;
            message M66 {
              optional int32 f_0 = 2;
              optional string f_1 = 3;
              optional float f_2 = 4;
              optional bytes f_3 = 6;
              optional int64 f_4 = 7;
            }
            repeated M66 f_2 = 3;
            message M70 {
              optional int64 f_0 = 2;
            }
            optional M70 f_3 = 4;
          }
          repeated M45 f_1 = 3;
          message M52 {
            optional int32 f_0 = 4;
          }
          repeated M52 f_3 = 4;
          message M55 {
            optional uint64 f_0 = 1;
            message M71 {
              optional int32 f_0 = 1;
              message M79 {
                optional bytes f_0 = 4;
                //optional bytes f_0 = 4 [ctype = CORD];
                optional int32 f_1 = 6;
                optional int32 f_2 = 7;
                message M82 {
                  optional uint64 f_0 = 1;
                }
                repeated M82 f_7 = 8;
                message M84 {
                  optional bool f_0 = 1;
                }
                optional M84 f_8 = 9;
                message M88 {
                  optional bytes f_0 = 2;
                  optional int64 f_1 = 3;
                }
                optional M88 f_9 = 10;
              }
              optional M79 f_1 = 2;
            }
            optional M71 f_1 = 3;
          }
          optional M55 f_4 = 5;
          message M60 {
            repeated string f_0 = 2;
          }
          repeated M60 f_5 = 7;
          message M63 {
            optional string f_0 = 1;
            enum E20 {
              E20_UNSPECIFIED = 0;
              E20_CONST_1 = 86;
              E20_CONST_2 = 81;
              E20_CONST_3 = 36;
              E20_CONST_4 = 76;
              E20_CONST_5 = 102;
            }
            optional E20 f_1 = 2;
            optional bytes f_2 = 4;
            optional int64 f_3 = 6;
            optional float f_4 = 7;
            optional int64 f_5 = 9;
            optional string f_6 = 11;
            repeated double f_7 = 13 [packed = true];
            optional string f_8 = 14;
            optional bool f_9 = 15;
            optional float f_10 = 17;
            optional int64 f_11 = 18;
            optional bytes f_12 = 21;
            //optional bytes f_12 = 21 [ctype = CORD];
            optional int64 f_13 = 23;
            optional bool f_14 = 25;
            enum E21 {
              E21_UNSPECIFIED = 0;
              E21_CONST_1 = 111;
              E21_CONST_2 = 51;
              E21_CONST_3 = 40;
              E21_CONST_4 = 54;
              E21_CONST_5 = 46;
            }
            optional E21 f_15 = 26;
            optional int32 f_16 = 27;
            optional bool f_17 = 28;
            optional int64 f_18 = 30;
            optional int32 f_19 = 33;
            optional string f_20 = 34;
            optional int64 f_21 = 35;
            message M68 {
              enum E23 {
                E23_UNSPECIFIED = 0;
                E23_CONST_1 = 93;
                E23_CONST_2 = 124;
                E23_CONST_3 = 11;
                E23_CONST_4 = 53;
                E23_CONST_5 = 103;
              }
              optional E23 f_0 = 1;
              optional bytes f_1 = 3;
              optional bool f_2 = 5;
              optional string f_3 = 6;
              enum E24 {
                E24_UNSPECIFIED = 0;
                E24_CONST_1 = 123;
                E24_CONST_2 = 108;
                E24_CONST_3 = 113;
                E24_CONST_4 = 25;
                E24_CONST_5 = 15;
              }
              optional E24 f_4 = 7;
              optional bytes f_5 = 8;
              //optional bytes f_5 = 8 [ctype = CORD];
              optional int32 f_6 = 9;
              message M76 {
                optional int32 f_0 = 2;
                enum E28 {
                  E28_UNSPECIFIED = 0;
                  E28_CONST_1 = 31;
                  E28_CONST_2 = 10;
                  E28_CONST_3 = 77;
                  E28_CONST_4 = 80;
                  E28_CONST_5 = 29;
                }
                optional E28 f_1 = 3;
                optional float f_2 = 4;
                message M85 {
                  optional bool f_0 = 2;
                  message M90 {
                    enum E37 {
                      E37_UNSPECIFIED = 0;
                      E37_CONST_1 = 93;
                      E37_CONST_2 = 77;
                      E37_CONST_3 = 64;
                      E37_CONST_4 = 12;
                      E37_CONST_5 = 35;
                    }
                    optional E37 f_0 = 1;
                    optional float f_1 = 3;
                  }
                  optional M90 f_2 = 3;
                  message M93 {
                    optional bytes f_0 = 2;
                  }
                  optional M93 f_3 = 4;
                }
                optional M85 f_4 = 5;
              }
              optional M76 f_9 = 11;
              message M80 {
                optional fixed64 f_0 = 1;
                optional bool f_1 = 3;
                enum E29 {
                  E29_UNSPECIFIED = 0;
                  E29_CONST_1 = 100;
                  E29_CONST_2 = 86;
                  E29_CONST_3 = 110;
                  E29_CONST_4 = 35;
                  E29_CONST_5 = 22;
                }
                optional E29 f_2 = 4;
                optional string f_3 = 6;
                enum E30 {
                  E30_UNSPECIFIED = 0;
                  E30_CONST_1 = 79;
                  E30_CONST_2 = 50;
                  E30_CONST_3 = 35;
                  E30_CONST_4 = 122;
                  E30_CONST_5 = 113;
                }
                optional E30 f_4 = 7;
                optional float f_5 = 10;
                optional float f_6 = 11;
                optional bytes f_7 = 12;
                optional string f_8 = 14;
                optional uint32 f_9 = 17;
                optional fixed32 f_10 = 20;
                optional string f_11 = 21;
                optional double f_12 = 22;
                optional int32 f_13 = 23;
                optional bytes f_14 = 25;
                //optional bytes f_14 = 25 [ctype = CORD];
                enum E31 {
                  E31_UNSPECIFIED = 0;
                  E31_CONST_1 = 43;
                  E31_CONST_2 = 23;
                  E31_CONST_3 = 94;
                  E31_CONST_4 = 76;
                  E31_CONST_5 = 125;
                }
                optional E31 f_15 = 28;
                optional string f_16 = 29;
                optional int32 f_17 = 30;
                optional int64 f_18 = 34;
                optional float f_19 = 35;
                repeated string f_20 = 37;
                optional int64 f_21 = 38;
                enum E32 {
                  E32_UNSPECIFIED = 0;
                  E32_CONST_1 = 121;
                  E32_CONST_2 = 73;
                  E32_CONST_3 = 56;
                  E32_CONST_4 = 40;
                  E32_CONST_5 = 55;
                }
                optional E32 f_22 = 39;
                optional int64 f_23 = 41;
                optional int64 f_24 = 42;
                optional int32 f_25 = 45;
                enum E33 {
                  E33_UNSPECIFIED = 0;
                  E33_CONST_1 = 122;
                  E33_CONST_2 = 90;
                  E33_CONST_3 = 5;
                  E33_CONST_4 = 98;
                  E33_CONST_5 = 40;
                }
                optional E33 f_26 = 47;
                optional bool f_27 = 49;
                optional bytes f_28 = 50;
                optional fixed32 f_29 = 51;
                optional uint64 f_30 = 52;
                optional string f_31 = 55;
                optional string f_32 = 56;
                optional int64 f_33 = 57;
                optional fixed32 f_34 = 59;
                enum E34 {
                  E34_UNSPECIFIED = 0;
                  E34_CONST_1 = 82;
                  E34_CONST_2 = 114;
                  E34_CONST_3 = 70;
                  E34_CONST_4 = 119;
                  E34_CONST_5 = 48;
                }
                repeated E34 f_35 = 60 [packed = true];
                optional fixed64 f_36 = 61;
                optional string f_37 = 63;
                optional int64 f_38 = 64;
                optional fixed32 f_39 = 65;
                optional int32 f_40 = 66;
                optional int64 f_41 = 68;
                enum E35 {
                  E35_UNSPECIFIED = 0;
                  E35_CONST_1 = 85;
                  E35_CONST_2 = 20;
                  E35_CONST_3 = 103;
                  E35_CONST_4 = 89;
                  E35_CONST_5 = 71;
                }
                optional E35 f_42 = 69;
                optional fixed32 f_43 = 70;
                optional int32 f_44 = 71;
                optional bool f_45 = 73;
                optional fixed64 f_46 = 74;
                enum E36 {
                  E36_UNSPECIFIED = 0;
                  E36_CONST_1 = 40;
                  E36_CONST_2 = 82;
                  E36_CONST_3 = 25;
                  E36_CONST_4 = 92;
                  E36_CONST_5 = 28;
                }
                optional E36 f_47 = 76;
                optional double f_48 = 77;
                optional int64 f_49 = 80;
                optional float f_50 = 82;
                optional string f_51 = 83;
                optional int64 f_52 = 85;
                optional bool f_53 = 86;
                optional int64 f_54 = 87;
                optional int64 f_55 = 88;
                optional int64 f_56 = 91;
                message M83 {
                  optional bool f_0 = 2;
                }
                repeated M83 f_91 = 93;
                message M86 {
                  optional double f_0 = 2;
                  message M91 {
                    optional int32 f_0 = 2;
                    message M95 {
                      optional int64 f_0 = 1;
                      message M97 {
                        repeated int32 f_0 = 1 [packed = true];
                        message M101 {
                          optional int64 f_0 = 2;
                        }
                        repeated M101 f_1 = 3;
                      }
                      optional M97 f_1 = 3;
                    }
                    repeated M95 f_2 = 3;
                    message M96 {
                      optional uint64 f_0 = 1;
                      optional int32 f_1 = 2;
                      optional float f_2 = 4;
                      message M99 {
                        optional uint32 f_0 = 1;
                        message M100 {
                          enum E38 {
                            E38_UNSPECIFIED = 0;
                            E38_CONST_1 = 73;
                            E38_CONST_2 = 40;
                            E38_CONST_3 = 38;
                            E38_CONST_4 = 60;
                            E38_CONST_5 = 11;
                          }
                          optional E38 f_0 = 1;
                          message M102 {
                            optional int32 f_0 = 1;
                            optional float f_1 = 2;
                            message M103 {
                              optional int64 f_0 = 2;
                              message M104 {
                                enum E39 {
                                  E39_UNSPECIFIED = 0;
                                  E39_CONST_1 = 83;
                                  E39_CONST_2 = 56;
                                  E39_CONST_3 = 109;
                                  E39_CONST_4 = 34;
                                  E39_CONST_5 = 28;
                                }
                                optional E39 f_0 = 1;
                                message M105 {
                                  optional int64 f_0 = 2;
                                  message M106 {
                                    optional string f_0 = 1;
                                    message M107 {
                                      optional uint64 f_0 = 3;
                                    }
                                    optional M107 f_1 = 2;
                                    message M108 {
                                      optional int32 f_0 = 1;
                                    }
                                    optional M108 f_2 = 3;
                                  }
                                  repeated M106 f_2 = 4;
                                }
                                optional M105 f_1 = 2;
                              }
                              repeated M104 f_2 = 3;
                            }
                            optional M103 f_2 = 5;
                          }
                          optional M102 f_1 = 2;
                        }
                        repeated M100 f_1 = 2;
                      }
                      optional M99 f_4 = 5;
                    }
                    repeated M96 f_3 = 4;
                  }
                  optional M91 f_2 = 3;
                }
                optional M86 f_93 = 94;
                message M89 {
                  optional int64 f_0 = 1;
                  message M92 {
                    optional fixed64 f_0 = 1;
                    message M94 {
                      optional uint32 f_0 = 1;
                      message M98 {
                        optional string f_0 = 2;
                      }
                      optional M98 f_1 = 2;
                    }
                    optional M94 f_1 = 3;
                  }
                  repeated M92 f_1 = 2;
                }
                optional M89 f_94 = 95;
              }
              optional M80 f_11 = 12;
            }
            repeated M68 f_35 = 36;
          }
          optional M63 f_7 = 10;
        }
        repeated M41 f_6 = 7;
      }
      optional M24 f_4 = 5;
      message M26 {
        optional string f_0 = 2;
        message M33 {
          optional int32 f_0 = 2;
          optional int64 f_1 = 4;
          optional float f_2 = 5;
          optional string f_3 = 7;
          optional int32 f_4 = 9;
        }
        optional M33 f_2 = 3;
        message M39 {
          optional string f_0 = 2;
        }
        optional M39 f_3 = 4;
      }
      optional M26 f_5 = 6;
      message M27 {
        optional float f_0 = 2;
        optional int64 f_1 = 3;
        optional int64 f_2 = 4;
      }
      optional M27 f_6 = 8;
    }
    optional M17 f_2 = 3;
  }
  optional M9 f_21 = 22;
  message M10 {
    enum E3 {
      E3_UNSPECIFIED = 0;
      E3_CONST_1 = 92;
      E3_CONST_2 = 65;
      E3_CONST_3 = 94;
      E3_CONST_4 = 104;
      E3_CONST_5 = 36;
    }
    optional E3 f_0 = 1;
  }
  optional M10 f_22 = 25;
  message M11 {
    optional bytes f_0 = 1;
  }
  repeated M11 f_25 = 26;
  message M12 {
    optional string f_0 = 1;
  }
  optional M12 f_26 = 27;
  message M13 {
    optional int64 f_0 = 1;
    message M15 {
      optional int32 f_0 = 2;
      message M21 {
        optional uint32 f_0 = 1;
        optional int64 f_1 = 3;
        message M35 {
          optional float f_0 = 2;
        }
        optional M35 f_3 = 5;
        message M37 {
          enum E13 {
            E13_UNSPECIFIED = 0;
            E13_CONST_1 = 107;
            E13_CONST_2 = 74;
            E13_CONST_3 = 66;
            E13_CONST_4 = 81;
            E13_CONST_5 = 64;
          }
          repeated E13 f_0 = 1 [packed = true];
          message M54 {
            optional int64 f_0 = 2;
          }
          repeated M54 f_1 = 2;
        }
        optional M37 f_5 = 6;
        message M42 {
          optional string f_0 = 1;
        }
        optional M42 f_6 = 9;
      }
      optional M21 f_2 = 3;
    }
    optional M15 f_1 = 2;
  }
  repeated M13 f_27 = 28;
}
